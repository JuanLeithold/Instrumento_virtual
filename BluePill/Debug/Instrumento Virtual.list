
Instrumento Virtual.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         0000449c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080045a8  080045a8  000145a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e8  080045e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080045e8  080045e8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e8  080045e8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080045f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000010  08004600  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08004600  0002015c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee7c  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000242c  00000000  00000000  0002eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  000312e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  000320a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c7f  00000000  00000000  00032d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105e5  00000000  00000000  0004b9df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008fbe9  00000000  00000000  0005bfc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ebbad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037f0  00000000  00000000  000ebc00  2**2
=======
  1 .text         000047fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004908  08004908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004948  08004948  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004948  08004948  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004948  08004948  00014948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800494c  0800494c  0001494c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004950  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000000c  0800495c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a0  0800495c  000201a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fde6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c7  00000000  00000000  0002fe1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  000324e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d48  00000000  00000000  00033338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e60  00000000  00000000  00034080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113c6  00000000  00000000  0004cee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ff2c  00000000  00000000  0005e2a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee1d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  000ee224  2**2
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
<<<<<<< HEAD
 800012c:	08004590 	.word	0x08004590
=======
 800012c:	080048f0 	.word	0x080048f0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
<<<<<<< HEAD
 8000144:	20000014 	.word	0x20000014
 8000148:	08004590 	.word	0x08004590
=======
 8000144:	20000010 	.word	0x20000010
 8000148:	080048f0 	.word	0x080048f0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

0800014c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	; (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	; (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
<<<<<<< HEAD
  hadc1.Init.ContinuousConvMode = DISABLE;
=======
  hadc1.Init.ContinuousConvMode = ENABLE;
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 8000168:	4b15      	ldr	r3, [pc, #84]	; (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2200      	movs	r2, #0
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	; (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	; (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	; (80001c0 <MX_ADC1_Init+0x74>)
<<<<<<< HEAD
 800018a:	f000 fe97 	bl	8000ebc <HAL_ADC_Init>
=======
 800018a:	f000 ff6d 	bl	8001068 <HAL_ADC_Init>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
<<<<<<< HEAD
 8000194:	f000 fb86 	bl	80008a4 <Error_Handler>
=======
 8000194:	f000 fc06 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000198:	2306      	movs	r3, #6
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
<<<<<<< HEAD
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001a0:	2300      	movs	r3, #0
=======
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 80001a0:	2306      	movs	r3, #6
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	; (80001c0 <MX_ADC1_Init+0x74>)
<<<<<<< HEAD
 80001aa:	f001 f94b 	bl	8001444 <HAL_ADC_ConfigChannel>
=======
 80001aa:	f001 faf3 	bl	8001794 <HAL_ADC_ConfigChannel>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
<<<<<<< HEAD
 80001b4:	f000 fb76 	bl	80008a4 <Error_Handler>
=======
 80001b4:	f000 fbf6 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000002c 	.word	0x2000002c
 80001c4:	40012400 	.word	0x40012400

080001c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d0:	f107 0310 	add.w	r3, r7, #16
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	605a      	str	r2, [r3, #4]
 80001da:	609a      	str	r2, [r3, #8]
 80001dc:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4a14      	ldr	r2, [pc, #80]	; (8000234 <HAL_ADC_MspInit+0x6c>)
 80001e4:	4293      	cmp	r3, r2
<<<<<<< HEAD
 80001e6:	d121      	bne.n	800022c <HAL_ADC_MspInit+0x64>
=======
 80001e6:	d129      	bne.n	800023c <HAL_ADC_MspInit+0x74>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
<<<<<<< HEAD
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <HAL_ADC_MspInit+0x70>)
=======
 80001e8:	4b17      	ldr	r3, [pc, #92]	; (8000248 <HAL_ADC_MspInit+0x80>)
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001f2:	6193      	str	r3, [r2, #24]
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <HAL_ADC_MspInit+0x70>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000200:	4b0d      	ldr	r3, [pc, #52]	; (8000238 <HAL_ADC_MspInit+0x70>)
=======
 8000200:	4b11      	ldr	r3, [pc, #68]	; (8000248 <HAL_ADC_MspInit+0x80>)
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a0c      	ldr	r2, [pc, #48]	; (8000238 <HAL_ADC_MspInit+0x70>)
 8000206:	f043 0304 	orr.w	r3, r3, #4
 800020a:	6193      	str	r3, [r2, #24]
 800020c:	4b0a      	ldr	r3, [pc, #40]	; (8000238 <HAL_ADC_MspInit+0x70>)
 800020e:	699b      	ldr	r3, [r3, #24]
 8000210:	f003 0304 	and.w	r3, r3, #4
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000218:	2340      	movs	r3, #64	; 0x40
 800021a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800021c:	2303      	movs	r3, #3
 800021e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000220:	f107 0310 	add.w	r3, r7, #16
 8000224:	4619      	mov	r1, r3
<<<<<<< HEAD
 8000226:	4805      	ldr	r0, [pc, #20]	; (800023c <HAL_ADC_MspInit+0x74>)
 8000228:	f001 fc60 	bl	8001aec <HAL_GPIO_Init>

=======
 8000226:	4809      	ldr	r0, [pc, #36]	; (800024c <HAL_ADC_MspInit+0x84>)
 8000228:	f001 fe10 	bl	8001e4c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800022c:	2200      	movs	r2, #0
 800022e:	2100      	movs	r1, #0
 8000230:	2012      	movs	r0, #18
 8000232:	f001 fd22 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000236:	2012      	movs	r0, #18
 8000238:	f001 fd3b 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
<<<<<<< HEAD
 800022c:	bf00      	nop
 800022e:	3720      	adds	r7, #32
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40012400 	.word	0x40012400
 8000238:	40021000 	.word	0x40021000
 800023c:	40010800 	.word	0x40010800

08000240 <MX_GPIO_Init>:
=======
 800023c:	bf00      	nop
 800023e:	3720      	adds	r7, #32
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	40012400 	.word	0x40012400
 8000248:	40021000 	.word	0x40021000
 800024c:	40010800 	.word	0x40010800

08000250 <MX_GPIO_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000240:	b580      	push	{r7, lr}
 8000242:	b088      	sub	sp, #32
 8000244:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000246:	f107 0310 	add.w	r3, r7, #16
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000254:	4b45      	ldr	r3, [pc, #276]	; (800036c <MX_GPIO_Init+0x12c>)
 8000256:	699b      	ldr	r3, [r3, #24]
 8000258:	4a44      	ldr	r2, [pc, #272]	; (800036c <MX_GPIO_Init+0x12c>)
 800025a:	f043 0310 	orr.w	r3, r3, #16
 800025e:	6193      	str	r3, [r2, #24]
 8000260:	4b42      	ldr	r3, [pc, #264]	; (800036c <MX_GPIO_Init+0x12c>)
 8000262:	699b      	ldr	r3, [r3, #24]
 8000264:	f003 0310 	and.w	r3, r3, #16
 8000268:	60fb      	str	r3, [r7, #12]
 800026a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800026c:	4b3f      	ldr	r3, [pc, #252]	; (800036c <MX_GPIO_Init+0x12c>)
 800026e:	699b      	ldr	r3, [r3, #24]
 8000270:	4a3e      	ldr	r2, [pc, #248]	; (800036c <MX_GPIO_Init+0x12c>)
 8000272:	f043 0320 	orr.w	r3, r3, #32
 8000276:	6193      	str	r3, [r2, #24]
 8000278:	4b3c      	ldr	r3, [pc, #240]	; (800036c <MX_GPIO_Init+0x12c>)
 800027a:	699b      	ldr	r3, [r3, #24]
 800027c:	f003 0320 	and.w	r3, r3, #32
 8000280:	60bb      	str	r3, [r7, #8]
 8000282:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000284:	4b39      	ldr	r3, [pc, #228]	; (800036c <MX_GPIO_Init+0x12c>)
 8000286:	699b      	ldr	r3, [r3, #24]
 8000288:	4a38      	ldr	r2, [pc, #224]	; (800036c <MX_GPIO_Init+0x12c>)
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6193      	str	r3, [r2, #24]
 8000290:	4b36      	ldr	r3, [pc, #216]	; (800036c <MX_GPIO_Init+0x12c>)
 8000292:	699b      	ldr	r3, [r3, #24]
 8000294:	f003 0304 	and.w	r3, r3, #4
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800029c:	4b33      	ldr	r3, [pc, #204]	; (800036c <MX_GPIO_Init+0x12c>)
 800029e:	699b      	ldr	r3, [r3, #24]
 80002a0:	4a32      	ldr	r2, [pc, #200]	; (800036c <MX_GPIO_Init+0x12c>)
 80002a2:	f043 0308 	orr.w	r3, r3, #8
 80002a6:	6193      	str	r3, [r2, #24]
 80002a8:	4b30      	ldr	r3, [pc, #192]	; (800036c <MX_GPIO_Init+0x12c>)
 80002aa:	699b      	ldr	r3, [r3, #24]
 80002ac:	f003 0308 	and.w	r3, r3, #8
 80002b0:	603b      	str	r3, [r7, #0]
 80002b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, O1_Pin|O2_Pin, GPIO_PIN_RESET);
 80002b4:	2200      	movs	r2, #0
 80002b6:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80002ba:	482d      	ldr	r0, [pc, #180]	; (8000370 <MX_GPIO_Init+0x130>)
 80002bc:	f001 fdb1 	bl	8001e22 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 80002c0:	2200      	movs	r2, #0
 80002c2:	213f      	movs	r1, #63	; 0x3f
 80002c4:	482b      	ldr	r0, [pc, #172]	; (8000374 <MX_GPIO_Init+0x134>)
 80002c6:	f001 fdac 	bl	8001e22 <HAL_GPIO_WritePin>
                          |O7_Pin|O8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MUXA_Pin|MUXB_Pin|MUXC_Pin|EN_Pin
 80002ca:	2200      	movs	r2, #0
 80002cc:	f649 4102 	movw	r1, #39938	; 0x9c02
 80002d0:	4829      	ldr	r0, [pc, #164]	; (8000378 <MX_GPIO_Init+0x138>)
 80002d2:	f001 fda6 	bl	8001e22 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = O1_Pin|O2_Pin;
 80002d6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80002da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002dc:	2301      	movs	r3, #1
 80002de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002e0:	2302      	movs	r3, #2
 80002e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e4:	2302      	movs	r3, #2
 80002e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002e8:	f107 0310 	add.w	r3, r7, #16
 80002ec:	4619      	mov	r1, r3
 80002ee:	4820      	ldr	r0, [pc, #128]	; (8000370 <MX_GPIO_Init+0x130>)
 80002f0:	f001 fbfc 	bl	8001aec <HAL_GPIO_Init>
=======
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000256:	f107 0310 	add.w	r3, r7, #16
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000264:	4b46      	ldr	r3, [pc, #280]	; (8000380 <MX_GPIO_Init+0x130>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a45      	ldr	r2, [pc, #276]	; (8000380 <MX_GPIO_Init+0x130>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b43      	ldr	r3, [pc, #268]	; (8000380 <MX_GPIO_Init+0x130>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f003 0310 	and.w	r3, r3, #16
 8000278:	60fb      	str	r3, [r7, #12]
 800027a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800027c:	4b40      	ldr	r3, [pc, #256]	; (8000380 <MX_GPIO_Init+0x130>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a3f      	ldr	r2, [pc, #252]	; (8000380 <MX_GPIO_Init+0x130>)
 8000282:	f043 0320 	orr.w	r3, r3, #32
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b3d      	ldr	r3, [pc, #244]	; (8000380 <MX_GPIO_Init+0x130>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b3a      	ldr	r3, [pc, #232]	; (8000380 <MX_GPIO_Init+0x130>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a39      	ldr	r2, [pc, #228]	; (8000380 <MX_GPIO_Init+0x130>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <MX_GPIO_Init+0x130>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	607b      	str	r3, [r7, #4]
 80002aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b34      	ldr	r3, [pc, #208]	; (8000380 <MX_GPIO_Init+0x130>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a33      	ldr	r2, [pc, #204]	; (8000380 <MX_GPIO_Init+0x130>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b31      	ldr	r3, [pc, #196]	; (8000380 <MX_GPIO_Init+0x130>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	603b      	str	r3, [r7, #0]
 80002c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Pin|O1_Pin|O2_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80002ca:	482e      	ldr	r0, [pc, #184]	; (8000384 <MX_GPIO_Init+0x134>)
 80002cc:	f001 ff59 	bl	8002182 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, O3_Pin|O4_Pin|O5_Pin|O6_Pin
 80002d0:	2200      	movs	r2, #0
 80002d2:	f240 113f 	movw	r1, #319	; 0x13f
 80002d6:	482c      	ldr	r0, [pc, #176]	; (8000388 <MX_GPIO_Init+0x138>)
 80002d8:	f001 ff53 	bl	8002182 <HAL_GPIO_WritePin>
                          |O7_Pin|O8_Pin|RS_MODE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|EN_Pin|MUXC_Pin|MUXB_Pin
 80002dc:	2200      	movs	r2, #0
 80002de:	f24f 0102 	movw	r1, #61442	; 0xf002
 80002e2:	482a      	ldr	r0, [pc, #168]	; (800038c <MX_GPIO_Init+0x13c>)
 80002e4:	f001 ff4d 	bl	8002182 <HAL_GPIO_WritePin>
                          |MUXA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Pin|O1_Pin|O2_Pin;
 80002e8:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80002ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002ee:	2301      	movs	r3, #1
 80002f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002f6:	2302      	movs	r3, #2
 80002f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	4820      	ldr	r0, [pc, #128]	; (8000384 <MX_GPIO_Init+0x134>)
 8000302:	f001 fda3 	bl	8001e4c <HAL_GPIO_Init>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = O3_Pin|O4_Pin|O5_Pin|O6_Pin
<<<<<<< HEAD
 80002f4:	233f      	movs	r3, #63	; 0x3f
 80002f6:	613b      	str	r3, [r7, #16]
                          |O7_Pin|O8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80002fc:	2302      	movs	r3, #2
 80002fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2302      	movs	r3, #2
 8000302:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000304:	f107 0310 	add.w	r3, r7, #16
 8000308:	4619      	mov	r1, r3
 800030a:	481a      	ldr	r0, [pc, #104]	; (8000374 <MX_GPIO_Init+0x134>)
 800030c:	f001 fbee 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = MUXA_Pin|MUXB_Pin|MUXC_Pin|EN_Pin
 8000310:	f649 4302 	movw	r3, #39938	; 0x9c02
 8000314:	613b      	str	r3, [r7, #16]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000316:	2301      	movs	r3, #1
 8000318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800031a:	2300      	movs	r3, #0
 800031c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031e:	2302      	movs	r3, #2
 8000320:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	4619      	mov	r1, r3
 8000328:	4813      	ldr	r0, [pc, #76]	; (8000378 <MX_GPIO_Init+0x138>)
 800032a:	f001 fbdf 	bl	8001aec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID8_Pin;
 800032e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000332:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000334:	2300      	movs	r3, #0
 8000336:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000338:	2302      	movs	r3, #2
 800033a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ID8_GPIO_Port, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	480c      	ldr	r0, [pc, #48]	; (8000374 <MX_GPIO_Init+0x134>)
 8000344:	f001 fbd2 	bl	8001aec <HAL_GPIO_Init>
=======
 8000306:	f240 133f 	movw	r3, #319	; 0x13f
 800030a:	613b      	str	r3, [r7, #16]
                          |O7_Pin|O8_Pin|RS_MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800030c:	2301      	movs	r3, #1
 800030e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000310:	2300      	movs	r3, #0
 8000312:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000314:	2302      	movs	r3, #2
 8000316:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000318:	f107 0310 	add.w	r3, r7, #16
 800031c:	4619      	mov	r1, r3
 800031e:	481a      	ldr	r0, [pc, #104]	; (8000388 <MX_GPIO_Init+0x138>)
 8000320:	f001 fd94 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUZZER_Pin|EN_Pin|MUXC_Pin|MUXB_Pin
 8000324:	f24f 0302 	movw	r3, #61442	; 0xf002
 8000328:	613b      	str	r3, [r7, #16]
                          |MUXA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800032a:	2301      	movs	r3, #1
 800032c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032e:	2300      	movs	r3, #0
 8000330:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000332:	2302      	movs	r3, #2
 8000334:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000336:	f107 0310 	add.w	r3, r7, #16
 800033a:	4619      	mov	r1, r3
 800033c:	4813      	ldr	r0, [pc, #76]	; (800038c <MX_GPIO_Init+0x13c>)
 800033e:	f001 fd85 	bl	8001e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ID8_Pin;
 8000342:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000348:	2300      	movs	r3, #0
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800034c:	2302      	movs	r3, #2
 800034e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ID8_GPIO_Port, &GPIO_InitStruct);
 8000350:	f107 0310 	add.w	r3, r7, #16
 8000354:	4619      	mov	r1, r3
 8000356:	480c      	ldr	r0, [pc, #48]	; (8000388 <MX_GPIO_Init+0x138>)
 8000358:	f001 fd78 	bl	8001e4c <HAL_GPIO_Init>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ID7_Pin|ID6_Pin|ID5_Pin|ID4_Pin
<<<<<<< HEAD
 8000348:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 800034c:	613b      	str	r3, [r7, #16]
                          |ID3_Pin|ID2_Pin|ID1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000352:	2302      	movs	r3, #2
 8000354:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000356:	f107 0310 	add.w	r3, r7, #16
 800035a:	4619      	mov	r1, r3
 800035c:	4806      	ldr	r0, [pc, #24]	; (8000378 <MX_GPIO_Init+0x138>)
 800035e:	f001 fbc5 	bl	8001aec <HAL_GPIO_Init>

}
 8000362:	bf00      	nop
 8000364:	3720      	adds	r7, #32
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	40021000 	.word	0x40021000
 8000370:	40011000 	.word	0x40011000
 8000374:	40010800 	.word	0x40010800
 8000378:	40010c00 	.word	0x40010c00

0800037c <main>:
=======
 800035c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000360:	613b      	str	r3, [r7, #16]
                          |ID3_Pin|ID2_Pin|ID1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000366:	2302      	movs	r3, #2
 8000368:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800036a:	f107 0310 	add.w	r3, r7, #16
 800036e:	4619      	mov	r1, r3
 8000370:	4806      	ldr	r0, [pc, #24]	; (800038c <MX_GPIO_Init+0x13c>)
 8000372:	f001 fd6b 	bl	8001e4c <HAL_GPIO_Init>

}
 8000376:	bf00      	nop
 8000378:	3720      	adds	r7, #32
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40021000 	.word	0x40021000
 8000384:	40011000 	.word	0x40011000
 8000388:	40010800 	.word	0x40010800
 800038c:	40010c00 	.word	0x40010c00

08000390 <MUX_SelectChannel>:
void MUX_SelectChannel(int );
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MUX_SelectChannel(canal){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]

	switch (canal){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b07      	cmp	r3, #7
 800039c:	f200 80ac 	bhi.w	80004f8 <MUX_SelectChannel+0x168>
 80003a0:	a201      	add	r2, pc, #4	; (adr r2, 80003a8 <MUX_SelectChannel+0x18>)
 80003a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a6:	bf00      	nop
 80003a8:	080003c9 	.word	0x080003c9
 80003ac:	080003ef 	.word	0x080003ef
 80003b0:	08000415 	.word	0x08000415
 80003b4:	0800043b 	.word	0x0800043b
 80003b8:	08000461 	.word	0x08000461
 80003bc:	08000487 	.word	0x08000487
 80003c0:	080004ad 	.word	0x080004ad
 80003c4:	080004d3 	.word	0x080004d3
	case 0:
		        HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003ce:	484c      	ldr	r0, [pc, #304]	; (8000500 <MUX_SelectChannel+0x170>)
 80003d0:	f001 fed7 	bl	8002182 <HAL_GPIO_WritePin>
			 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80003da:	4849      	ldr	r0, [pc, #292]	; (8000500 <MUX_SelectChannel+0x170>)
 80003dc:	f001 fed1 	bl	8002182 <HAL_GPIO_WritePin>
			 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_RESET);//CH0
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003e6:	4846      	ldr	r0, [pc, #280]	; (8000500 <MUX_SelectChannel+0x170>)
 80003e8:	f001 fecb 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 80003ec:	e084      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 1:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_SET);
 80003ee:	2201      	movs	r2, #1
 80003f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003f4:	4842      	ldr	r0, [pc, #264]	; (8000500 <MUX_SelectChannel+0x170>)
 80003f6:	f001 fec4 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_RESET);
 80003fa:	2200      	movs	r2, #0
 80003fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000400:	483f      	ldr	r0, [pc, #252]	; (8000500 <MUX_SelectChannel+0x170>)
 8000402:	f001 febe 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_RESET);//CH1
 8000406:	2200      	movs	r2, #0
 8000408:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040c:	483c      	ldr	r0, [pc, #240]	; (8000500 <MUX_SelectChannel+0x170>)
 800040e:	f001 feb8 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 8000412:	e071      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 2:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800041a:	4839      	ldr	r0, [pc, #228]	; (8000500 <MUX_SelectChannel+0x170>)
 800041c:	f001 feb1 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_SET);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000426:	4836      	ldr	r0, [pc, #216]	; (8000500 <MUX_SelectChannel+0x170>)
 8000428:	f001 feab 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_RESET);//CH2
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000432:	4833      	ldr	r0, [pc, #204]	; (8000500 <MUX_SelectChannel+0x170>)
 8000434:	f001 fea5 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 8000438:	e05e      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 3:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_SET);
 800043a:	2201      	movs	r2, #1
 800043c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000440:	482f      	ldr	r0, [pc, #188]	; (8000500 <MUX_SelectChannel+0x170>)
 8000442:	f001 fe9e 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_SET);
 8000446:	2201      	movs	r2, #1
 8000448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044c:	482c      	ldr	r0, [pc, #176]	; (8000500 <MUX_SelectChannel+0x170>)
 800044e:	f001 fe98 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_RESET);//CH3
 8000452:	2200      	movs	r2, #0
 8000454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000458:	4829      	ldr	r0, [pc, #164]	; (8000500 <MUX_SelectChannel+0x170>)
 800045a:	f001 fe92 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 800045e:	e04b      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 4:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000466:	4826      	ldr	r0, [pc, #152]	; (8000500 <MUX_SelectChannel+0x170>)
 8000468:	f001 fe8b 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000472:	4823      	ldr	r0, [pc, #140]	; (8000500 <MUX_SelectChannel+0x170>)
 8000474:	f001 fe85 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_SET);//CH4
 8000478:	2201      	movs	r2, #1
 800047a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800047e:	4820      	ldr	r0, [pc, #128]	; (8000500 <MUX_SelectChannel+0x170>)
 8000480:	f001 fe7f 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 8000484:	e038      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 5:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_SET);
 8000486:	2201      	movs	r2, #1
 8000488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800048c:	481c      	ldr	r0, [pc, #112]	; (8000500 <MUX_SelectChannel+0x170>)
 800048e:	f001 fe78 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000498:	4819      	ldr	r0, [pc, #100]	; (8000500 <MUX_SelectChannel+0x170>)
 800049a:	f001 fe72 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_SET);//CH5
 800049e:	2201      	movs	r2, #1
 80004a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004a4:	4816      	ldr	r0, [pc, #88]	; (8000500 <MUX_SelectChannel+0x170>)
 80004a6:	f001 fe6c 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 80004aa:	e025      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 6:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004b2:	4813      	ldr	r0, [pc, #76]	; (8000500 <MUX_SelectChannel+0x170>)
 80004b4:	f001 fe65 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_SET);
 80004b8:	2201      	movs	r2, #1
 80004ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004be:	4810      	ldr	r0, [pc, #64]	; (8000500 <MUX_SelectChannel+0x170>)
 80004c0:	f001 fe5f 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_SET);//CH6
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ca:	480d      	ldr	r0, [pc, #52]	; (8000500 <MUX_SelectChannel+0x170>)
 80004cc:	f001 fe59 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 80004d0:	e012      	b.n	80004f8 <MUX_SelectChannel+0x168>
	case 7:
		 HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <MUX_SelectChannel+0x170>)
 80004da:	f001 fe52 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <MUX_SelectChannel+0x170>)
 80004e6:	f001 fe4c 	bl	8002182 <HAL_GPIO_WritePin>
					 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_SET);//CH7
 80004ea:	2201      	movs	r2, #1
 80004ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f0:	4803      	ldr	r0, [pc, #12]	; (8000500 <MUX_SelectChannel+0x170>)
 80004f2:	f001 fe46 	bl	8002182 <HAL_GPIO_WritePin>
				 break;
 80004f6:	bf00      	nop

	}
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40010c00 	.word	0x40010c00

08000504 <main>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 800037c:	b580      	push	{r7, lr}
 800037e:	b082      	sub	sp, #8
 8000380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


			//Contador para ir seleccionando diferentes lecturas del adc y modificar el mux
	int readyToSend=0;
 8000382:	2300      	movs	r3, #0
 8000384:	607b      	str	r3, [r7, #4]

	txBufferStruct.header = 0x1c;			//Cabecera para que QT dicierna que datos son correctos
 8000386:	4b43      	ldr	r3, [pc, #268]	; (8000494 <main+0x118>)
 8000388:	221c      	movs	r2, #28
 800038a:	701a      	strb	r2, [r3, #0]
	txBufferStruct.digitalInputs = 0x00;	//valor de i inicio para prueba
 800038c:	4b41      	ldr	r3, [pc, #260]	; (8000494 <main+0x118>)
 800038e:	2200      	movs	r2, #0
 8000390:	749a      	strb	r2, [r3, #18]
=======
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	txBufferStruct.header = 0x1c;			//Cabecera para que QT dicierna que datos son correctos
 8000508:	4b19      	ldr	r3, [pc, #100]	; (8000570 <main+0x6c>)
 800050a:	221c      	movs	r2, #28
 800050c:	701a      	strb	r2, [r3, #0]
	txBufferStruct.digitalInputs = 0x00;	//valor de i inicio para prueba
 800050e:	4b18      	ldr	r3, [pc, #96]	; (8000570 <main+0x6c>)
 8000510:	2200      	movs	r2, #0
 8000512:	749a      	strb	r2, [r3, #18]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000392:	f000 fd0d 	bl	8000db0 <HAL_Init>
=======
 8000514:	f000 fd46 	bl	8000fa4 <HAL_Init>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000396:	f000 f88b 	bl	80004b0 <SystemClock_Config>
=======
 8000518:	f000 f836 	bl	8000588 <SystemClock_Config>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 800039a:	f7ff ff51 	bl	8000240 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800039e:	f000 fc63 	bl	8000c68 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80003a2:	f000 fb85 	bl	8000ab0 <MX_TIM4_Init>
  MX_TIM3_Init();
 80003a6:	f000 fb01 	bl	80009ac <MX_TIM3_Init>
  MX_ADC1_Init();
 80003aa:	f7ff fecf 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80003ae:	2100      	movs	r1, #0
 80003b0:	4839      	ldr	r0, [pc, #228]	; (8000498 <main+0x11c>)
 80003b2:	f002 fbdd 	bl	8002b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80003b6:	2104      	movs	r1, #4
 80003b8:	4837      	ldr	r0, [pc, #220]	; (8000498 <main+0x11c>)
 80003ba:	f002 fbd9 	bl	8002b70 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 80003be:	2108      	movs	r1, #8
 80003c0:	4835      	ldr	r0, [pc, #212]	; (8000498 <main+0x11c>)
 80003c2:	f002 fbd5 	bl	8002b70 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 80003c6:	4835      	ldr	r0, [pc, #212]	; (800049c <main+0x120>)
 80003c8:	f002 fb28 	bl	8002a1c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80003cc:	4832      	ldr	r0, [pc, #200]	; (8000498 <main+0x11c>)
 80003ce:	f002 fb25 	bl	8002a1c <HAL_TIM_Base_Start_IT>
=======
 800051c:	f7ff fe98 	bl	8000250 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000520:	f000 fc9c 	bl	8000e5c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000524:	f000 fba4 	bl	8000c70 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000528:	f000 fad4 	bl	8000ad4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800052c:	f000 fb1e 	bl	8000b6c <MX_TIM3_Init>
  MX_ADC1_Init();
 8000530:	f7ff fe0c 	bl	800014c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	480f      	ldr	r0, [pc, #60]	; (8000574 <main+0x70>)
 8000538:	f002 fcca 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800053c:	2104      	movs	r1, #4
 800053e:	480d      	ldr	r0, [pc, #52]	; (8000574 <main+0x70>)
 8000540:	f002 fcc6 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000544:	2108      	movs	r1, #8
 8000546:	480b      	ldr	r0, [pc, #44]	; (8000574 <main+0x70>)
 8000548:	f002 fcc2 	bl	8002ed0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <main+0x74>)
 800054e:	f002 fc15 	bl	8002d7c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <main+0x70>)
 8000554:	f002 fc12 	bl	8002d7c <HAL_TIM_Base_Start_IT>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
<<<<<<< HEAD

  	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxUnion,sizeof(rxUnion));	//para recepcion de la blue pil. Esta en proceso.
 80003d2:	2204      	movs	r2, #4
 80003d4:	4932      	ldr	r1, [pc, #200]	; (80004a0 <main+0x124>)
 80003d6:	4833      	ldr	r0, [pc, #204]	; (80004a4 <main+0x128>)
 80003d8:	f003 fb09 	bl	80039ee <HAL_UART_Receive_IT>

 // 	 int countingDown;

  	 while (1)
  	  {
  		entradadigital();
 80003dc:	f000 f960 	bl	80006a0 <entradadigital>
		if(countingDown)
			adcRead--;
		else
			adcRead++;
*/
		switch (adcInputCounter)
 80003e0:	4b31      	ldr	r3, [pc, #196]	; (80004a8 <main+0x12c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3b01      	subs	r3, #1
 80003e6:	2b07      	cmp	r3, #7
 80003e8:	d83c      	bhi.n	8000464 <main+0xe8>
 80003ea:	a201      	add	r2, pc, #4	; (adr r2, 80003f0 <main+0x74>)
 80003ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f0:	08000411 	.word	0x08000411
 80003f4:	0800041b 	.word	0x0800041b
 80003f8:	08000425 	.word	0x08000425
 80003fc:	0800042f 	.word	0x0800042f
 8000400:	08000439 	.word	0x08000439
 8000404:	08000443 	.word	0x08000443
 8000408:	0800044d 	.word	0x0800044d
 800040c:	08000457 	.word	0x08000457
		{
			case 1: txBufferStruct.analogInput1 = adcRead; break;
 8000410:	4b26      	ldr	r3, [pc, #152]	; (80004ac <main+0x130>)
 8000412:	881a      	ldrh	r2, [r3, #0]
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <main+0x118>)
 8000416:	805a      	strh	r2, [r3, #2]
 8000418:	e024      	b.n	8000464 <main+0xe8>
			case 2: txBufferStruct.analogInput2 = adcRead; break;
 800041a:	4b24      	ldr	r3, [pc, #144]	; (80004ac <main+0x130>)
 800041c:	881a      	ldrh	r2, [r3, #0]
 800041e:	4b1d      	ldr	r3, [pc, #116]	; (8000494 <main+0x118>)
 8000420:	809a      	strh	r2, [r3, #4]
 8000422:	e01f      	b.n	8000464 <main+0xe8>
			case 3: txBufferStruct.analogInput3 = adcRead; break;
 8000424:	4b21      	ldr	r3, [pc, #132]	; (80004ac <main+0x130>)
 8000426:	881a      	ldrh	r2, [r3, #0]
 8000428:	4b1a      	ldr	r3, [pc, #104]	; (8000494 <main+0x118>)
 800042a:	80da      	strh	r2, [r3, #6]
 800042c:	e01a      	b.n	8000464 <main+0xe8>
			case 4: txBufferStruct.analogInput4 = adcRead; break;
 800042e:	4b1f      	ldr	r3, [pc, #124]	; (80004ac <main+0x130>)
 8000430:	881a      	ldrh	r2, [r3, #0]
 8000432:	4b18      	ldr	r3, [pc, #96]	; (8000494 <main+0x118>)
 8000434:	811a      	strh	r2, [r3, #8]
 8000436:	e015      	b.n	8000464 <main+0xe8>
			case 5: txBufferStruct.analogInput5 = adcRead; break;
 8000438:	4b1c      	ldr	r3, [pc, #112]	; (80004ac <main+0x130>)
 800043a:	881a      	ldrh	r2, [r3, #0]
 800043c:	4b15      	ldr	r3, [pc, #84]	; (8000494 <main+0x118>)
 800043e:	815a      	strh	r2, [r3, #10]
 8000440:	e010      	b.n	8000464 <main+0xe8>
			case 6: txBufferStruct.analogInput6 = adcRead; break;
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <main+0x130>)
 8000444:	881a      	ldrh	r2, [r3, #0]
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <main+0x118>)
 8000448:	819a      	strh	r2, [r3, #12]
 800044a:	e00b      	b.n	8000464 <main+0xe8>
			case 7: txBufferStruct.analogInput7 = adcRead; break;
 800044c:	4b17      	ldr	r3, [pc, #92]	; (80004ac <main+0x130>)
 800044e:	881a      	ldrh	r2, [r3, #0]
 8000450:	4b10      	ldr	r3, [pc, #64]	; (8000494 <main+0x118>)
 8000452:	81da      	strh	r2, [r3, #14]
 8000454:	e006      	b.n	8000464 <main+0xe8>
			case 8:
			{

				txBufferStruct.analogInput8 = adcRead;
 8000456:	4b15      	ldr	r3, [pc, #84]	; (80004ac <main+0x130>)
 8000458:	881a      	ldrh	r2, [r3, #0]
 800045a:	4b0e      	ldr	r3, [pc, #56]	; (8000494 <main+0x118>)
 800045c:	821a      	strh	r2, [r3, #16]

				readyToSend=1;
 800045e:	2301      	movs	r3, #1
 8000460:	607b      	str	r3, [r7, #4]
				break;
 8000462:	bf00      	nop
			}
		}
		adcInputCounter++;
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <main+0x12c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	3301      	adds	r3, #1
 800046a:	4a0f      	ldr	r2, [pc, #60]	; (80004a8 <main+0x12c>)
 800046c:	6013      	str	r3, [r2, #0]

		if(readyToSend)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d0b3      	beq.n	80003dc <main+0x60>
		{
			adcInputCounter=0;
 8000474:	4b0c      	ldr	r3, [pc, #48]	; (80004a8 <main+0x12c>)
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
			readyToSend=0;
 800047a:	2300      	movs	r3, #0
 800047c:	607b      	str	r3, [r7, #4]

			HAL_UART_Transmit(&huart1, (uint8_t*)&txBufferStruct, sizeof(txBufferStruct), TIME_OUT);
 800047e:	2364      	movs	r3, #100	; 0x64
 8000480:	2214      	movs	r2, #20
 8000482:	4904      	ldr	r1, [pc, #16]	; (8000494 <main+0x118>)
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <main+0x128>)
 8000486:	f003 fa2f 	bl	80038e8 <HAL_UART_Transmit>
			HAL_Delay(50);
 800048a:	2032      	movs	r0, #50	; 0x32
 800048c:	f000 fcf2 	bl	8000e74 <HAL_Delay>
  		entradadigital();
 8000490:	e7a4      	b.n	80003dc <main+0x60>
 8000492:	bf00      	nop
 8000494:	20000068 	.word	0x20000068
 8000498:	20000080 	.word	0x20000080
 800049c:	200000c8 	.word	0x200000c8
 80004a0:	2000007c 	.word	0x2000007c
 80004a4:	20000110 	.word	0x20000110
 80004a8:	20000000 	.word	0x20000000
 80004ac:	20000064 	.word	0x20000064

080004b0 <SystemClock_Config>:
=======
  	HAL_GPIO_WritePin(GPIOA, RS_MODE_Pin, GPIO_PIN_RESET);				//Para utilizar modulo rs485 en rx
 8000558:	2200      	movs	r2, #0
 800055a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <main+0x78>)
 8000560:	f001 fe0f 	bl	8002182 <HAL_GPIO_WritePin>
  	HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxUnion,sizeof(rxUnion));	//para recepcion de la blue pil. Esta en proceso.
 8000564:	2204      	movs	r2, #4
 8000566:	4906      	ldr	r1, [pc, #24]	; (8000580 <main+0x7c>)
 8000568:	4806      	ldr	r0, [pc, #24]	; (8000584 <main+0x80>)
 800056a:	f003 fbf0 	bl	8003d4e <HAL_UART_Receive_IT>

  	 int countingDown;

  	 while (1)
 800056e:	e7fe      	b.n	800056e <main+0x6a>
 8000570:	20000064 	.word	0x20000064
 8000574:	200000c4 	.word	0x200000c4
 8000578:	2000010c 	.word	0x2000010c
 800057c:	40010800 	.word	0x40010800
 8000580:	20000078 	.word	0x20000078
 8000584:	20000154 	.word	0x20000154

08000588 <SystemClock_Config>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b094      	sub	sp, #80	; 0x50
 80004b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ba:	2228      	movs	r2, #40	; 0x28
 80004bc:	2100      	movs	r1, #0
 80004be:	4618      	mov	r0, r3
 80004c0:	f004 f85e 	bl	8004580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c4:	f107 0314 	add.w	r3, r7, #20
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
 80004d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
=======
 8000588:	b580      	push	{r7, lr}
 800058a:	b094      	sub	sp, #80	; 0x50
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000592:	2228      	movs	r2, #40	; 0x28
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f004 f9a2 	bl	80048e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 80004e0:	2301      	movs	r3, #1
 80004e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004ea:	2300      	movs	r3, #0
 80004ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004ee:	2301      	movs	r3, #1
 80004f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f2:	2302      	movs	r3, #2
 80004f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000500:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000506:	4618      	mov	r0, r3
 8000508:	f001 fcbc 	bl	8001e84 <HAL_RCC_OscConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000512:	f000 f9c7 	bl	80008a4 <Error_Handler>
=======
 80005b8:	2301      	movs	r3, #1
 80005ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	2301      	movs	r3, #1
 80005c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ca:	2302      	movs	r3, #2
 80005cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005d4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fe00 	bl	80021e4 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005ea:	f000 f9db 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 8000516:	230f      	movs	r3, #15
 8000518:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051a:	2302      	movs	r3, #2
 800051c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000526:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800052c:	f107 0314 	add.w	r3, r7, #20
 8000530:	2102      	movs	r1, #2
 8000532:	4618      	mov	r0, r3
 8000534:	f001 ff28 	bl	8002388 <HAL_RCC_ClockConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800053e:	f000 f9b1 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000542:	2302      	movs	r3, #2
 8000544:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800054a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800054c:	1d3b      	adds	r3, r7, #4
 800054e:	4618      	mov	r0, r3
 8000550:	f002 f8a8 	bl	80026a4 <HAL_RCCEx_PeriphCLKConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800055a:	f000 f9a3 	bl	80008a4 <Error_Handler>
  }
}
 800055e:	bf00      	nop
 8000560:	3750      	adds	r7, #80	; 0x50
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
	...

08000568 <PWMCONTROL1>:
/* USER CODE BEGIN 4 */
=======
 80005ee:	230f      	movs	r3, #15
 80005f0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000600:	2300      	movs	r3, #0
 8000602:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 0314 	add.w	r3, r7, #20
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f86c 	bl	80026e8 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000616:	f000 f9c5 	bl	80009a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800061a:	2302      	movs	r3, #2
 800061c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800061e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000622:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f002 f9ec 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000632:	f000 f9b7 	bl	80009a4 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
	...

08000640 <PWMCONTROL1>:
int c1=0;
int c2=0;
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
int counter=0;
uint8_t digitalOutput;


void PWMCONTROL1(){
<<<<<<< HEAD
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
  aux1=rxUnion.rxUnionBuffer.analogOutput1*10;
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <PWMCONTROL1+0x30>)
 800056e:	785b      	ldrb	r3, [r3, #1]
 8000570:	461a      	mov	r2, r3
 8000572:	4613      	mov	r3, r2
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	4413      	add	r3, r2
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	461a      	mov	r2, r3
 800057c:	4b07      	ldr	r3, [pc, #28]	; (800059c <PWMCONTROL1+0x34>)
 800057e:	601a      	str	r2, [r3, #0]
  htim3.Instance->CCR2=aux1;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <PWMCONTROL1+0x34>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <PWMCONTROL1+0x38>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_GPIO_WritePin(OPWM1_GPIO_Port, OPWM1_Pin, 1);
 800058a:	2201      	movs	r2, #1
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <PWMCONTROL1+0x3c>)
 8000590:	f001 fc47 	bl	8001e22 <HAL_GPIO_WritePin>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	2000007c 	.word	0x2000007c
 800059c:	2000005c 	.word	0x2000005c
 80005a0:	20000080 	.word	0x20000080
 80005a4:	40010800 	.word	0x40010800

080005a8 <PWMCONTROL2>:
void PWMCONTROL2(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  //HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
  aux2=rxUnion.rxUnionBuffer.analogOutput2*10;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <PWMCONTROL2+0x30>)
 80005ae:	789b      	ldrb	r3, [r3, #2]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4613      	mov	r3, r2
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	4413      	add	r3, r2
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	461a      	mov	r2, r3
 80005bc:	4b07      	ldr	r3, [pc, #28]	; (80005dc <PWMCONTROL2+0x34>)
 80005be:	601a      	str	r2, [r3, #0]
  htim3.Instance->CCR3=aux2;
 80005c0:	4b06      	ldr	r3, [pc, #24]	; (80005dc <PWMCONTROL2+0x34>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <PWMCONTROL2+0x38>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_GPIO_WritePin(OPWM1_GPIO_Port, OPWM1_Pin, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <PWMCONTROL2+0x3c>)
 80005d0:	f001 fc27 	bl	8001e22 <HAL_GPIO_WritePin>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2000007c 	.word	0x2000007c
 80005dc:	20000060 	.word	0x20000060
 80005e0:	20000080 	.word	0x20000080
 80005e4:	40010800 	.word	0x40010800

080005e8 <salidadigital>:

void salidadigital(){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b10000000)>>7 ==1){
 80005ec:	4b29      	ldr	r3, [pc, #164]	; (8000694 <salidadigital+0xac>)
 80005ee:	78db      	ldrb	r3, [r3, #3]
 80005f0:	09db      	lsrs	r3, r3, #7
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d104      	bne.n	8000602 <salidadigital+0x1a>
        HAL_GPIO_TogglePin(O1_GPIO_Port,O1_Pin);}
 80005f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005fc:	4826      	ldr	r0, [pc, #152]	; (8000698 <salidadigital+0xb0>)
 80005fe:	f001 fc28 	bl	8001e52 <HAL_GPIO_TogglePin>


  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b01000000)>>6 ==1){
 8000602:	4b24      	ldr	r3, [pc, #144]	; (8000694 <salidadigital+0xac>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d004      	beq.n	8000618 <salidadigital+0x30>
        HAL_GPIO_TogglePin(O2_GPIO_Port,O2_Pin);}
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	4821      	ldr	r0, [pc, #132]	; (8000698 <salidadigital+0xb0>)
 8000614:	f001 fc1d 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00100000)>>5 ==1){
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <salidadigital+0xac>)
 800061a:	78db      	ldrb	r3, [r3, #3]
 800061c:	f003 0320 	and.w	r3, r3, #32
 8000620:	2b00      	cmp	r3, #0
 8000622:	d003      	beq.n	800062c <salidadigital+0x44>
        HAL_GPIO_TogglePin(O3_GPIO_Port,O3_Pin);}
 8000624:	2101      	movs	r1, #1
 8000626:	481d      	ldr	r0, [pc, #116]	; (800069c <salidadigital+0xb4>)
 8000628:	f001 fc13 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00010000)>>4 ==1){
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <salidadigital+0xac>)
 800062e:	78db      	ldrb	r3, [r3, #3]
 8000630:	f003 0310 	and.w	r3, r3, #16
 8000634:	2b00      	cmp	r3, #0
 8000636:	d003      	beq.n	8000640 <salidadigital+0x58>
        HAL_GPIO_TogglePin(O4_GPIO_Port,O4_Pin);}
 8000638:	2102      	movs	r1, #2
 800063a:	4818      	ldr	r0, [pc, #96]	; (800069c <salidadigital+0xb4>)
 800063c:	f001 fc09 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00001000)>>3 ==1){
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <salidadigital+0xac>)
 8000642:	78db      	ldrb	r3, [r3, #3]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	2b00      	cmp	r3, #0
 800064a:	d003      	beq.n	8000654 <salidadigital+0x6c>
        HAL_GPIO_TogglePin(O5_GPIO_Port,O5_Pin);}
 800064c:	2104      	movs	r1, #4
 800064e:	4813      	ldr	r0, [pc, #76]	; (800069c <salidadigital+0xb4>)
 8000650:	f001 fbff 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000100)>>2 ==1){
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <salidadigital+0xac>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	2b00      	cmp	r3, #0
 800065e:	d003      	beq.n	8000668 <salidadigital+0x80>
        HAL_GPIO_TogglePin(O6_GPIO_Port,O6_Pin);}
 8000660:	2108      	movs	r1, #8
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <salidadigital+0xb4>)
 8000664:	f001 fbf5 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000010)>>1 ==1){
 8000668:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <salidadigital+0xac>)
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b00      	cmp	r3, #0
 8000672:	d003      	beq.n	800067c <salidadigital+0x94>
        HAL_GPIO_TogglePin(O7_GPIO_Port,O7_Pin);}
 8000674:	2110      	movs	r1, #16
 8000676:	4809      	ldr	r0, [pc, #36]	; (800069c <salidadigital+0xb4>)
 8000678:	f001 fbeb 	bl	8001e52 <HAL_GPIO_TogglePin>

  if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000001)>>0 ==1){
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <salidadigital+0xac>)
 800067e:	78db      	ldrb	r3, [r3, #3]
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	2b00      	cmp	r3, #0
 8000686:	d003      	beq.n	8000690 <salidadigital+0xa8>
        HAL_GPIO_TogglePin(O8_GPIO_Port,O8_Pin);}
 8000688:	2120      	movs	r1, #32
 800068a:	4804      	ldr	r0, [pc, #16]	; (800069c <salidadigital+0xb4>)
 800068c:	f001 fbe1 	bl	8001e52 <HAL_GPIO_TogglePin>

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000007c 	.word	0x2000007c
 8000698:	40011000 	.word	0x40011000
 800069c:	40010800 	.word	0x40010800

080006a0 <entradadigital>:
void entradadigital(){
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0

  if (HAL_GPIO_ReadPin(GPIOB, ID1_Pin ))
 80006a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006a8:	4859      	ldr	r0, [pc, #356]	; (8000810 <entradadigital+0x170>)
 80006aa:	f001 fba3 	bl	8001df4 <HAL_GPIO_ReadPin>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d007      	beq.n	80006c4 <entradadigital+0x24>
  {
        txBufferStruct.digitalInputs |= 0b00000001;
 80006b4:	4b57      	ldr	r3, [pc, #348]	; (8000814 <entradadigital+0x174>)
 80006b6:	7c9b      	ldrb	r3, [r3, #18]
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b55      	ldr	r3, [pc, #340]	; (8000814 <entradadigital+0x174>)
 80006c0:	749a      	strb	r2, [r3, #18]
 80006c2:	e006      	b.n	80006d2 <entradadigital+0x32>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11111110;
 80006c4:	4b53      	ldr	r3, [pc, #332]	; (8000814 <entradadigital+0x174>)
 80006c6:	7c9b      	ldrb	r3, [r3, #18]
 80006c8:	f023 0301 	bic.w	r3, r3, #1
 80006cc:	b2da      	uxtb	r2, r3
 80006ce:	4b51      	ldr	r3, [pc, #324]	; (8000814 <entradadigital+0x174>)
 80006d0:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID2_Pin ))
 80006d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d6:	484e      	ldr	r0, [pc, #312]	; (8000810 <entradadigital+0x170>)
 80006d8:	f001 fb8c 	bl	8001df4 <HAL_GPIO_ReadPin>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d007      	beq.n	80006f2 <entradadigital+0x52>
  {
        txBufferStruct.digitalInputs|= 0b00000010;
 80006e2:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <entradadigital+0x174>)
 80006e4:	7c9b      	ldrb	r3, [r3, #18]
 80006e6:	f043 0302 	orr.w	r3, r3, #2
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	4b49      	ldr	r3, [pc, #292]	; (8000814 <entradadigital+0x174>)
 80006ee:	749a      	strb	r2, [r3, #18]
 80006f0:	e006      	b.n	8000700 <entradadigital+0x60>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11111101;
 80006f2:	4b48      	ldr	r3, [pc, #288]	; (8000814 <entradadigital+0x174>)
 80006f4:	7c9b      	ldrb	r3, [r3, #18]
 80006f6:	f023 0302 	bic.w	r3, r3, #2
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b45      	ldr	r3, [pc, #276]	; (8000814 <entradadigital+0x174>)
 80006fe:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID3_Pin ))
 8000700:	2180      	movs	r1, #128	; 0x80
 8000702:	4843      	ldr	r0, [pc, #268]	; (8000810 <entradadigital+0x170>)
 8000704:	f001 fb76 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d007      	beq.n	800071e <entradadigital+0x7e>
  {
        txBufferStruct.digitalInputs|= 0b00000100;
 800070e:	4b41      	ldr	r3, [pc, #260]	; (8000814 <entradadigital+0x174>)
 8000710:	7c9b      	ldrb	r3, [r3, #18]
 8000712:	f043 0304 	orr.w	r3, r3, #4
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <entradadigital+0x174>)
 800071a:	749a      	strb	r2, [r3, #18]
 800071c:	e006      	b.n	800072c <entradadigital+0x8c>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11111011;
 800071e:	4b3d      	ldr	r3, [pc, #244]	; (8000814 <entradadigital+0x174>)
 8000720:	7c9b      	ldrb	r3, [r3, #18]
 8000722:	f023 0304 	bic.w	r3, r3, #4
 8000726:	b2da      	uxtb	r2, r3
 8000728:	4b3a      	ldr	r3, [pc, #232]	; (8000814 <entradadigital+0x174>)
 800072a:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID4_Pin ))
 800072c:	2140      	movs	r1, #64	; 0x40
 800072e:	4838      	ldr	r0, [pc, #224]	; (8000810 <entradadigital+0x170>)
 8000730:	f001 fb60 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d007      	beq.n	800074a <entradadigital+0xaa>
  {
        txBufferStruct.digitalInputs|= 0b00001000;
 800073a:	4b36      	ldr	r3, [pc, #216]	; (8000814 <entradadigital+0x174>)
 800073c:	7c9b      	ldrb	r3, [r3, #18]
 800073e:	f043 0308 	orr.w	r3, r3, #8
 8000742:	b2da      	uxtb	r2, r3
 8000744:	4b33      	ldr	r3, [pc, #204]	; (8000814 <entradadigital+0x174>)
 8000746:	749a      	strb	r2, [r3, #18]
 8000748:	e006      	b.n	8000758 <entradadigital+0xb8>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11110111;
 800074a:	4b32      	ldr	r3, [pc, #200]	; (8000814 <entradadigital+0x174>)
 800074c:	7c9b      	ldrb	r3, [r3, #18]
 800074e:	f023 0308 	bic.w	r3, r3, #8
 8000752:	b2da      	uxtb	r2, r3
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <entradadigital+0x174>)
 8000756:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID5_Pin ))
 8000758:	2120      	movs	r1, #32
 800075a:	482d      	ldr	r0, [pc, #180]	; (8000810 <entradadigital+0x170>)
 800075c:	f001 fb4a 	bl	8001df4 <HAL_GPIO_ReadPin>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d007      	beq.n	8000776 <entradadigital+0xd6>
  {
        txBufferStruct.digitalInputs|= 0b00010000;
 8000766:	4b2b      	ldr	r3, [pc, #172]	; (8000814 <entradadigital+0x174>)
 8000768:	7c9b      	ldrb	r3, [r3, #18]
 800076a:	f043 0310 	orr.w	r3, r3, #16
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b28      	ldr	r3, [pc, #160]	; (8000814 <entradadigital+0x174>)
 8000772:	749a      	strb	r2, [r3, #18]
 8000774:	e006      	b.n	8000784 <entradadigital+0xe4>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11101111;
 8000776:	4b27      	ldr	r3, [pc, #156]	; (8000814 <entradadigital+0x174>)
 8000778:	7c9b      	ldrb	r3, [r3, #18]
 800077a:	f023 0310 	bic.w	r3, r3, #16
 800077e:	b2da      	uxtb	r2, r3
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <entradadigital+0x174>)
 8000782:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID6_Pin ))
 8000784:	2110      	movs	r1, #16
 8000786:	4822      	ldr	r0, [pc, #136]	; (8000810 <entradadigital+0x170>)
 8000788:	f001 fb34 	bl	8001df4 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d007      	beq.n	80007a2 <entradadigital+0x102>
  {
        txBufferStruct.digitalInputs|= 0b00100000;
 8000792:	4b20      	ldr	r3, [pc, #128]	; (8000814 <entradadigital+0x174>)
 8000794:	7c9b      	ldrb	r3, [r3, #18]
 8000796:	f043 0320 	orr.w	r3, r3, #32
 800079a:	b2da      	uxtb	r2, r3
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <entradadigital+0x174>)
 800079e:	749a      	strb	r2, [r3, #18]
 80007a0:	e006      	b.n	80007b0 <entradadigital+0x110>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b11011111;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <entradadigital+0x174>)
 80007a4:	7c9b      	ldrb	r3, [r3, #18]
 80007a6:	f023 0320 	bic.w	r3, r3, #32
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b19      	ldr	r3, [pc, #100]	; (8000814 <entradadigital+0x174>)
 80007ae:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOB, ID7_Pin ))
 80007b0:	2108      	movs	r1, #8
 80007b2:	4817      	ldr	r0, [pc, #92]	; (8000810 <entradadigital+0x170>)
 80007b4:	f001 fb1e 	bl	8001df4 <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d007      	beq.n	80007ce <entradadigital+0x12e>
  {
        txBufferStruct.digitalInputs|= 0b10000000;
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <entradadigital+0x174>)
 80007c0:	7c9b      	ldrb	r3, [r3, #18]
 80007c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <entradadigital+0x174>)
 80007ca:	749a      	strb	r2, [r3, #18]
 80007cc:	e006      	b.n	80007dc <entradadigital+0x13c>
  }
  else
  {
        txBufferStruct.digitalInputs &= 0b01111111;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <entradadigital+0x174>)
 80007d0:	7c9b      	ldrb	r3, [r3, #18]
 80007d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <entradadigital+0x174>)
 80007da:	749a      	strb	r2, [r3, #18]
  }
  if (HAL_GPIO_ReadPin(GPIOA, ID8_Pin ))
 80007dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <entradadigital+0x178>)
 80007e2:	f001 fb07 	bl	8001df4 <HAL_GPIO_ReadPin>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d007      	beq.n	80007fc <entradadigital+0x15c>
  {
        txBufferStruct.digitalInputs|= 0b01000000;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <entradadigital+0x174>)
 80007ee:	7c9b      	ldrb	r3, [r3, #18]
 80007f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007f4:	b2da      	uxtb	r2, r3
 80007f6:	4b07      	ldr	r3, [pc, #28]	; (8000814 <entradadigital+0x174>)
 80007f8:	749a      	strb	r2, [r3, #18]
  else
  {
        txBufferStruct.digitalInputs &= 0b10111111;
  }

}
 80007fa:	e006      	b.n	800080a <entradadigital+0x16a>
        txBufferStruct.digitalInputs &= 0b10111111;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <entradadigital+0x174>)
 80007fe:	7c9b      	ldrb	r3, [r3, #18]
 8000800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4b03      	ldr	r3, [pc, #12]	; (8000814 <entradadigital+0x174>)
 8000808:	749a      	strb	r2, [r3, #18]
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40010c00 	.word	0x40010c00
 8000814:	20000068 	.word	0x20000068
 8000818:	40010800 	.word	0x40010800

0800081c <HAL_UART_RxCpltCallback>:

  }
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1){
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_UART_RxCpltCallback+0x30>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d10a      	bne.n	8000844 <HAL_UART_RxCpltCallback+0x28>

		PWMCONTROL1();
 800082e:	f7ff fe9b 	bl	8000568 <PWMCONTROL1>
		PWMCONTROL2();
 8000832:	f7ff feb9 	bl	80005a8 <PWMCONTROL2>
		salidadigital();
 8000836:	f7ff fed7 	bl	80005e8 <salidadigital>

		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxUnion,sizeof(rxUnion));
 800083a:	2204      	movs	r2, #4
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <HAL_UART_RxCpltCallback+0x34>)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <HAL_UART_RxCpltCallback+0x38>)
 8000840:	f003 f8d5 	bl	80039ee <HAL_UART_Receive_IT>
=======
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
	htim3.Instance->CCR2=rxUnion.rxUnionBuffer.analogOutput1;
 8000644:	4b05      	ldr	r3, [pc, #20]	; (800065c <PWMCONTROL1+0x1c>)
 8000646:	785a      	ldrb	r2, [r3, #1]
 8000648:	4b05      	ldr	r3, [pc, #20]	; (8000660 <PWMCONTROL1+0x20>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(OPWM1_GPIO_Port, OPWM1_Pin, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	2180      	movs	r1, #128	; 0x80
 8000652:	4804      	ldr	r0, [pc, #16]	; (8000664 <PWMCONTROL1+0x24>)
 8000654:	f001 fd95 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000078 	.word	0x20000078
 8000660:	200000c4 	.word	0x200000c4
 8000664:	40010800 	.word	0x40010800

08000668 <PWMCONTROL2>:
void PWMCONTROL2(){
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	//HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
	htim3.Instance->CCR3=rxUnion.rxUnionBuffer.analogOutput2;
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <PWMCONTROL2+0x1c>)
 800066e:	789a      	ldrb	r2, [r3, #2]
 8000670:	4b05      	ldr	r3, [pc, #20]	; (8000688 <PWMCONTROL2+0x20>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_GPIO_WritePin(OPWM1_GPIO_Port, OPWM1_Pin, 1);
 8000676:	2201      	movs	r2, #1
 8000678:	2180      	movs	r1, #128	; 0x80
 800067a:	4804      	ldr	r0, [pc, #16]	; (800068c <PWMCONTROL2+0x24>)
 800067c:	f001 fd81 	bl	8002182 <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000078 	.word	0x20000078
 8000688:	200000c4 	.word	0x200000c4
 800068c:	40010800 	.word	0x40010800

08000690 <salidadigital>:

void salidadigital(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	//for(int z=0;z<8;z++){
		//switch(z){

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b10000000)>>7 ==1){
 8000694:	4b29      	ldr	r3, [pc, #164]	; (800073c <salidadigital+0xac>)
 8000696:	78db      	ldrb	r3, [r3, #3]
 8000698:	09db      	lsrs	r3, r3, #7
 800069a:	b2db      	uxtb	r3, r3
 800069c:	2b01      	cmp	r3, #1
 800069e:	d104      	bne.n	80006aa <salidadigital+0x1a>
					   HAL_GPIO_TogglePin(O1_GPIO_Port,O1_Pin);}
 80006a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006a4:	4826      	ldr	r0, [pc, #152]	; (8000740 <salidadigital+0xb0>)
 80006a6:	f001 fd84 	bl	80021b2 <HAL_GPIO_TogglePin>


		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b01000000)>>6 ==1){
 80006aa:	4b24      	ldr	r3, [pc, #144]	; (800073c <salidadigital+0xac>)
 80006ac:	78db      	ldrb	r3, [r3, #3]
 80006ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d004      	beq.n	80006c0 <salidadigital+0x30>
			   	   	   HAL_GPIO_TogglePin(O2_GPIO_Port,O2_Pin);}
 80006b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006ba:	4821      	ldr	r0, [pc, #132]	; (8000740 <salidadigital+0xb0>)
 80006bc:	f001 fd79 	bl	80021b2 <HAL_GPIO_TogglePin>

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00100000)>>5 ==1){
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <salidadigital+0xac>)
 80006c2:	78db      	ldrb	r3, [r3, #3]
 80006c4:	f003 0320 	and.w	r3, r3, #32
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d003      	beq.n	80006d4 <salidadigital+0x44>
			           HAL_GPIO_TogglePin(O3_GPIO_Port,O3_Pin);}
 80006cc:	2101      	movs	r1, #1
 80006ce:	481d      	ldr	r0, [pc, #116]	; (8000744 <salidadigital+0xb4>)
 80006d0:	f001 fd6f 	bl	80021b2 <HAL_GPIO_TogglePin>

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00010000)>>4 ==1){
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <salidadigital+0xac>)
 80006d6:	78db      	ldrb	r3, [r3, #3]
 80006d8:	f003 0310 	and.w	r3, r3, #16
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d003      	beq.n	80006e8 <salidadigital+0x58>
			   	   	   HAL_GPIO_TogglePin(O4_GPIO_Port,O4_Pin);}
 80006e0:	2102      	movs	r1, #2
 80006e2:	4818      	ldr	r0, [pc, #96]	; (8000744 <salidadigital+0xb4>)
 80006e4:	f001 fd65 	bl	80021b2 <HAL_GPIO_TogglePin>

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00001000)>>3 ==1){
 80006e8:	4b14      	ldr	r3, [pc, #80]	; (800073c <salidadigital+0xac>)
 80006ea:	78db      	ldrb	r3, [r3, #3]
 80006ec:	f003 0308 	and.w	r3, r3, #8
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d003      	beq.n	80006fc <salidadigital+0x6c>
			   	   	   HAL_GPIO_TogglePin(O5_GPIO_Port,O5_Pin);}
 80006f4:	2104      	movs	r1, #4
 80006f6:	4813      	ldr	r0, [pc, #76]	; (8000744 <salidadigital+0xb4>)
 80006f8:	f001 fd5b 	bl	80021b2 <HAL_GPIO_TogglePin>

	if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000100)>>2 ==1){
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <salidadigital+0xac>)
 80006fe:	78db      	ldrb	r3, [r3, #3]
 8000700:	f003 0304 	and.w	r3, r3, #4
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <salidadigital+0x80>
						HAL_GPIO_TogglePin(O6_GPIO_Port,O6_Pin);}
 8000708:	2108      	movs	r1, #8
 800070a:	480e      	ldr	r0, [pc, #56]	; (8000744 <salidadigital+0xb4>)
 800070c:	f001 fd51 	bl	80021b2 <HAL_GPIO_TogglePin>

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000010)>>1 ==1){
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <salidadigital+0xac>)
 8000712:	78db      	ldrb	r3, [r3, #3]
 8000714:	f003 0302 	and.w	r3, r3, #2
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <salidadigital+0x94>
			   	   	   HAL_GPIO_TogglePin(O7_GPIO_Port,O7_Pin);}
 800071c:	2110      	movs	r1, #16
 800071e:	4809      	ldr	r0, [pc, #36]	; (8000744 <salidadigital+0xb4>)
 8000720:	f001 fd47 	bl	80021b2 <HAL_GPIO_TogglePin>

		if((rxUnion.rxUnionBuffer.digitalOutputs & 0b00000001)>>0 ==1){
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <salidadigital+0xac>)
 8000726:	78db      	ldrb	r3, [r3, #3]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b00      	cmp	r3, #0
 800072e:	d003      	beq.n	8000738 <salidadigital+0xa8>
			   	   	   HAL_GPIO_TogglePin(O8_GPIO_Port,O8_Pin);}
 8000730:	2120      	movs	r1, #32
 8000732:	4804      	ldr	r0, [pc, #16]	; (8000744 <salidadigital+0xb4>)
 8000734:	f001 fd3d 	bl	80021b2 <HAL_GPIO_TogglePin>

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000078 	.word	0x20000078
 8000740:	40011000 	.word	0x40011000
 8000744:	40010800 	.word	0x40010800

08000748 <entradadigital>:
//
void entradadigital(){
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

	if (HAL_GPIO_ReadPin(GPIOB, ID1_Pin ))
 800074c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000750:	4839      	ldr	r0, [pc, #228]	; (8000838 <entradadigital+0xf0>)
 8000752:	f001 fcff 	bl	8002154 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d006      	beq.n	800076a <entradadigital+0x22>
	{
		txBufferStruct.digitalInputs^= 0b00000001;
 800075c:	4b37      	ldr	r3, [pc, #220]	; (800083c <entradadigital+0xf4>)
 800075e:	7c9b      	ldrb	r3, [r3, #18]
 8000760:	f083 0301 	eor.w	r3, r3, #1
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b35      	ldr	r3, [pc, #212]	; (800083c <entradadigital+0xf4>)
 8000768:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID2_Pin ))
 800076a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076e:	4832      	ldr	r0, [pc, #200]	; (8000838 <entradadigital+0xf0>)
 8000770:	f001 fcf0 	bl	8002154 <HAL_GPIO_ReadPin>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d006      	beq.n	8000788 <entradadigital+0x40>
	{
		txBufferStruct.digitalInputs^= 0b00000010;
 800077a:	4b30      	ldr	r3, [pc, #192]	; (800083c <entradadigital+0xf4>)
 800077c:	7c9b      	ldrb	r3, [r3, #18]
 800077e:	f083 0302 	eor.w	r3, r3, #2
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b2d      	ldr	r3, [pc, #180]	; (800083c <entradadigital+0xf4>)
 8000786:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID3_Pin ))
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	482b      	ldr	r0, [pc, #172]	; (8000838 <entradadigital+0xf0>)
 800078c:	f001 fce2 	bl	8002154 <HAL_GPIO_ReadPin>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d006      	beq.n	80007a4 <entradadigital+0x5c>
	{
		txBufferStruct.digitalInputs^= 0b00000100;
 8000796:	4b29      	ldr	r3, [pc, #164]	; (800083c <entradadigital+0xf4>)
 8000798:	7c9b      	ldrb	r3, [r3, #18]
 800079a:	f083 0304 	eor.w	r3, r3, #4
 800079e:	b2da      	uxtb	r2, r3
 80007a0:	4b26      	ldr	r3, [pc, #152]	; (800083c <entradadigital+0xf4>)
 80007a2:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID4_Pin ))
 80007a4:	2140      	movs	r1, #64	; 0x40
 80007a6:	4824      	ldr	r0, [pc, #144]	; (8000838 <entradadigital+0xf0>)
 80007a8:	f001 fcd4 	bl	8002154 <HAL_GPIO_ReadPin>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d006      	beq.n	80007c0 <entradadigital+0x78>
	{
		txBufferStruct.digitalInputs^= 0b00001000;
 80007b2:	4b22      	ldr	r3, [pc, #136]	; (800083c <entradadigital+0xf4>)
 80007b4:	7c9b      	ldrb	r3, [r3, #18]
 80007b6:	f083 0308 	eor.w	r3, r3, #8
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	4b1f      	ldr	r3, [pc, #124]	; (800083c <entradadigital+0xf4>)
 80007be:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID5_Pin ))
 80007c0:	2120      	movs	r1, #32
 80007c2:	481d      	ldr	r0, [pc, #116]	; (8000838 <entradadigital+0xf0>)
 80007c4:	f001 fcc6 	bl	8002154 <HAL_GPIO_ReadPin>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d006      	beq.n	80007dc <entradadigital+0x94>
	{
		txBufferStruct.digitalInputs^= 0b00010000;
 80007ce:	4b1b      	ldr	r3, [pc, #108]	; (800083c <entradadigital+0xf4>)
 80007d0:	7c9b      	ldrb	r3, [r3, #18]
 80007d2:	f083 0310 	eor.w	r3, r3, #16
 80007d6:	b2da      	uxtb	r2, r3
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <entradadigital+0xf4>)
 80007da:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID6_Pin ))
 80007dc:	2110      	movs	r1, #16
 80007de:	4816      	ldr	r0, [pc, #88]	; (8000838 <entradadigital+0xf0>)
 80007e0:	f001 fcb8 	bl	8002154 <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d006      	beq.n	80007f8 <entradadigital+0xb0>
	{
		txBufferStruct.digitalInputs^= 0b00100000;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <entradadigital+0xf4>)
 80007ec:	7c9b      	ldrb	r3, [r3, #18]
 80007ee:	f083 0320 	eor.w	r3, r3, #32
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <entradadigital+0xf4>)
 80007f6:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID7_Pin ))
 80007f8:	2108      	movs	r1, #8
 80007fa:	480f      	ldr	r0, [pc, #60]	; (8000838 <entradadigital+0xf0>)
 80007fc:	f001 fcaa 	bl	8002154 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d006      	beq.n	8000814 <entradadigital+0xcc>
	{
		txBufferStruct.digitalInputs^= 0b01000000;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <entradadigital+0xf4>)
 8000808:	7c9b      	ldrb	r3, [r3, #18]
 800080a:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <entradadigital+0xf4>)
 8000812:	749a      	strb	r2, [r3, #18]
	}
	if (HAL_GPIO_ReadPin(GPIOB, ID8_Pin ))
 8000814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000818:	4807      	ldr	r0, [pc, #28]	; (8000838 <entradadigital+0xf0>)
 800081a:	f001 fc9b 	bl	8002154 <HAL_GPIO_ReadPin>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d007      	beq.n	8000834 <entradadigital+0xec>
	{
		txBufferStruct.digitalInputs^= 0b10000000;
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <entradadigital+0xf4>)
 8000826:	7c9b      	ldrb	r3, [r3, #18]
 8000828:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800082c:	43db      	mvns	r3, r3
 800082e:	b2da      	uxtb	r2, r3
 8000830:	4b02      	ldr	r3, [pc, #8]	; (800083c <entradadigital+0xf4>)
 8000832:	749a      	strb	r2, [r3, #18]
	}



}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40010c00 	.word	0x40010c00
 800083c:	20000064 	.word	0x20000064

08000840 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
	//funciones para poner en el callback. Hablar con dani
	if (huart->Instance == USART1){
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_UART_RxCpltCallback+0x30>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d10a      	bne.n	8000868 <HAL_UART_RxCpltCallback+0x28>
	 //se completo la recepcion, ahora a procesar datos y sacar por salida


		PWMCONTROL1(); //se llama a las funciones pwm mandando como parametro los valores recibidos de c1 y c2
 8000852:	f7ff fef5 	bl	8000640 <PWMCONTROL1>
		PWMCONTROL2();
 8000856:	f7ff ff07 	bl	8000668 <PWMCONTROL2>
		salidadigital();
 800085a:	f7ff ff19 	bl	8000690 <salidadigital>
		//vuelvo a pedir datos
		HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxUnion,sizeof(rxUnion));
 800085e:	2204      	movs	r2, #4
 8000860:	4904      	ldr	r1, [pc, #16]	; (8000874 <HAL_UART_RxCpltCallback+0x34>)
 8000862:	4805      	ldr	r0, [pc, #20]	; (8000878 <HAL_UART_RxCpltCallback+0x38>)
 8000864:	f003 fa73 	bl	8003d4e <HAL_UART_Receive_IT>

>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
	}
}
<<<<<<< HEAD
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40013800 	.word	0x40013800
 8000850:	2000007c 	.word	0x2000007c
 8000854:	20000110 	.word	0x20000110

08000858 <HAL_TIM_PeriodElapsedCallback>:
=======
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40013800 	.word	0x40013800
 8000874:	20000078 	.word	0x20000078
 8000878:	20000154 	.word	0x20000154

0800087c <HAL_TIM_PeriodElapsedCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0c      	ldr	r2, [pc, #48]	; (8000898 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d111      	bne.n	800088e <HAL_TIM_PeriodElapsedCallback+0x36>
	  {
			//MUX_SelectChannel();
			HAL_ADC_Start(&hadc1);
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800086c:	f000 fbfe 	bl	800106c <HAL_ADC_Start>
	        HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000876:	f000 fcd3 	bl	8001220 <HAL_ADC_PollForConversion>
	        adcRead= HAL_ADC_GetValue(&hadc1);
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800087c:	f000 fdd6 	bl	800142c <HAL_ADC_GetValue>
 8000880:	4603      	mov	r3, r0
 8000882:	b29a      	uxth	r2, r3
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000886:	801a      	strh	r2, [r3, #0]
	        HAL_ADC_Stop(&hadc1);
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <HAL_TIM_PeriodElapsedCallback+0x44>)
 800088a:	f000 fc9d 	bl	80011c8 <HAL_ADC_Stop>
	  }
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40000800 	.word	0x40000800
 800089c:	2000002c 	.word	0x2000002c
 80008a0:	20000064 	.word	0x20000064

080008a4 <Error_Handler>:
=======
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a3f      	ldr	r2, [pc, #252]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d178      	bne.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x104>
		entradadigital();
 800088e:	f7ff ff5b 	bl	8000748 <entradadigital>
			// HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
			 for(adcInputCounter=0;adcInputCounter<8;adcInputCounter++)
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	e05e      	b.n	8000958 <HAL_TIM_PeriodElapsedCallback+0xdc>
			 {
				 MUX_SelectChannel(adcInputCounter);
 800089a:	4b3c      	ldr	r3, [pc, #240]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fd76 	bl	8000390 <MUX_SelectChannel>
				 HAL_ADC_Start(&hadc1);
 80008a4:	483a      	ldr	r0, [pc, #232]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80008a6:	f000 fcb7 	bl	8001218 <HAL_ADC_Start>
				 HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 80008aa:	f04f 31ff 	mov.w	r1, #4294967295
 80008ae:	4838      	ldr	r0, [pc, #224]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80008b0:	f000 fd8c 	bl	80013cc <HAL_ADC_PollForConversion>
				 adcRead= HAL_ADC_GetValue(&hadc1);
 80008b4:	4836      	ldr	r0, [pc, #216]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80008b6:	f000 fe8f 	bl	80015d8 <HAL_ADC_GetValue>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	4b35      	ldr	r3, [pc, #212]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80008c0:	801a      	strh	r2, [r3, #0]
				 HAL_ADC_Stop(&hadc1);
 80008c2:	4833      	ldr	r0, [pc, #204]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80008c4:	f000 fd56 	bl	8001374 <HAL_ADC_Stop>

				 switch (adcInputCounter)
 80008c8:	4b30      	ldr	r3, [pc, #192]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b07      	cmp	r3, #7
 80008ce:	d83e      	bhi.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
 80008d0:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d6:	bf00      	nop
 80008d8:	080008f9 	.word	0x080008f9
 80008dc:	08000903 	.word	0x08000903
 80008e0:	0800090d 	.word	0x0800090d
 80008e4:	08000917 	.word	0x08000917
 80008e8:	08000921 	.word	0x08000921
 80008ec:	0800092b 	.word	0x0800092b
 80008f0:	08000935 	.word	0x08000935
 80008f4:	0800093f 	.word	0x0800093f
					{
						case 0: txBufferStruct.analogInput1 = adcRead; break;
 80008f8:	4b26      	ldr	r3, [pc, #152]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80008fa:	881a      	ldrh	r2, [r3, #0]
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80008fe:	805a      	strh	r2, [r3, #2]
 8000900:	e025      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 1: txBufferStruct.analogInput2 = adcRead; break;
 8000902:	4b24      	ldr	r3, [pc, #144]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000904:	881a      	ldrh	r2, [r3, #0]
 8000906:	4b24      	ldr	r3, [pc, #144]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000908:	809a      	strh	r2, [r3, #4]
 800090a:	e020      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 2: txBufferStruct.analogInput3 = adcRead; break;
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800090e:	881a      	ldrh	r2, [r3, #0]
 8000910:	4b21      	ldr	r3, [pc, #132]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000912:	80da      	strh	r2, [r3, #6]
 8000914:	e01b      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 3: txBufferStruct.analogInput4 = adcRead; break;
 8000916:	4b1f      	ldr	r3, [pc, #124]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000918:	881a      	ldrh	r2, [r3, #0]
 800091a:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800091c:	811a      	strh	r2, [r3, #8]
 800091e:	e016      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 4: txBufferStruct.analogInput5 = adcRead; break;
 8000920:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000926:	815a      	strh	r2, [r3, #10]
 8000928:	e011      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 5: txBufferStruct.analogInput6 = adcRead; break;
 800092a:	4b1a      	ldr	r3, [pc, #104]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000930:	819a      	strh	r2, [r3, #12]
 8000932:	e00c      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 6: txBufferStruct.analogInput7 = adcRead; break;
 8000934:	4b17      	ldr	r3, [pc, #92]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000936:	881a      	ldrh	r2, [r3, #0]
 8000938:	4b17      	ldr	r3, [pc, #92]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800093a:	81da      	strh	r2, [r3, #14]
 800093c:	e007      	b.n	800094e <HAL_TIM_PeriodElapsedCallback+0xd2>
						case 7:
						{

							txBufferStruct.analogInput8 = adcRead;
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000940:	881a      	ldrh	r2, [r3, #0]
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000944:	821a      	strh	r2, [r3, #16]

							readyToSend=1;
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
							break;
 800094c:	bf00      	nop
			 for(adcInputCounter=0;adcInputCounter<8;adcInputCounter++)
 800094e:	4b0f      	ldr	r3, [pc, #60]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3301      	adds	r3, #1
 8000954:	4a0d      	ldr	r2, [pc, #52]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b0c      	ldr	r3, [pc, #48]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	2b07      	cmp	r3, #7
 800095e:	dd9c      	ble.n	800089a <HAL_TIM_PeriodElapsedCallback+0x1e>


					}
			 	 }

				if(readyToSend)
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d00b      	beq.n	8000980 <HAL_TIM_PeriodElapsedCallback+0x104>
					{

						adcInputCounter=0;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x110>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
						readyToSend=0;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]

						HAL_UART_Transmit(&huart1, (uint8_t*)&txBufferStruct, sizeof(txBufferStruct), TIME_OUT);
 8000974:	2364      	movs	r3, #100	; 0x64
 8000976:	2214      	movs	r2, #20
 8000978:	4907      	ldr	r1, [pc, #28]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800097a:	4809      	ldr	r0, [pc, #36]	; (80009a0 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800097c:	f003 f964 	bl	8003c48 <HAL_UART_Transmit>
						//HAL_Delay(50);
					}
				}
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40000800 	.word	0x40000800
 800098c:	2000005c 	.word	0x2000005c
 8000990:	20000028 	.word	0x20000028
 8000994:	20000058 	.word	0x20000058
 8000998:	20000064 	.word	0x20000064
 800099c:	20000060 	.word	0x20000060
 80009a0:	20000154 	.word	0x20000154

080009a4 <Error_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
=======
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
=======
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
=======
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
=======
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
<<<<<<< HEAD
 80008b6:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_MspInit+0x5c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a14      	ldr	r2, [pc, #80]	; (800090c <HAL_MspInit+0x5c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b12      	ldr	r3, [pc, #72]	; (800090c <HAL_MspInit+0x5c>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x5c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x5c>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	61d3      	str	r3, [r2, #28]
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x5c>)
 80008dc:	69db      	ldr	r3, [r3, #28]
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
=======
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <HAL_MspInit+0x5c>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <HAL_MspInit+0x5c>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6193      	str	r3, [r2, #24]
 80009c2:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_MspInit+0x5c>)
 80009c4:	699b      	ldr	r3, [r3, #24]
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d0:	69db      	ldr	r3, [r3, #28]
 80009d2:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_MspInit+0x5c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	61d3      	str	r3, [r2, #28]
 80009da:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <HAL_MspInit+0x5c>)
 80009dc:	69db      	ldr	r3, [r3, #28]
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
<<<<<<< HEAD
 80008e6:	4b0a      	ldr	r3, [pc, #40]	; (8000910 <HAL_MspInit+0x60>)
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	4a04      	ldr	r2, [pc, #16]	; (8000910 <HAL_MspInit+0x60>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6053      	str	r3, [r2, #4]
=======
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_MspInit+0x60>)
 80009e8:	685b      	ldr	r3, [r3, #4]
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_MspInit+0x60>)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	6053      	str	r3, [r2, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	bc80      	pop	{r7}
 800090a:	4770      	bx	lr
 800090c:	40021000 	.word	0x40021000
 8000910:	40010000 	.word	0x40010000

08000914 <NMI_Handler>:
=======
 8000a02:	bf00      	nop
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	40010000 	.word	0x40010000

08000a14 <NMI_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
=======
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
<<<<<<< HEAD
 8000918:	e7fe      	b.n	8000918 <NMI_Handler+0x4>

0800091a <HardFault_Handler>:
=======
 8000a18:	e7fe      	b.n	8000a18 <NMI_Handler+0x4>

08000a1a <HardFault_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
=======
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800091e:	e7fe      	b.n	800091e <HardFault_Handler+0x4>

08000920 <MemManage_Handler>:
=======
 8000a1e:	e7fe      	b.n	8000a1e <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
=======
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000924:	e7fe      	b.n	8000924 <MemManage_Handler+0x4>

08000926 <BusFault_Handler>:
=======
 8000a24:	e7fe      	b.n	8000a24 <MemManage_Handler+0x4>

08000a26 <BusFault_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
=======
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 800092a:	e7fe      	b.n	800092a <BusFault_Handler+0x4>

0800092c <UsageFault_Handler>:
=======
 8000a2a:	e7fe      	b.n	8000a2a <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
=======
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000930:	e7fe      	b.n	8000930 <UsageFault_Handler+0x4>

08000932 <SVC_Handler>:
=======
 8000a30:	e7fe      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a32 <SVC_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
=======
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr

0800093e <DebugMon_Handler>:
=======
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
=======
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <PendSV_Handler>:
=======
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <PendSV_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0
=======
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr

08000956 <SysTick_Handler>:
=======
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <SysTick_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
=======
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 800095a:	f000 fa6f 	bl	8000e3c <HAL_IncTick>
=======
 8000a5a:	f000 fae9 	bl	8001030 <HAL_IncTick>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <TIM3_IRQHandler>:
=======
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000a68:	4802      	ldr	r0, [pc, #8]	; (8000a74 <ADC1_2_IRQHandler+0x10>)
 8000a6a:	f000 fdc1 	bl	80015f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000028 	.word	0x20000028

08000a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a7c:	4802      	ldr	r0, [pc, #8]	; (8000a88 <TIM2_IRQHandler+0x10>)
 8000a7e:	f002 fac9 	bl	8003014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	2000007c 	.word	0x2000007c

08000a8c <TIM3_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
<<<<<<< HEAD
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
=======
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
<<<<<<< HEAD
 8000968:	4802      	ldr	r0, [pc, #8]	; (8000974 <TIM3_IRQHandler+0x10>)
 800096a:	f002 f9a3 	bl	8002cb4 <HAL_TIM_IRQHandler>
=======
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <TIM3_IRQHandler+0x10>)
 8000a92:	f002 fabf 	bl	8003014 <HAL_TIM_IRQHandler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
<<<<<<< HEAD
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000080 	.word	0x20000080

08000978 <TIM4_IRQHandler>:
=======
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000c4 	.word	0x200000c4

08000aa0 <TIM4_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
=======
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 800097c:	4802      	ldr	r0, [pc, #8]	; (8000988 <TIM4_IRQHandler+0x10>)
 800097e:	f002 f999 	bl	8002cb4 <HAL_TIM_IRQHandler>
=======
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM4_IRQHandler+0x10>)
 8000aa6:	f002 fab5 	bl	8003014 <HAL_TIM_IRQHandler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	200000c8 	.word	0x200000c8

0800098c <USART1_IRQHandler>:
=======
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000010c 	.word	0x2000010c

08000ab4 <USART1_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
<<<<<<< HEAD
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
=======
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
<<<<<<< HEAD
 8000990:	4802      	ldr	r0, [pc, #8]	; (800099c <USART1_IRQHandler+0x10>)
 8000992:	f003 f851 	bl	8003a38 <HAL_UART_IRQHandler>
=======
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <USART1_IRQHandler+0x10>)
 8000aba:	f003 f96d 	bl	8003d98 <HAL_UART_IRQHandler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
<<<<<<< HEAD
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000110 	.word	0x20000110

080009a0 <SystemInit>:
=======
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000154 	.word	0x20000154

08000ac8 <SystemInit>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
=======
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
<<<<<<< HEAD
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
=======
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0308 	add.w	r3, r7, #8
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	463b      	mov	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000af0:	4b1d      	ldr	r3, [pc, #116]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000af2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000af6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 18;
 8000af8:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000afa:	2212      	movs	r2, #18
 8000afc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8000b04:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b12:	4b15      	ldr	r3, [pc, #84]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b18:	4813      	ldr	r0, [pc, #76]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b1a:	f002 f8df 	bl	8002cdc <HAL_TIM_Base_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b24:	f7ff ff3e 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b2e:	f107 0308 	add.w	r3, r7, #8
 8000b32:	4619      	mov	r1, r3
 8000b34:	480c      	ldr	r0, [pc, #48]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b36:	f002 fc37 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b40:	f7ff ff30 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b4c:	463b      	mov	r3, r7
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4805      	ldr	r0, [pc, #20]	; (8000b68 <MX_TIM2_Init+0x94>)
 8000b52:	f002 ffb9 	bl	8003ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f7ff ff22 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000007c 	.word	0x2000007c

08000b6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08e      	sub	sp, #56	; 0x38
 8000b70:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80009b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c0:	f107 0320 	add.w	r3, r7, #32
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
 80009c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]
 80009d8:	615a      	str	r2, [r3, #20]
 80009da:	619a      	str	r2, [r3, #24]
=======
 8000b72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b8a:	1d3b      	adds	r3, r7, #4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
 8000b98:	615a      	str	r2, [r3, #20]
 8000b9a:	619a      	str	r2, [r3, #24]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 80009dc:	4b32      	ldr	r3, [pc, #200]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009de:	4a33      	ldr	r2, [pc, #204]	; (8000aac <MX_TIM3_Init+0x100>)
 80009e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 80009e2:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009e8:	4b2f      	ldr	r3, [pc, #188]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80009ee:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009f4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009f6:	4b2c      	ldr	r3, [pc, #176]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a02:	4829      	ldr	r0, [pc, #164]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a04:	f001 ffba 	bl	800297c <HAL_TIM_Base_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000a0e:	f7ff ff49 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4822      	ldr	r0, [pc, #136]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a20:	f002 fb12 	bl	8003048 <HAL_TIM_ConfigClockSource>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000a2a:	f7ff ff3b 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a2e:	481e      	ldr	r0, [pc, #120]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a30:	f002 f846 	bl	8002ac0 <HAL_TIM_PWM_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000a3a:	f7ff ff33 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a46:	f107 0320 	add.w	r3, r7, #32
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4816      	ldr	r0, [pc, #88]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a4e:	f002 fe8b 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000a58:	f7ff ff24 	bl	80008a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a5c:	2360      	movs	r3, #96	; 0x60
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000a60:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a6e:	1d3b      	adds	r3, r7, #4
 8000a70:	2204      	movs	r2, #4
 8000a72:	4619      	mov	r1, r3
 8000a74:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a76:	f002 fa25 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000a80:	f7ff ff10 	bl	80008a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	2208      	movs	r2, #8
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4807      	ldr	r0, [pc, #28]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a8c:	f002 fa1a 	bl	8002ec4 <HAL_TIM_PWM_ConfigChannel>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000a96:	f7ff ff05 	bl	80008a4 <Error_Handler>
=======
 8000b9c:	4b32      	ldr	r3, [pc, #200]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000b9e:	4a33      	ldr	r2, [pc, #204]	; (8000c6c <MX_TIM3_Init+0x100>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000ba2:	4b31      	ldr	r3, [pc, #196]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000ba4:	2207      	movs	r2, #7
 8000ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba8:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000bae:	4b2e      	ldr	r3, [pc, #184]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bc2:	4829      	ldr	r0, [pc, #164]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000bc4:	f002 f88a 	bl	8002cdc <HAL_TIM_Base_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000bce:	f7ff fee9 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bd8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4822      	ldr	r0, [pc, #136]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000be0:	f002 fbe2 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000bea:	f7ff fedb 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bee:	481e      	ldr	r0, [pc, #120]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000bf0:	f002 f916 	bl	8002e20 <HAL_TIM_PWM_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000bfa:	f7ff fed3 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c06:	f107 0320 	add.w	r3, r7, #32
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4816      	ldr	r0, [pc, #88]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000c0e:	f002 ff5b 	bl	8003ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000c18:	f7ff fec4 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c1c:	2360      	movs	r3, #96	; 0x60
 8000c1e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c24:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	2204      	movs	r2, #4
 8000c32:	4619      	mov	r1, r3
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000c36:	f002 faf5 	bl	8003224 <HAL_TIM_PWM_ConfigChannel>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c40:	f7ff feb0 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c44:	1d3b      	adds	r3, r7, #4
 8000c46:	2208      	movs	r2, #8
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4807      	ldr	r0, [pc, #28]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000c4c:	f002 faea 	bl	8003224 <HAL_TIM_PWM_ConfigChannel>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000c56:	f7ff fea5 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 8000a9a:	4803      	ldr	r0, [pc, #12]	; (8000aa8 <MX_TIM3_Init+0xfc>)
 8000a9c:	f000 f898 	bl	8000bd0 <HAL_TIM_MspPostInit>

}
 8000aa0:	bf00      	nop
 8000aa2:	3738      	adds	r7, #56	; 0x38
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000080 	.word	0x20000080
 8000aac:	40000400 	.word	0x40000400

08000ab0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
=======
 8000c5a:	4803      	ldr	r0, [pc, #12]	; (8000c68 <MX_TIM3_Init+0xfc>)
 8000c5c:	f000 f8b2 	bl	8000dc4 <HAL_TIM_MspPostInit>

}
 8000c60:	bf00      	nop
 8000c62:	3738      	adds	r7, #56	; 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	200000c4 	.word	0x200000c4
 8000c6c:	40000400 	.word	0x40000400

08000c70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b086      	sub	sp, #24
 8000c74:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 8000ab6:	f107 0308 	add.w	r3, r7, #8
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
=======
 8000c76:	f107 0308 	add.w	r3, r7, #8
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
 8000c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c84:	463b      	mov	r3, r7
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 8000acc:	4b1d      	ldr	r3, [pc, #116]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000ace:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <MX_TIM4_Init+0x98>)
 8000ad0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000ad4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000ad8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ada:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000ae0:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ae6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000af4:	4813      	ldr	r0, [pc, #76]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000af6:	f001 ff41 	bl	800297c <HAL_TIM_Base_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000b00:	f7ff fed0 	bl	80008a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b0a:	f107 0308 	add.w	r3, r7, #8
 8000b0e:	4619      	mov	r1, r3
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000b12:	f002 fa99 	bl	8003048 <HAL_TIM_ConfigClockSource>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000b1c:	f7ff fec2 	bl	80008a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b28:	463b      	mov	r3, r7
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_TIM4_Init+0x94>)
 8000b2e:	f002 fe1b 	bl	8003768 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b38:	f7ff feb4 	bl	80008a4 <Error_Handler>
=======
 8000c8c:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000c8e:	4a1e      	ldr	r2, [pc, #120]	; (8000d08 <MX_TIM4_Init+0x98>)
 8000c90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200-1;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000c94:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000c98:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000ca2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ca6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca8:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cb4:	4813      	ldr	r0, [pc, #76]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000cb6:	f002 f811 	bl	8002cdc <HAL_TIM_Base_Init>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000cc0:	f7ff fe70 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000cca:	f107 0308 	add.w	r3, r7, #8
 8000cce:	4619      	mov	r1, r3
 8000cd0:	480c      	ldr	r0, [pc, #48]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000cd2:	f002 fb69 	bl	80033a8 <HAL_TIM_ConfigClockSource>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000cdc:	f7ff fe62 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ce8:	463b      	mov	r3, r7
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_TIM4_Init+0x94>)
 8000cee:	f002 feeb 	bl	8003ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000cf8:	f7ff fe54 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
<<<<<<< HEAD
 8000b3c:	bf00      	nop
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200000c8 	.word	0x200000c8
 8000b48:	40000800 	.word	0x40000800

08000b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a1a      	ldr	r2, [pc, #104]	; (8000bc4 <HAL_TIM_Base_MspInit+0x78>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d114      	bne.n	8000b88 <HAL_TIM_Base_MspInit+0x3c>
=======
 8000cfc:	bf00      	nop
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	2000010c 	.word	0x2000010c
 8000d08:	40000800 	.word	0x40000800

08000d0c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b086      	sub	sp, #24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d114      	bne.n	8000d48 <HAL_TIM_Base_MspInit+0x3c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

<<<<<<< HEAD
  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a19      	ldr	r2, [pc, #100]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	201d      	movs	r0, #29
 8000b7c:	f000 fecd 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b80:	201d      	movs	r0, #29
 8000b82:	f000 fee6 	bl	8001952 <HAL_NVIC_EnableIRQ>
=======
  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b26      	ldr	r3, [pc, #152]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a25      	ldr	r2, [pc, #148]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b23      	ldr	r3, [pc, #140]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f000 ff9d 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d40:	201c      	movs	r0, #28
 8000d42:	f000 ffb6 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
<<<<<<< HEAD
 8000b86:	e018      	b.n	8000bba <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM4)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a0f      	ldr	r2, [pc, #60]	; (8000bcc <HAL_TIM_Base_MspInit+0x80>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d113      	bne.n	8000bba <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_TIM_Base_MspInit+0x7c>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	201e      	movs	r0, #30
 8000bb0:	f000 feb3 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bb4:	201e      	movs	r0, #30
 8000bb6:	f000 fecc 	bl	8001952 <HAL_NVIC_EnableIRQ>
}
 8000bba:	bf00      	nop
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40000400 	.word	0x40000400
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b088      	sub	sp, #32
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd8:	f107 0310 	add.w	r3, r7, #16
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <HAL_TIM_MspPostInit+0x88>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d12f      	bne.n	8000c50 <HAL_TIM_MspPostInit+0x80>
=======
 8000d46:	e032      	b.n	8000dae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a1b      	ldr	r2, [pc, #108]	; (8000dbc <HAL_TIM_Base_MspInit+0xb0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d114      	bne.n	8000d7c <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d52:	4b19      	ldr	r3, [pc, #100]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d54:	69db      	ldr	r3, [r3, #28]
 8000d56:	4a18      	ldr	r2, [pc, #96]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	61d3      	str	r3, [r2, #28]
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d60:	69db      	ldr	r3, [r3, #28]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	201d      	movs	r0, #29
 8000d70:	f000 ff83 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d74:	201d      	movs	r0, #29
 8000d76:	f000 ff9c 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
}
 8000d7a:	e018      	b.n	8000dae <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_TIM_Base_MspInit+0xb4>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d113      	bne.n	8000dae <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000d86:	4b0c      	ldr	r3, [pc, #48]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d88:	69db      	ldr	r3, [r3, #28]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d8c:	f043 0304 	orr.w	r3, r3, #4
 8000d90:	61d3      	str	r3, [r2, #28]
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <HAL_TIM_Base_MspInit+0xac>)
 8000d94:	69db      	ldr	r3, [r3, #28]
 8000d96:	f003 0304 	and.w	r3, r3, #4
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	201e      	movs	r0, #30
 8000da4:	f000 ff69 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000da8:	201e      	movs	r0, #30
 8000daa:	f000 ff82 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40021000 	.word	0x40021000
 8000dbc:	40000400 	.word	0x40000400
 8000dc0:	40000800 	.word	0x40000800

08000dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b088      	sub	sp, #32
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0310 	add.w	r3, r7, #16
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1b      	ldr	r2, [pc, #108]	; (8000e4c <HAL_TIM_MspPostInit+0x88>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d12f      	bne.n	8000e44 <HAL_TIM_MspPostInit+0x80>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a19      	ldr	r2, [pc, #100]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <HAL_TIM_MspPostInit+0x8c>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	68bb      	ldr	r3, [r7, #8]
=======
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0304 	and.w	r3, r3, #4
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000dfe:	699b      	ldr	r3, [r3, #24]
 8000e00:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000e02:	f043 0308 	orr.w	r3, r3, #8
 8000e06:	6193      	str	r3, [r2, #24]
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_TIM_MspPostInit+0x8c>)
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	f003 0308 	and.w	r3, r3, #8
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = OPWM1_Pin;
<<<<<<< HEAD
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c24:	2302      	movs	r3, #2
 8000c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OPWM1_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 0310 	add.w	r3, r7, #16
 8000c30:	4619      	mov	r1, r3
 8000c32:	480b      	ldr	r0, [pc, #44]	; (8000c60 <HAL_TIM_MspPostInit+0x90>)
 8000c34:	f000 ff5a 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPWM2_Pin;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c40:	2302      	movs	r3, #2
 8000c42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OPWM2_GPIO_Port, &GPIO_InitStruct);
 8000c44:	f107 0310 	add.w	r3, r7, #16
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4806      	ldr	r0, [pc, #24]	; (8000c64 <HAL_TIM_MspPostInit+0x94>)
 8000c4c:	f000 ff4e 	bl	8001aec <HAL_GPIO_Init>
=======
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OPWM1_GPIO_Port, &GPIO_InitStruct);
 8000e20:	f107 0310 	add.w	r3, r7, #16
 8000e24:	4619      	mov	r1, r3
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <HAL_TIM_MspPostInit+0x90>)
 8000e28:	f001 f810 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OPWM2_Pin;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(OPWM2_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0310 	add.w	r3, r7, #16
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <HAL_TIM_MspPostInit+0x94>)
 8000e40:	f001 f804 	bl	8001e4c <HAL_GPIO_Init>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8000c50:	bf00      	nop
 8000c52:	3720      	adds	r7, #32
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40000400 	.word	0x40000400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	40010800 	.word	0x40010800
 8000c64:	40010c00 	.word	0x40010c00

08000c68 <MX_USART1_UART_Init>:
=======
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40000400 	.word	0x40000400
 8000e50:	40021000 	.word	0x40021000
 8000e54:	40010800 	.word	0x40010800
 8000e58:	40010c00 	.word	0x40010c00

08000e5c <MX_USART1_UART_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
<<<<<<< HEAD
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
=======
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
<<<<<<< HEAD
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	4a12      	ldr	r2, [pc, #72]	; (8000cb8 <MX_USART1_UART_Init+0x50>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c72:	4b10      	ldr	r3, [pc, #64]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c9e:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	f002 fdd2 	bl	8003848 <HAL_UART_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000caa:	f7ff fdfb 	bl	80008a4 <Error_Handler>
=======
 8000e60:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e62:	4a12      	ldr	r2, [pc, #72]	; (8000eac <MX_USART1_UART_Init+0x50>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b08      	ldr	r3, [pc, #32]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <MX_USART1_UART_Init+0x4c>)
 8000e94:	f002 fe88 	bl	8003ba8 <HAL_UART_Init>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e9e:	f7ff fd81 	bl	80009a4 <Error_Handler>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
<<<<<<< HEAD
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000110 	.word	0x20000110
 8000cb8:	40013800 	.word	0x40013800

08000cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b088      	sub	sp, #32
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_UART_MspInit+0x9c>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d139      	bne.n	8000d50 <HAL_UART_MspInit+0x94>
=======
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000154 	.word	0x20000154
 8000eac:	40013800 	.word	0x40013800

08000eb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0310 	add.w	r3, r7, #16
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <HAL_UART_MspInit+0x9c>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d139      	bne.n	8000f44 <HAL_UART_MspInit+0x94>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
<<<<<<< HEAD
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a1e      	ldr	r2, [pc, #120]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000ce2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_UART_MspInit+0xa0>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
=======
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a18      	ldr	r2, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000eee:	f043 0304 	orr.w	r3, r3, #4
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_UART_MspInit+0xa0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX_Pin;
<<<<<<< HEAD
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d12:	2302      	movs	r3, #2
 8000d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 0310 	add.w	r3, r7, #16
 8000d1e:	4619      	mov	r1, r3
 8000d20:	480f      	ldr	r0, [pc, #60]	; (8000d60 <HAL_UART_MspInit+0xa4>)
 8000d22:	f000 fee3 	bl	8001aec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <HAL_UART_MspInit+0xa4>)
 8000d3c:	f000 fed6 	bl	8001aec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2100      	movs	r1, #0
 8000d44:	2025      	movs	r0, #37	; 0x25
 8000d46:	f000 fde8 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d4a:	2025      	movs	r0, #37	; 0x25
 8000d4c:	f000 fe01 	bl	8001952 <HAL_NVIC_EnableIRQ>
=======
 8000f00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f06:	2302      	movs	r3, #2
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TX_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	4619      	mov	r1, r3
 8000f14:	480f      	ldr	r0, [pc, #60]	; (8000f54 <HAL_UART_MspInit+0xa4>)
 8000f16:	f000 ff99 	bl	8001e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RX_Pin;
 8000f1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(RX_GPIO_Port, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4809      	ldr	r0, [pc, #36]	; (8000f54 <HAL_UART_MspInit+0xa4>)
 8000f30:	f000 ff8c 	bl	8001e4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f34:	2200      	movs	r2, #0
 8000f36:	2100      	movs	r1, #0
 8000f38:	2025      	movs	r0, #37	; 0x25
 8000f3a:	f000 fe9e 	bl	8001c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f3e:	2025      	movs	r0, #37	; 0x25
 8000f40:	f000 feb7 	bl	8001cb2 <HAL_NVIC_EnableIRQ>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
<<<<<<< HEAD
 8000d50:	bf00      	nop
 8000d52:	3720      	adds	r7, #32
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	40013800 	.word	0x40013800
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010800 	.word	0x40010800

08000d64 <Reset_Handler>:
=======
 8000f44:	bf00      	nop
 8000f46:	3720      	adds	r7, #32
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40010800 	.word	0x40010800

08000f58 <Reset_Handler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
<<<<<<< HEAD
 8000d64:	f7ff fe1c 	bl	80009a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d6a:	490c      	ldr	r1, [pc, #48]	; (8000d9c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d6c:	4a0c      	ldr	r2, [pc, #48]	; (8000da0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d70:	e002      	b.n	8000d78 <LoopCopyDataInit>

08000d72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d76:	3304      	adds	r3, #4

08000d78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d7c:	d3f9      	bcc.n	8000d72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d7e:	4a09      	ldr	r2, [pc, #36]	; (8000da4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d80:	4c09      	ldr	r4, [pc, #36]	; (8000da8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d84:	e001      	b.n	8000d8a <LoopFillZerobss>

08000d86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d88:	3204      	adds	r2, #4

08000d8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d8c:	d3fb      	bcc.n	8000d86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d8e:	f003 fbd3 	bl	8004538 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d92:	f7ff faf3 	bl	800037c <main>
  bx lr
 8000d96:	4770      	bx	lr
  ldr r0, =_sdata
 8000d98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d9c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000da0:	080045f0 	.word	0x080045f0
  ldr r2, =_sbss
 8000da4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000da8:	2000015c 	.word	0x2000015c

08000dac <ADC1_2_IRQHandler>:
=======
 8000f58:	f7ff fdb6 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f5c:	480b      	ldr	r0, [pc, #44]	; (8000f8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f5e:	490c      	ldr	r1, [pc, #48]	; (8000f90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f60:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a09      	ldr	r2, [pc, #36]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f74:	4c09      	ldr	r4, [pc, #36]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f82:	f003 fc89 	bl	8004898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f86:	f7ff fabd 	bl	8000504 <main>
  bx lr
 8000f8a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f90:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f94:	08004950 	.word	0x08004950
  ldr r2, =_sbss
 8000f98:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f9c:	200001a0 	.word	0x200001a0

08000fa0 <CAN1_RX1_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
<<<<<<< HEAD
 8000dac:	e7fe      	b.n	8000dac <ADC1_2_IRQHandler>
	...

08000db0 <HAL_Init>:
=======
 8000fa0:	e7fe      	b.n	8000fa0 <CAN1_RX1_IRQHandler>
	...

08000fa4 <HAL_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
=======
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <HAL_Init+0x28>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <HAL_Init+0x28>)
 8000dba:	f043 0310 	orr.w	r3, r3, #16
 8000dbe:	6013      	str	r3, [r2, #0]
=======
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HAL_Init+0x28>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <HAL_Init+0x28>)
 8000fae:	f043 0310 	orr.w	r3, r3, #16
 8000fb2:	6013      	str	r3, [r2, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000dc0:	2003      	movs	r0, #3
 8000dc2:	f000 fd9f 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dc6:	200f      	movs	r0, #15
 8000dc8:	f000 f808 	bl	8000ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dcc:	f7ff fd70 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40022000 	.word	0x40022000

08000ddc <HAL_InitTick>:
=======
 8000fb4:	2003      	movs	r0, #3
 8000fb6:	f000 fe55 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fba:	200f      	movs	r0, #15
 8000fbc:	f000 f808 	bl	8000fd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc0:	f7ff fcf6 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40022000 	.word	0x40022000

08000fd0 <HAL_InitTick>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000de4:	4b12      	ldr	r3, [pc, #72]	; (8000e30 <HAL_InitTick+0x54>)
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	4b12      	ldr	r3, [pc, #72]	; (8000e34 <HAL_InitTick+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	4619      	mov	r1, r3
 8000dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fdb7 	bl	800196e <HAL_SYSTICK_Config>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00e      	b.n	8000e28 <HAL_InitTick+0x4c>
=======
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x54>)
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4b12      	ldr	r3, [pc, #72]	; (8001028 <HAL_InitTick+0x58>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fe6d 	bl	8001cce <HAL_SYSTICK_Config>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00e      	b.n	800101c <HAL_InitTick+0x4c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b0f      	cmp	r3, #15
 8000e0e:	d80a      	bhi.n	8000e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e10:	2200      	movs	r2, #0
 8000e12:	6879      	ldr	r1, [r7, #4]
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f000 fd7f 	bl	800191a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e1c:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_InitTick+0x5c>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6013      	str	r3, [r2, #0]
=======
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2b0f      	cmp	r3, #15
 8001002:	d80a      	bhi.n	800101a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001004:	2200      	movs	r2, #0
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f000 fe35 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001010:	4a06      	ldr	r2, [pc, #24]	; (800102c <HAL_InitTick+0x5c>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6013      	str	r3, [r2, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8000e22:	2300      	movs	r3, #0
 8000e24:	e000      	b.n	8000e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000004 	.word	0x20000004
 8000e34:	2000000c 	.word	0x2000000c
 8000e38:	20000008 	.word	0x20000008

08000e3c <HAL_IncTick>:
=======
 8001016:	2300      	movs	r3, #0
 8001018:	e000      	b.n	800101c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000000 	.word	0x20000000
 8001028:	20000008 	.word	0x20000008
 800102c:	20000004 	.word	0x20000004

08001030 <HAL_IncTick>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e40:	4b05      	ldr	r3, [pc, #20]	; (8000e58 <HAL_IncTick+0x1c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	461a      	mov	r2, r3
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <HAL_IncTick+0x20>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	4a03      	ldr	r2, [pc, #12]	; (8000e5c <HAL_IncTick+0x20>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bc80      	pop	{r7}
 8000e56:	4770      	bx	lr
 8000e58:	2000000c 	.word	0x2000000c
 8000e5c:	20000158 	.word	0x20000158

08000e60 <HAL_GetTick>:
=======
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <HAL_IncTick+0x1c>)
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	461a      	mov	r2, r3
 800103a:	4b05      	ldr	r3, [pc, #20]	; (8001050 <HAL_IncTick+0x20>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4413      	add	r3, r2
 8001040:	4a03      	ldr	r2, [pc, #12]	; (8001050 <HAL_IncTick+0x20>)
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	20000008 	.word	0x20000008
 8001050:	2000019c 	.word	0x2000019c

08001054 <HAL_GetTick>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return uwTick;
 8000e64:	4b02      	ldr	r3, [pc, #8]	; (8000e70 <HAL_GetTick+0x10>)
 8000e66:	681b      	ldr	r3, [r3, #0]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bc80      	pop	{r7}
 8000e6e:	4770      	bx	lr
 8000e70:	20000158 	.word	0x20000158

08000e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e7c:	f7ff fff0 	bl	8000e60 <HAL_GetTick>
 8000e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e8c:	d005      	beq.n	8000e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_Delay+0x44>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	4413      	add	r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e9a:	bf00      	nop
 8000e9c:	f7ff ffe0 	bl	8000e60 <HAL_GetTick>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d8f7      	bhi.n	8000e9c <HAL_Delay+0x28>
  {
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	2000000c 	.word	0x2000000c

08000ebc <HAL_ADC_Init>:
=======
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b02      	ldr	r3, [pc, #8]	; (8001064 <HAL_GetTick+0x10>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr
 8001064:	2000019c 	.word	0x2000019c

08001068 <HAL_ADC_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d101      	bne.n	8000ede <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e0be      	b.n	800105c <HAL_ADC_Init+0x1a0>
=======
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001070:	2300      	movs	r3, #0
 8001072:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d101      	bne.n	800108a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	e0be      	b.n	8001208 <HAL_ADC_Init+0x1a0>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
<<<<<<< HEAD
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	689b      	ldr	r3, [r3, #8]
 8000ee2:	2b00      	cmp	r3, #0
=======
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	2b00      	cmp	r3, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
<<<<<<< HEAD
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d109      	bne.n	8000f00 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001094:	2b00      	cmp	r3, #0
 8001096:	d109      	bne.n	80010ac <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
<<<<<<< HEAD
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff f964 	bl	80001c8 <HAL_ADC_MspInit>
=======
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff f88e 	bl	80001c8 <HAL_ADC_MspInit>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
<<<<<<< HEAD
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 fbf1 	bl	80016e8 <ADC_ConversionStop_Disable>
 8000f06:	4603      	mov	r3, r0
 8000f08:	75fb      	strb	r3, [r7, #23]
=======
 80010ac:	6878      	ldr	r0, [r7, #4]
 80010ae:	f000 fcc3 	bl	8001a38 <ADC_ConversionStop_Disable>
 80010b2:	4603      	mov	r3, r0
 80010b4:	75fb      	strb	r3, [r7, #23]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
<<<<<<< HEAD
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	f003 0310 	and.w	r3, r3, #16
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f040 8099 	bne.w	800104a <HAL_ADC_Init+0x18e>
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f040 8095 	bne.w	800104a <HAL_ADC_Init+0x18e>
=======
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 8099 	bne.w	80011f6 <HAL_ADC_Init+0x18e>
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f040 8095 	bne.w	80011f6 <HAL_ADC_Init+0x18e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f28:	f023 0302 	bic.w	r3, r3, #2
 8000f2c:	f043 0202 	orr.w	r2, r3, #2
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010d4:	f023 0302 	bic.w	r3, r3, #2
 80010d8:	f043 0202 	orr.w	r2, r3, #2
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
<<<<<<< HEAD
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f3c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
 8000f42:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f44:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f46:	68ba      	ldr	r2, [r7, #8]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	60bb      	str	r3, [r7, #8]
=======
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010e8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7b1b      	ldrb	r3, [r3, #12]
 80010ee:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80010f0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	60bb      	str	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
<<<<<<< HEAD
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f54:	d003      	beq.n	8000f5e <HAL_ADC_Init+0xa2>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	689b      	ldr	r3, [r3, #8]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d102      	bne.n	8000f64 <HAL_ADC_Init+0xa8>
 8000f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f62:	e000      	b.n	8000f66 <HAL_ADC_Init+0xaa>
 8000f64:	2300      	movs	r3, #0
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
=======
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	689b      	ldr	r3, [r3, #8]
 80010fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001100:	d003      	beq.n	800110a <HAL_ADC_Init+0xa2>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_ADC_Init+0xa8>
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	e000      	b.n	8001112 <HAL_ADC_Init+0xaa>
 8001110:	2300      	movs	r3, #0
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
<<<<<<< HEAD
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	7d1b      	ldrb	r3, [r3, #20]
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d119      	bne.n	8000fa8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d109      	bne.n	8000f90 <HAL_ADC_Init+0xd4>
=======
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	7d1b      	ldrb	r3, [r3, #20]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d119      	bne.n	8001154 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	7b1b      	ldrb	r3, [r3, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d109      	bne.n	800113c <HAL_ADC_Init+0xd4>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
<<<<<<< HEAD
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	035a      	lsls	r2, r3, #13
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	e00b      	b.n	8000fa8 <HAL_ADC_Init+0xec>
=======
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	699b      	ldr	r3, [r3, #24]
 800112c:	3b01      	subs	r3, #1
 800112e:	035a      	lsls	r2, r3, #13
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	e00b      	b.n	8001154 <HAL_ADC_Init+0xec>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	f043 0220 	orr.w	r2, r3, #32
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	f043 0201 	orr.w	r2, r3, #1
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001140:	f043 0220 	orr.w	r2, r3, #32
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	f043 0201 	orr.w	r2, r3, #1
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
<<<<<<< HEAD
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	605a      	str	r2, [r3, #4]
=======
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	430a      	orrs	r2, r1
 8001166:	605a      	str	r2, [r3, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
<<<<<<< HEAD
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <HAL_ADC_Init+0x1a8>)
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	6812      	ldr	r2, [r2, #0]
 8000fca:	68b9      	ldr	r1, [r7, #8]
 8000fcc:	430b      	orrs	r3, r1
 8000fce:	6093      	str	r3, [r2, #8]
=======
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689a      	ldr	r2, [r3, #8]
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <HAL_ADC_Init+0x1a8>)
 8001170:	4013      	ands	r3, r2
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	6812      	ldr	r2, [r2, #0]
 8001176:	68b9      	ldr	r1, [r7, #8]
 8001178:	430b      	orrs	r3, r1
 800117a:	6093      	str	r3, [r2, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
<<<<<<< HEAD
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fd8:	d003      	beq.n	8000fe2 <HAL_ADC_Init+0x126>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d104      	bne.n	8000fec <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	051b      	lsls	r3, r3, #20
 8000fea:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff2:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001184:	d003      	beq.n	800118e <HAL_ADC_Init+0x126>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d104      	bne.n	8001198 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	3b01      	subs	r3, #1
 8001194:	051b      	lsls	r3, r3, #20
 8001196:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
<<<<<<< HEAD
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	689a      	ldr	r2, [r3, #8]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_ADC_Init+0x1ac>)
 8001008:	4013      	ands	r3, r2
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	429a      	cmp	r2, r3
 800100e:	d10b      	bne.n	8001028 <HAL_ADC_Init+0x16c>
=======
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	689a      	ldr	r2, [r3, #8]
 80011b2:	4b18      	ldr	r3, [pc, #96]	; (8001214 <HAL_ADC_Init+0x1ac>)
 80011b4:	4013      	ands	r3, r2
 80011b6:	68ba      	ldr	r2, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d10b      	bne.n	80011d4 <HAL_ADC_Init+0x16c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
<<<<<<< HEAD
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	f023 0303 	bic.w	r3, r3, #3
 800101e:	f043 0201 	orr.w	r2, r3, #1
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001026:	e018      	b.n	800105a <HAL_ADC_Init+0x19e>
=======
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011c6:	f023 0303 	bic.w	r3, r3, #3
 80011ca:	f043 0201 	orr.w	r2, r3, #1
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011d2:	e018      	b.n	8001206 <HAL_ADC_Init+0x19e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
<<<<<<< HEAD
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800102c:	f023 0312 	bic.w	r3, r3, #18
 8001030:	f043 0210 	orr.w	r2, r3, #16
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
=======
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011d8:	f023 0312 	bic.w	r3, r3, #18
 80011dc:	f043 0210 	orr.w	r2, r3, #16
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
<<<<<<< HEAD
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103c:	f043 0201 	orr.w	r2, r3, #1
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001048:	e007      	b.n	800105a <HAL_ADC_Init+0x19e>
=======
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e8:	f043 0201 	orr.w	r2, r3, #1
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80011f4:	e007      	b.n	8001206 <HAL_ADC_Init+0x19e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
<<<<<<< HEAD
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
=======
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fa:	f043 0210 	orr.w	r2, r3, #16
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	75fb      	strb	r3, [r7, #23]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  
  /* Return function status */
  return tmp_hal_status;
<<<<<<< HEAD
 800105a:	7dfb      	ldrb	r3, [r7, #23]
}
 800105c:	4618      	mov	r0, r3
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	ffe1f7fd 	.word	0xffe1f7fd
 8001068:	ff1f0efe 	.word	0xff1f0efe

0800106c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
=======
 8001206:	7dfb      	ldrb	r3, [r7, #23]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	ffe1f7fd 	.word	0xffe1f7fd
 8001214:	ff1f0efe 	.word	0xff1f0efe

08001218 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800122a:	2b01      	cmp	r3, #1
 800122c:	d101      	bne.n	8001232 <HAL_ADC_Start+0x1a>
 800122e:	2302      	movs	r3, #2
 8001230:	e098      	b.n	8001364 <HAL_ADC_Start+0x14c>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fba2 	bl	8001984 <ADC_Enable>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f040 8087 	bne.w	800135a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001254:	f023 0301 	bic.w	r3, r3, #1
 8001258:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a41      	ldr	r2, [pc, #260]	; (800136c <HAL_ADC_Start+0x154>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d105      	bne.n	8001276 <HAL_ADC_Start+0x5e>
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_ADC_Start+0x158>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d115      	bne.n	80012a2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128c:	2b00      	cmp	r3, #0
 800128e:	d026      	beq.n	80012de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001294:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001298:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012a0:	e01d      	b.n	80012de <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a2f      	ldr	r2, [pc, #188]	; (8001370 <HAL_ADC_Start+0x158>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d004      	beq.n	80012c2 <HAL_ADC_Start+0xaa>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a2b      	ldr	r2, [pc, #172]	; (800136c <HAL_ADC_Start+0x154>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10d      	bne.n	80012de <HAL_ADC_Start+0xc6>
 80012c2:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_ADC_Start+0x158>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d007      	beq.n	80012de <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f023 0206 	bic.w	r2, r3, #6
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	62da      	str	r2, [r3, #44]	; 0x2c
 80012f6:	e002      	b.n	80012fe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2200      	movs	r2, #0
 80012fc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0202 	mvn.w	r2, #2
 800130e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800131a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800131e:	d113      	bne.n	8001348 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001324:	4a11      	ldr	r2, [pc, #68]	; (800136c <HAL_ADC_Start+0x154>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d105      	bne.n	8001336 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_ADC_Start+0x158>)
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001332:	2b00      	cmp	r3, #0
 8001334:	d108      	bne.n	8001348 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689a      	ldr	r2, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	e00c      	b.n	8001362 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689a      	ldr	r2, [r3, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	e003      	b.n	8001362 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3710      	adds	r7, #16
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40012800 	.word	0x40012800
 8001370:	40012400 	.word	0x40012400

08001374 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137c:	2300      	movs	r3, #0
 800137e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001386:	2b01      	cmp	r3, #1
 8001388:	d101      	bne.n	800138e <HAL_ADC_Stop+0x1a>
 800138a:	2302      	movs	r3, #2
 800138c:	e01a      	b.n	80013c4 <HAL_ADC_Stop+0x50>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2201      	movs	r2, #1
 8001392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f000 fb4e 	bl	8001a38 <ADC_ConversionStop_Disable>
 800139c:	4603      	mov	r3, r0
 800139e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d109      	bne.n	80013ba <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3710      	adds	r7, #16
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}

080013cc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b087      	sub	sp, #28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80013e2:	f7ff fe37 	bl	8001054 <HAL_GetTick>
 80013e6:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00b      	beq.n	800140e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fa:	f043 0220 	orr.w	r2, r3, #32
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e0d3      	b.n	80015b6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d131      	bne.n	8001480 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001422:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001426:	2b00      	cmp	r3, #0
 8001428:	d12a      	bne.n	8001480 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800142a:	e021      	b.n	8001470 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001432:	d01d      	beq.n	8001470 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d007      	beq.n	800144a <HAL_ADC_PollForConversion+0x7e>
 800143a:	f7ff fe0b 	bl	8001054 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d212      	bcs.n	8001470 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10b      	bne.n	8001470 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145c:	f043 0204 	orr.w	r2, r3, #4
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e0a2      	b.n	80015b6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0d6      	beq.n	800142c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800147e:	e070      	b.n	8001562 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001480:	4b4f      	ldr	r3, [pc, #316]	; (80015c0 <HAL_ADC_PollForConversion+0x1f4>)
 8001482:	681c      	ldr	r4, [r3, #0]
 8001484:	2002      	movs	r0, #2
 8001486:	f001 fb73 	bl	8002b70 <HAL_RCCEx_GetPeriphCLKFreq>
 800148a:	4603      	mov	r3, r0
 800148c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6919      	ldr	r1, [r3, #16]
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_ADC_PollForConversion+0x1f8>)
 8001498:	400b      	ands	r3, r1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x104>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68d9      	ldr	r1, [r3, #12]
 80014a4:	4b48      	ldr	r3, [pc, #288]	; (80015c8 <HAL_ADC_PollForConversion+0x1fc>)
 80014a6:	400b      	ands	r3, r1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_ADC_PollForConversion+0x104>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6919      	ldr	r1, [r3, #16]
 80014b2:	4b46      	ldr	r3, [pc, #280]	; (80015cc <HAL_ADC_PollForConversion+0x200>)
 80014b4:	400b      	ands	r3, r1
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <HAL_ADC_PollForConversion+0x100>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	68d9      	ldr	r1, [r3, #12]
 80014c0:	4b43      	ldr	r3, [pc, #268]	; (80015d0 <HAL_ADC_PollForConversion+0x204>)
 80014c2:	400b      	ands	r3, r1
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_PollForConversion+0x100>
 80014c8:	2314      	movs	r3, #20
 80014ca:	e020      	b.n	800150e <HAL_ADC_PollForConversion+0x142>
 80014cc:	2329      	movs	r3, #41	; 0x29
 80014ce:	e01e      	b.n	800150e <HAL_ADC_PollForConversion+0x142>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6919      	ldr	r1, [r3, #16]
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <HAL_ADC_PollForConversion+0x200>)
 80014d8:	400b      	ands	r3, r1
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d106      	bne.n	80014ec <HAL_ADC_PollForConversion+0x120>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	68d9      	ldr	r1, [r3, #12]
 80014e4:	4b3a      	ldr	r3, [pc, #232]	; (80015d0 <HAL_ADC_PollForConversion+0x204>)
 80014e6:	400b      	ands	r3, r1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00d      	beq.n	8001508 <HAL_ADC_PollForConversion+0x13c>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6919      	ldr	r1, [r3, #16]
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <HAL_ADC_PollForConversion+0x208>)
 80014f4:	400b      	ands	r3, r1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d108      	bne.n	800150c <HAL_ADC_PollForConversion+0x140>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	68d9      	ldr	r1, [r3, #12]
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <HAL_ADC_PollForConversion+0x208>)
 8001502:	400b      	ands	r3, r1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_ADC_PollForConversion+0x140>
 8001508:	2354      	movs	r3, #84	; 0x54
 800150a:	e000      	b.n	800150e <HAL_ADC_PollForConversion+0x142>
 800150c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800150e:	fb02 f303 	mul.w	r3, r2, r3
 8001512:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001514:	e021      	b.n	800155a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151c:	d01a      	beq.n	8001554 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d007      	beq.n	8001534 <HAL_ADC_PollForConversion+0x168>
 8001524:	f7ff fd96 	bl	8001054 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	429a      	cmp	r2, r3
 8001532:	d20f      	bcs.n	8001554 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	429a      	cmp	r2, r3
 800153a:	d90b      	bls.n	8001554 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	f043 0204 	orr.w	r2, r3, #4
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e030      	b.n	80015b6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	3301      	adds	r3, #1
 8001558:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	429a      	cmp	r2, r3
 8001560:	d8d9      	bhi.n	8001516 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f06f 0212 	mvn.w	r2, #18
 800156a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001570:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001582:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001586:	d115      	bne.n	80015b4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800158c:	2b00      	cmp	r3, #0
 800158e:	d111      	bne.n	80015b4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001594:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ac:	f043 0201 	orr.w	r2, r3, #1
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	371c      	adds	r7, #28
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd90      	pop	{r4, r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000
 80015c4:	24924924 	.word	0x24924924
 80015c8:	00924924 	.word	0x00924924
 80015cc:	12492492 	.word	0x12492492
 80015d0:	00492492 	.word	0x00492492
 80015d4:	00249249 	.word	0x00249249

080015d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
=======
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
<<<<<<< HEAD
  /* Process locked */
  __HAL_LOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Start+0x1a>
 8001082:	2302      	movs	r3, #2
 8001084:	e098      	b.n	80011b8 <HAL_ADC_Start+0x14c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fad0 	bl	8001634 <ADC_Enable>
 8001094:	4603      	mov	r3, r0
 8001096:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001098:	7bfb      	ldrb	r3, [r7, #15]
 800109a:	2b00      	cmp	r3, #0
 800109c:	f040 8087 	bne.w	80011ae <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010a8:	f023 0301 	bic.w	r3, r3, #1
 80010ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a41      	ldr	r2, [pc, #260]	; (80011c0 <HAL_ADC_Start+0x154>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d105      	bne.n	80010ca <HAL_ADC_Start+0x5e>
 80010be:	4b41      	ldr	r3, [pc, #260]	; (80011c4 <HAL_ADC_Start+0x158>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d115      	bne.n	80010f6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d026      	beq.n	8001132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f4:	e01d      	b.n	8001132 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a2f      	ldr	r2, [pc, #188]	; (80011c4 <HAL_ADC_Start+0x158>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d004      	beq.n	8001116 <HAL_ADC_Start+0xaa>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <HAL_ADC_Start+0x154>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10d      	bne.n	8001132 <HAL_ADC_Start+0xc6>
 8001116:	4b2b      	ldr	r3, [pc, #172]	; (80011c4 <HAL_ADC_Start+0x158>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001126:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800112a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d006      	beq.n	800114c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001142:	f023 0206 	bic.w	r2, r3, #6
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62da      	str	r2, [r3, #44]	; 0x2c
 800114a:	e002      	b.n	8001152 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f06f 0202 	mvn.w	r2, #2
 8001162:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800116e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001172:	d113      	bne.n	800119c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001178:	4a11      	ldr	r2, [pc, #68]	; (80011c0 <HAL_ADC_Start+0x154>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d105      	bne.n	800118a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <HAL_ADC_Start+0x158>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001186:	2b00      	cmp	r3, #0
 8001188:	d108      	bne.n	800119c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	e00c      	b.n	80011b6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689a      	ldr	r2, [r3, #8]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	e003      	b.n	80011b6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80011b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40012800 	.word	0x40012800
 80011c4:	40012400 	.word	0x40012400

080011c8 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Stop+0x1a>
 80011de:	2302      	movs	r3, #2
 80011e0:	e01a      	b.n	8001218 <HAL_ADC_Stop+0x50>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f000 fa7c 	bl	80016e8 <ADC_ConversionStop_Disable>
 80011f0:	4603      	mov	r3, r0
 80011f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001202:	f023 0301 	bic.w	r3, r3, #1
 8001206:	f043 0201 	orr.w	r2, r3, #1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2200      	movs	r2, #0
 8001212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001216:	7bfb      	ldrb	r3, [r7, #15]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b087      	sub	sp, #28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001236:	f7ff fe13 	bl	8000e60 <HAL_GetTick>
 800123a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	f043 0220 	orr.w	r2, r3, #32
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0d3      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126c:	2b00      	cmp	r3, #0
 800126e:	d131      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800127a:	2b00      	cmp	r3, #0
 800127c:	d12a      	bne.n	80012d4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800127e:	e021      	b.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001286:	d01d      	beq.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_ADC_PollForConversion+0x7e>
 800128e:	f7ff fde7 	bl	8000e60 <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d212      	bcs.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d10b      	bne.n	80012c4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012b0:	f043 0204 	orr.w	r2, r3, #4
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e0a2      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0d6      	beq.n	8001280 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012d2:	e070      	b.n	80013b6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80012d4:	4b4f      	ldr	r3, [pc, #316]	; (8001414 <HAL_ADC_PollForConversion+0x1f4>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	2002      	movs	r0, #2
 80012da:	f001 fa99 	bl	8002810 <HAL_RCCEx_GetPeriphCLKFreq>
 80012de:	4603      	mov	r3, r0
 80012e0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6919      	ldr	r1, [r3, #16]
 80012ea:	4b4b      	ldr	r3, [pc, #300]	; (8001418 <HAL_ADC_PollForConversion+0x1f8>)
 80012ec:	400b      	ands	r3, r1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d118      	bne.n	8001324 <HAL_ADC_PollForConversion+0x104>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	68d9      	ldr	r1, [r3, #12]
 80012f8:	4b48      	ldr	r3, [pc, #288]	; (800141c <HAL_ADC_PollForConversion+0x1fc>)
 80012fa:	400b      	ands	r3, r1
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_ADC_PollForConversion+0x104>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6919      	ldr	r1, [r3, #16]
 8001306:	4b46      	ldr	r3, [pc, #280]	; (8001420 <HAL_ADC_PollForConversion+0x200>)
 8001308:	400b      	ands	r3, r1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <HAL_ADC_PollForConversion+0x100>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	68d9      	ldr	r1, [r3, #12]
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_ADC_PollForConversion+0x204>)
 8001316:	400b      	ands	r3, r1
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_ADC_PollForConversion+0x100>
 800131c:	2314      	movs	r3, #20
 800131e:	e020      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001320:	2329      	movs	r3, #41	; 0x29
 8001322:	e01e      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	6919      	ldr	r1, [r3, #16]
 800132a:	4b3d      	ldr	r3, [pc, #244]	; (8001420 <HAL_ADC_PollForConversion+0x200>)
 800132c:	400b      	ands	r3, r1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d106      	bne.n	8001340 <HAL_ADC_PollForConversion+0x120>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	68d9      	ldr	r1, [r3, #12]
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <HAL_ADC_PollForConversion+0x204>)
 800133a:	400b      	ands	r3, r1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d00d      	beq.n	800135c <HAL_ADC_PollForConversion+0x13c>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6919      	ldr	r1, [r3, #16]
 8001346:	4b38      	ldr	r3, [pc, #224]	; (8001428 <HAL_ADC_PollForConversion+0x208>)
 8001348:	400b      	ands	r3, r1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d108      	bne.n	8001360 <HAL_ADC_PollForConversion+0x140>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	68d9      	ldr	r1, [r3, #12]
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <HAL_ADC_PollForConversion+0x208>)
 8001356:	400b      	ands	r3, r1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_ADC_PollForConversion+0x140>
 800135c:	2354      	movs	r3, #84	; 0x54
 800135e:	e000      	b.n	8001362 <HAL_ADC_PollForConversion+0x142>
 8001360:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001362:	fb02 f303 	mul.w	r3, r2, r3
 8001366:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001368:	e021      	b.n	80013ae <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001370:	d01a      	beq.n	80013a8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d007      	beq.n	8001388 <HAL_ADC_PollForConversion+0x168>
 8001378:	f7ff fd72 	bl	8000e60 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	683a      	ldr	r2, [r7, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d20f      	bcs.n	80013a8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	429a      	cmp	r2, r3
 800138e:	d90b      	bls.n	80013a8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e030      	b.n	800140a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	3301      	adds	r3, #1
 80013ac:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d8d9      	bhi.n	800136a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f06f 0212 	mvn.w	r2, #18
 80013be:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80013d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80013da:	d115      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d111      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001400:	f043 0201 	orr.w	r2, r3, #1
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	bd90      	pop	{r4, r7, pc}
 8001412:	bf00      	nop
 8001414:	20000004 	.word	0x20000004
 8001418:	24924924 	.word	0x24924924
 800141c:	00924924 	.word	0x00924924
 8001420:	12492492 	.word	0x12492492
 8001424:	00492492 	.word	0x00492492
 8001428:	00249249 	.word	0x00249249

0800142c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
=======
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	f003 0320 	and.w	r3, r3, #32
 800160e:	2b00      	cmp	r3, #0
 8001610:	d03e      	beq.n	8001690 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d039      	beq.n	8001690 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	d105      	bne.n	8001634 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800163e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001642:	d11d      	bne.n	8001680 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001648:	2b00      	cmp	r3, #0
 800164a:	d119      	bne.n	8001680 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	685a      	ldr	r2, [r3, #4]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f022 0220 	bic.w	r2, r2, #32
 800165a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f000 f874 	bl	800176e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f06f 0212 	mvn.w	r2, #18
 800168e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001696:	2b00      	cmp	r3, #0
 8001698:	d04d      	beq.n	8001736 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d048      	beq.n	8001736 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d105      	bne.n	80016bc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80016c6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80016ca:	d012      	beq.n	80016f2 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d125      	bne.n	8001726 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80016e4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016e8:	d11d      	bne.n	8001726 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d119      	bne.n	8001726 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001700:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001716:	2b00      	cmp	r3, #0
 8001718:	d105      	bne.n	8001726 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	f043 0201 	orr.w	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 f9c7 	bl	8001aba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f06f 020c 	mvn.w	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173c:	2b00      	cmp	r3, #0
 800173e:	d012      	beq.n	8001766 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00d      	beq.n	8001766 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f812 	bl	8001780 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0201 	mvn.w	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <HAL_ADC_ConfigChannel>:
=======
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
	...

08001794 <HAL_ADC_ConfigChannel>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
<<<<<<< HEAD
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
=======
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800179e:	2300      	movs	r3, #0
 80017a0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
<<<<<<< HEAD
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x20>
 8001460:	2302      	movs	r3, #2
 8001462:	e0dc      	b.n	800161e <HAL_ADC_ConfigChannel+0x1da>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
=======
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x20>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e0dc      	b.n	800196e <HAL_ADC_ConfigChannel+0x1da>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
<<<<<<< HEAD
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b06      	cmp	r3, #6
 8001472:	d81c      	bhi.n	80014ae <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685a      	ldr	r2, [r3, #4]
 800147e:	4613      	mov	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	3b05      	subs	r3, #5
 8001486:	221f      	movs	r2, #31
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	4019      	ands	r1, r3
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685a      	ldr	r2, [r3, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	4413      	add	r3, r2
 800149e:	3b05      	subs	r3, #5
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	; 0x34
 80014ac:	e03c      	b.n	8001528 <HAL_ADC_ConfigChannel+0xe4>
=======
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b06      	cmp	r3, #6
 80017c2:	d81c      	bhi.n	80017fe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b05      	subs	r3, #5
 80017d6:	221f      	movs	r2, #31
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4019      	ands	r1, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	6818      	ldr	r0, [r3, #0]
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b05      	subs	r3, #5
 80017f0:	fa00 f203 	lsl.w	r2, r0, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	430a      	orrs	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
 80017fc:	e03c      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
<<<<<<< HEAD
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b0c      	cmp	r3, #12
 80014b4:	d81c      	bhi.n	80014f0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	4413      	add	r3, r2
 80014c6:	3b23      	subs	r3, #35	; 0x23
 80014c8:	221f      	movs	r2, #31
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4019      	ands	r1, r3
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	4413      	add	r3, r2
 80014e0:	3b23      	subs	r3, #35	; 0x23
 80014e2:	fa00 f203 	lsl.w	r2, r0, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	430a      	orrs	r2, r1
 80014ec:	631a      	str	r2, [r3, #48]	; 0x30
 80014ee:	e01b      	b.n	8001528 <HAL_ADC_ConfigChannel+0xe4>
=======
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b0c      	cmp	r3, #12
 8001804:	d81c      	bhi.n	8001840 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b23      	subs	r3, #35	; 0x23
 8001818:	221f      	movs	r2, #31
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	4019      	ands	r1, r3
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	3b23      	subs	r3, #35	; 0x23
 8001832:	fa00 f203 	lsl.w	r2, r0, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	e01b      	b.n	8001878 <HAL_ADC_ConfigChannel+0xe4>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
<<<<<<< HEAD
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685a      	ldr	r2, [r3, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	3b41      	subs	r3, #65	; 0x41
 8001502:	221f      	movs	r2, #31
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	4019      	ands	r1, r3
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	6818      	ldr	r0, [r3, #0]
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b41      	subs	r3, #65	; 0x41
 800151c:	fa00 f203 	lsl.w	r2, r0, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	62da      	str	r2, [r3, #44]	; 0x2c
=======
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	4613      	mov	r3, r2
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	4413      	add	r3, r2
 8001850:	3b41      	subs	r3, #65	; 0x41
 8001852:	221f      	movs	r2, #31
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	4019      	ands	r1, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	3b41      	subs	r3, #65	; 0x41
 800186c:	fa00 f203 	lsl.w	r2, r0, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	62da      	str	r2, [r3, #44]	; 0x2c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
<<<<<<< HEAD
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d91c      	bls.n	800156a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68d9      	ldr	r1, [r3, #12]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	3b1e      	subs	r3, #30
 8001542:	2207      	movs	r2, #7
 8001544:	fa02 f303 	lsl.w	r3, r2, r3
 8001548:	43db      	mvns	r3, r3
 800154a:	4019      	ands	r1, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	6898      	ldr	r0, [r3, #8]
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681a      	ldr	r2, [r3, #0]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	3b1e      	subs	r3, #30
 800155c:	fa00 f203 	lsl.w	r2, r0, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	60da      	str	r2, [r3, #12]
 8001568:	e019      	b.n	800159e <HAL_ADC_ConfigChannel+0x15a>
=======
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b09      	cmp	r3, #9
 800187e:	d91c      	bls.n	80018ba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	68d9      	ldr	r1, [r3, #12]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	4019      	ands	r1, r3
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	6898      	ldr	r0, [r3, #8]
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4413      	add	r3, r2
 80018aa:	3b1e      	subs	r3, #30
 80018ac:	fa00 f203 	lsl.w	r2, r0, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	430a      	orrs	r2, r1
 80018b6:	60da      	str	r2, [r3, #12]
 80018b8:	e019      	b.n	80018ee <HAL_ADC_ConfigChannel+0x15a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
<<<<<<< HEAD
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	6919      	ldr	r1, [r3, #16]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	2207      	movs	r2, #7
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	4019      	ands	r1, r3
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	fa00 f203 	lsl.w	r2, r0, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	430a      	orrs	r2, r1
 800159c:	611a      	str	r2, [r3, #16]
=======
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6919      	ldr	r1, [r3, #16]
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4613      	mov	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4413      	add	r3, r2
 80018ca:	2207      	movs	r2, #7
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	43db      	mvns	r3, r3
 80018d2:	4019      	ands	r1, r3
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	6898      	ldr	r0, [r3, #8]
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	fa00 f203 	lsl.w	r2, r0, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
<<<<<<< HEAD
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b10      	cmp	r3, #16
 80015a4:	d003      	beq.n	80015ae <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015aa:	2b11      	cmp	r3, #17
 80015ac:	d132      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
=======
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d003      	beq.n	80018fe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018fa:	2b11      	cmp	r3, #17
 80018fc:	d132      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
<<<<<<< HEAD
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1d      	ldr	r2, [pc, #116]	; (8001628 <HAL_ADC_ConfigChannel+0x1e4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d125      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d126      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80015d4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	d11a      	bne.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
=======
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_ADC_ConfigChannel+0x1e4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d125      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d126      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001924:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b10      	cmp	r3, #16
 800192c:	d11a      	bne.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_ADC_ConfigChannel+0x1e8>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <HAL_ADC_ConfigChannel+0x1ec>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	0c9a      	lsrs	r2, r3, #18
 80015ea:	4613      	mov	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4413      	add	r3, r2
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015f4:	e002      	b.n	80015fc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f9      	bne.n	80015f6 <HAL_ADC_ConfigChannel+0x1b2>
 8001602:	e007      	b.n	8001614 <HAL_ADC_ConfigChannel+0x1d0>
=======
 800192e:	4b13      	ldr	r3, [pc, #76]	; (800197c <HAL_ADC_ConfigChannel+0x1e8>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a13      	ldr	r2, [pc, #76]	; (8001980 <HAL_ADC_ConfigChannel+0x1ec>)
 8001934:	fba2 2303 	umull	r2, r3, r2, r3
 8001938:	0c9a      	lsrs	r2, r3, #18
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001944:	e002      	b.n	800194c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f9      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x1b2>
 8001952:	e007      	b.n	8001964 <HAL_ADC_ConfigChannel+0x1d0>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
<<<<<<< HEAD
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001608:	f043 0220 	orr.w	r2, r3, #32
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
=======
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	f043 0220 	orr.w	r2, r3, #32
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	73fb      	strb	r3, [r7, #15]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
<<<<<<< HEAD
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800161c:	7bfb      	ldrb	r3, [r7, #15]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	40012400 	.word	0x40012400
 800162c:	20000004 	.word	0x20000004
 8001630:	431bde83 	.word	0x431bde83

08001634 <ADC_Enable>:
=======
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800196c:	7bfb      	ldrb	r3, [r7, #15]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3714      	adds	r7, #20
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr
 8001978:	40012400 	.word	0x40012400
 800197c:	20000000 	.word	0x20000000
 8001980:	431bde83 	.word	0x431bde83

08001984 <ADC_Enable>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	60bb      	str	r3, [r7, #8]
=======
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
<<<<<<< HEAD
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b01      	cmp	r3, #1
 8001650:	d040      	beq.n	80016d4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689a      	ldr	r2, [r3, #8]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	609a      	str	r2, [r3, #8]
=======
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d040      	beq.n	8001a24 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f042 0201 	orr.w	r2, r2, #1
 80019b0:	609a      	str	r2, [r3, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
<<<<<<< HEAD
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <ADC_Enable+0xac>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <ADC_Enable+0xb0>)
 8001668:	fba2 2303 	umull	r2, r3, r2, r3
 800166c:	0c9b      	lsrs	r3, r3, #18
 800166e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001670:	e002      	b.n	8001678 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	3b01      	subs	r3, #1
 8001676:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f9      	bne.n	8001672 <ADC_Enable+0x3e>
=======
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <ADC_Enable+0xac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a1f      	ldr	r2, [pc, #124]	; (8001a34 <ADC_Enable+0xb0>)
 80019b8:	fba2 2303 	umull	r2, r3, r2, r3
 80019bc:	0c9b      	lsrs	r3, r3, #18
 80019be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c0:	e002      	b.n	80019c8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f9      	bne.n	80019c2 <ADC_Enable+0x3e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
<<<<<<< HEAD
 800167e:	f7ff fbef 	bl	8000e60 <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001684:	e01f      	b.n	80016c6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001686:	f7ff fbeb 	bl	8000e60 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d918      	bls.n	80016c6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d011      	beq.n	80016c6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f043 0210 	orr.w	r2, r3, #16
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016b2:	f043 0201 	orr.w	r2, r3, #1
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e007      	b.n	80016d6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d1d8      	bne.n	8001686 <ADC_Enable+0x52>
=======
 80019ce:	f7ff fb41 	bl	8001054 <HAL_GetTick>
 80019d2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019d4:	e01f      	b.n	8001a16 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019d6:	f7ff fb3d 	bl	8001054 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d918      	bls.n	8001a16 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d011      	beq.n	8001a16 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f6:	f043 0210 	orr.w	r2, r3, #16
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e007      	b.n	8001a26 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d1d8      	bne.n	80019d6 <ADC_Enable+0x52>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000004 	.word	0x20000004
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <ADC_ConversionStop_Disable>:
=======
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3710      	adds	r7, #16
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000
 8001a34:	431bde83 	.word	0x431bde83

08001a38 <ADC_ConversionStop_Disable>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
<<<<<<< HEAD
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 0301 	and.w	r3, r3, #1
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d12e      	bne.n	8001760 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001712:	f7ff fba5 	bl	8000e60 <HAL_GetTick>
 8001716:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001718:	e01b      	b.n	8001752 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800171a:	f7ff fba1 	bl	8000e60 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d914      	bls.n	8001752 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b01      	cmp	r3, #1
 8001734:	d10d      	bne.n	8001752 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173a:	f043 0210 	orr.w	r2, r3, #16
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e007      	b.n	8001762 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b01      	cmp	r3, #1
 800175e:	d0dc      	beq.n	800171a <ADC_ConversionStop_Disable+0x32>
=======
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12e      	bne.n	8001ab0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a62:	f7ff faf7 	bl	8001054 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a68:	e01b      	b.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a6a:	f7ff faf3 	bl	8001054 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d914      	bls.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10d      	bne.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e007      	b.n	8001ab2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d0dc      	beq.n	8001a6a <ADC_ConversionStop_Disable+0x32>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
<<<<<<< HEAD
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <__NVIC_SetPriorityGrouping>:
=======
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <__NVIC_SetPriorityGrouping>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bc80      	pop	{r7}
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
=======
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae8:	4013      	ands	r3, r2
 8001aea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <__NVIC_SetPriorityGrouping+0x44>)
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	60d3      	str	r3, [r2, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <__NVIC_GetPriorityGrouping>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	; (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
=======
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b18:	4b04      	ldr	r3, [pc, #16]	; (8001b2c <__NVIC_GetPriorityGrouping+0x18>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	f003 0307 	and.w	r3, r3, #7
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_EnableIRQ>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4906      	ldr	r1, [pc, #24]	; (8001804 <__NVIC_EnableIRQ+0x34>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	e000e100 	.word	0xe000e100

08001808 <__NVIC_SetPriority>:
=======
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	db0b      	blt.n	8001b5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	f003 021f 	and.w	r2, r3, #31
 8001b48:	4906      	ldr	r1, [pc, #24]	; (8001b64 <__NVIC_EnableIRQ+0x34>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	095b      	lsrs	r3, r3, #5
 8001b50:	2001      	movs	r0, #1
 8001b52:	fa00 f202 	lsl.w	r2, r0, r2
 8001b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	6039      	str	r1, [r7, #0]
 8001812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	2b00      	cmp	r3, #0
 800181a:	db0a      	blt.n	8001832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	b2da      	uxtb	r2, r3
 8001820:	490c      	ldr	r1, [pc, #48]	; (8001854 <__NVIC_SetPriority+0x4c>)
 8001822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001826:	0112      	lsls	r2, r2, #4
 8001828:	b2d2      	uxtb	r2, r2
 800182a:	440b      	add	r3, r1
 800182c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001830:	e00a      	b.n	8001848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	b2da      	uxtb	r2, r3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <__NVIC_SetPriority+0x50>)
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	3b04      	subs	r3, #4
 8001840:	0112      	lsls	r2, r2, #4
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	440b      	add	r3, r1
 8001846:	761a      	strb	r2, [r3, #24]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000e100 	.word	0xe000e100
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <NVIC_EncodePriority>:
=======
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 800185c:	b480      	push	{r7}
 800185e:	b089      	sub	sp, #36	; 0x24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	61fb      	str	r3, [r7, #28]
=======
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f1c3 0307 	rsb	r3, r3, #7
 8001876:	2b04      	cmp	r3, #4
 8001878:	bf28      	it	cs
 800187a:	2304      	movcs	r3, #4
 800187c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3304      	adds	r3, #4
 8001882:	2b06      	cmp	r3, #6
 8001884:	d902      	bls.n	800188c <NVIC_EncodePriority+0x30>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3b03      	subs	r3, #3
 800188a:	e000      	b.n	800188e <NVIC_EncodePriority+0x32>
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	f04f 32ff 	mov.w	r2, #4294967295
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	401a      	ands	r2, r3
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a4:	f04f 31ff 	mov.w	r1, #4294967295
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	fa01 f303 	lsl.w	r3, r1, r3
 80018ae:	43d9      	mvns	r1, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b4:	4313      	orrs	r3, r2
         );
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3724      	adds	r7, #36	; 0x24
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr

080018c0 <SysTick_Config>:
=======
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bc80      	pop	{r7}
 8001c1e:	4770      	bx	lr

08001c20 <SysTick_Config>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	f7ff ff90 	bl	8001808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
=======
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295
 8001c44:	f7ff ff90 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
=======
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff2d 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
=======
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff2d 	bl	8001acc <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
=======
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 800192c:	f7ff ff42 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	68b9      	ldr	r1, [r7, #8]
 8001936:	6978      	ldr	r0, [r7, #20]
 8001938:	f7ff ff90 	bl	800185c <NVIC_EncodePriority>
 800193c:	4602      	mov	r2, r0
 800193e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001942:	4611      	mov	r1, r2
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff ff5f 	bl	8001808 <__NVIC_SetPriority>
}
 800194a:	bf00      	nop
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_NVIC_EnableIRQ>:
=======
 8001c8c:	f7ff ff42 	bl	8001b14 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff90 	bl	8001bbc <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5f 	bl	8001b68 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_NVIC_EnableIRQ>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8001952:	b580      	push	{r7, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
=======
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	4603      	mov	r3, r0
 8001cba:	71fb      	strb	r3, [r7, #7]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff35 	bl	80017d0 <__NVIC_EnableIRQ>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_SYSTICK_Config>:
=======
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff35 	bl	8001b30 <__NVIC_EnableIRQ>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	f7ff ffa2 	bl	80018c0 <SysTick_Config>
 800197c:	4603      	mov	r3, r0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_DMA_Abort>:
=======
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffa2 	bl	8001c20 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8001986:	b480      	push	{r7}
 8001988:	b085      	sub	sp, #20
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d008      	beq.n	80019b0 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2204      	movs	r2, #4
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e020      	b.n	80019f2 <HAL_DMA_Abort+0x6c>
=======
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e020      	b.n	8001d52 <HAL_DMA_Abort+0x6c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 020e 	bic.w	r2, r2, #14
 80019be:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	2101      	movs	r1, #1
 80019da:	fa01 f202 	lsl.w	r2, r1, r2
 80019de:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <HAL_DMA_Abort_IT>:
=======
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_DMA_Abort_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
<<<<<<< HEAD
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d005      	beq.n	8001a20 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2204      	movs	r2, #4
 8001a18:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e051      	b.n	8001ac4 <HAL_DMA_Abort_IT+0xc8>
=======
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d005      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e051      	b.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
<<<<<<< HEAD
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020e 	bic.w	r2, r2, #14
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a22      	ldr	r2, [pc, #136]	; (8001ad0 <HAL_DMA_Abort_IT+0xd4>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d029      	beq.n	8001a9e <HAL_DMA_Abort_IT+0xa2>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_DMA_Abort_IT+0xd8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d022      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x9e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a1f      	ldr	r2, [pc, #124]	; (8001ad8 <HAL_DMA_Abort_IT+0xdc>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d01a      	beq.n	8001a94 <HAL_DMA_Abort_IT+0x98>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a1e      	ldr	r2, [pc, #120]	; (8001adc <HAL_DMA_Abort_IT+0xe0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d012      	beq.n	8001a8e <HAL_DMA_Abort_IT+0x92>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a1c      	ldr	r2, [pc, #112]	; (8001ae0 <HAL_DMA_Abort_IT+0xe4>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00a      	beq.n	8001a88 <HAL_DMA_Abort_IT+0x8c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_DMA_Abort_IT+0xe8>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d102      	bne.n	8001a82 <HAL_DMA_Abort_IT+0x86>
 8001a7c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a80:	e00e      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001a86:	e00b      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a8c:	e008      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a92:	e005      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a98:	e002      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a9a:	2310      	movs	r3, #16
 8001a9c:	e000      	b.n	8001aa0 <HAL_DMA_Abort_IT+0xa4>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_DMA_Abort_IT+0xec>)
 8001aa2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	4798      	blx	r3
    } 
  }
  return status;
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40020008 	.word	0x40020008
 8001ad4:	4002001c 	.word	0x4002001c
 8001ad8:	40020030 	.word	0x40020030
 8001adc:	40020044 	.word	0x40020044
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	4002006c 	.word	0x4002006c
 8001ae8:	40020000 	.word	0x40020000

08001aec <HAL_GPIO_Init>:
=======
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 020e 	bic.w	r2, r2, #14
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a22      	ldr	r2, [pc, #136]	; (8001e30 <HAL_DMA_Abort_IT+0xd4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d029      	beq.n	8001dfe <HAL_DMA_Abort_IT+0xa2>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a21      	ldr	r2, [pc, #132]	; (8001e34 <HAL_DMA_Abort_IT+0xd8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d022      	beq.n	8001dfa <HAL_DMA_Abort_IT+0x9e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_DMA_Abort_IT+0xdc>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01a      	beq.n	8001df4 <HAL_DMA_Abort_IT+0x98>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_DMA_Abort_IT+0xe0>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d012      	beq.n	8001dee <HAL_DMA_Abort_IT+0x92>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1c      	ldr	r2, [pc, #112]	; (8001e40 <HAL_DMA_Abort_IT+0xe4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00a      	beq.n	8001de8 <HAL_DMA_Abort_IT+0x8c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1b      	ldr	r2, [pc, #108]	; (8001e44 <HAL_DMA_Abort_IT+0xe8>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d102      	bne.n	8001de2 <HAL_DMA_Abort_IT+0x86>
 8001ddc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001de0:	e00e      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001de6:	e00b      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001de8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001dec:	e008      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	e005      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df8:	e002      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dfa:	2310      	movs	r3, #16
 8001dfc:	e000      	b.n	8001e00 <HAL_DMA_Abort_IT+0xa4>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	4a11      	ldr	r2, [pc, #68]	; (8001e48 <HAL_DMA_Abort_IT+0xec>)
 8001e02:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d003      	beq.n	8001e24 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
    } 
  }
  return status;
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	40020008 	.word	0x40020008
 8001e34:	4002001c 	.word	0x4002001c
 8001e38:	40020030 	.word	0x40020030
 8001e3c:	40020044 	.word	0x40020044
 8001e40:	40020058 	.word	0x40020058
 8001e44:	4002006c 	.word	0x4002006c
 8001e48:	40020000 	.word	0x40020000

08001e4c <HAL_GPIO_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001aec:	b480      	push	{r7}
 8001aee:	b08b      	sub	sp, #44	; 0x2c
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
=======
 8001e4c:	b480      	push	{r7}
 8001e4e:	b08b      	sub	sp, #44	; 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
<<<<<<< HEAD
 8001afa:	2300      	movs	r3, #0
 8001afc:	623b      	str	r3, [r7, #32]
=======
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	623b      	str	r3, [r7, #32]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001afe:	e169      	b.n	8001dd4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b00:	2201      	movs	r2, #1
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	69fa      	ldr	r2, [r7, #28]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	f040 8158 	bne.w	8001dce <HAL_GPIO_Init+0x2e2>
=======
 8001e5e:	e169      	b.n	8002134 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e60:	2201      	movs	r2, #1
 8001e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8158 	bne.w	800212e <HAL_GPIO_Init+0x2e2>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
<<<<<<< HEAD
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	4a9a      	ldr	r2, [pc, #616]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d05e      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b28:	4a98      	ldr	r2, [pc, #608]	; (8001d8c <HAL_GPIO_Init+0x2a0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d875      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b2e:	4a98      	ldr	r2, [pc, #608]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d058      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b34:	4a96      	ldr	r2, [pc, #600]	; (8001d90 <HAL_GPIO_Init+0x2a4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d86f      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b3a:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d052      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b40:	4a94      	ldr	r2, [pc, #592]	; (8001d94 <HAL_GPIO_Init+0x2a8>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d869      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b46:	4a94      	ldr	r2, [pc, #592]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d04c      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a92      	ldr	r2, [pc, #584]	; (8001d98 <HAL_GPIO_Init+0x2ac>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d863      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b52:	4a92      	ldr	r2, [pc, #584]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d046      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
 8001b58:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_GPIO_Init+0x2b0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d85d      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b5e:	2b12      	cmp	r3, #18
 8001b60:	d82a      	bhi.n	8001bb8 <HAL_GPIO_Init+0xcc>
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d859      	bhi.n	8001c1a <HAL_GPIO_Init+0x12e>
 8001b66:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <HAL_GPIO_Init+0x80>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001be7 	.word	0x08001be7
 8001b70:	08001bc1 	.word	0x08001bc1
 8001b74:	08001bd3 	.word	0x08001bd3
 8001b78:	08001c15 	.word	0x08001c15
 8001b7c:	08001c1b 	.word	0x08001c1b
 8001b80:	08001c1b 	.word	0x08001c1b
 8001b84:	08001c1b 	.word	0x08001c1b
 8001b88:	08001c1b 	.word	0x08001c1b
 8001b8c:	08001c1b 	.word	0x08001c1b
 8001b90:	08001c1b 	.word	0x08001c1b
 8001b94:	08001c1b 	.word	0x08001c1b
 8001b98:	08001c1b 	.word	0x08001c1b
 8001b9c:	08001c1b 	.word	0x08001c1b
 8001ba0:	08001c1b 	.word	0x08001c1b
 8001ba4:	08001c1b 	.word	0x08001c1b
 8001ba8:	08001c1b 	.word	0x08001c1b
 8001bac:	08001c1b 	.word	0x08001c1b
 8001bb0:	08001bc9 	.word	0x08001bc9
 8001bb4:	08001bdd 	.word	0x08001bdd
 8001bb8:	4a79      	ldr	r2, [pc, #484]	; (8001da0 <HAL_GPIO_Init+0x2b4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0xfa>
=======
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	4a9a      	ldr	r2, [pc, #616]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d05e      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001e88:	4a98      	ldr	r2, [pc, #608]	; (80020ec <HAL_GPIO_Init+0x2a0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d875      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001e8e:	4a98      	ldr	r2, [pc, #608]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d058      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001e94:	4a96      	ldr	r2, [pc, #600]	; (80020f0 <HAL_GPIO_Init+0x2a4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d86f      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001e9a:	4a96      	ldr	r2, [pc, #600]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d052      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001ea0:	4a94      	ldr	r2, [pc, #592]	; (80020f4 <HAL_GPIO_Init+0x2a8>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d869      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ea6:	4a94      	ldr	r2, [pc, #592]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d04c      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001eac:	4a92      	ldr	r2, [pc, #584]	; (80020f8 <HAL_GPIO_Init+0x2ac>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d863      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001eb2:	4a92      	ldr	r2, [pc, #584]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d046      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
 8001eb8:	4a90      	ldr	r2, [pc, #576]	; (80020fc <HAL_GPIO_Init+0x2b0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d85d      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ebe:	2b12      	cmp	r3, #18
 8001ec0:	d82a      	bhi.n	8001f18 <HAL_GPIO_Init+0xcc>
 8001ec2:	2b12      	cmp	r3, #18
 8001ec4:	d859      	bhi.n	8001f7a <HAL_GPIO_Init+0x12e>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <HAL_GPIO_Init+0x80>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f21 	.word	0x08001f21
 8001ed4:	08001f33 	.word	0x08001f33
 8001ed8:	08001f75 	.word	0x08001f75
 8001edc:	08001f7b 	.word	0x08001f7b
 8001ee0:	08001f7b 	.word	0x08001f7b
 8001ee4:	08001f7b 	.word	0x08001f7b
 8001ee8:	08001f7b 	.word	0x08001f7b
 8001eec:	08001f7b 	.word	0x08001f7b
 8001ef0:	08001f7b 	.word	0x08001f7b
 8001ef4:	08001f7b 	.word	0x08001f7b
 8001ef8:	08001f7b 	.word	0x08001f7b
 8001efc:	08001f7b 	.word	0x08001f7b
 8001f00:	08001f7b 	.word	0x08001f7b
 8001f04:	08001f7b 	.word	0x08001f7b
 8001f08:	08001f7b 	.word	0x08001f7b
 8001f0c:	08001f7b 	.word	0x08001f7b
 8001f10:	08001f29 	.word	0x08001f29
 8001f14:	08001f3d 	.word	0x08001f3d
 8001f18:	4a79      	ldr	r2, [pc, #484]	; (8002100 <HAL_GPIO_Init+0x2b4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0xfa>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
<<<<<<< HEAD
 8001bbe:	e02c      	b.n	8001c1a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e029      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e024      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	3308      	adds	r3, #8
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e01f      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	330c      	adds	r3, #12
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e01a      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d102      	bne.n	8001bf4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bee:	2304      	movs	r3, #4
 8001bf0:	623b      	str	r3, [r7, #32]
          break;
 8001bf2:	e013      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d105      	bne.n	8001c08 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	611a      	str	r2, [r3, #16]
          break;
 8001c06:	e009      	b.n	8001c1c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	615a      	str	r2, [r3, #20]
          break;
 8001c12:	e003      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
          break;
 8001c18:	e000      	b.n	8001c1c <HAL_GPIO_Init+0x130>
          break;
 8001c1a:	bf00      	nop
=======
 8001f1e:	e02c      	b.n	8001f7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	623b      	str	r3, [r7, #32]
          break;
 8001f26:	e029      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	623b      	str	r3, [r7, #32]
          break;
 8001f30:	e024      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	3308      	adds	r3, #8
 8001f38:	623b      	str	r3, [r7, #32]
          break;
 8001f3a:	e01f      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	330c      	adds	r3, #12
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e01a      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	623b      	str	r3, [r7, #32]
          break;
 8001f52:	e013      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d105      	bne.n	8001f68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f5c:	2308      	movs	r3, #8
 8001f5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	611a      	str	r2, [r3, #16]
          break;
 8001f66:	e009      	b.n	8001f7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f68:	2308      	movs	r3, #8
 8001f6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	69fa      	ldr	r2, [r7, #28]
 8001f70:	615a      	str	r2, [r3, #20]
          break;
 8001f72:	e003      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f74:	2300      	movs	r3, #0
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e000      	b.n	8001f7c <HAL_GPIO_Init+0x130>
          break;
 8001f7a:	bf00      	nop
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
<<<<<<< HEAD
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	2bff      	cmp	r3, #255	; 0xff
 8001c20:	d801      	bhi.n	8001c26 <HAL_GPIO_Init+0x13a>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	e001      	b.n	8001c2a <HAL_GPIO_Init+0x13e>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2bff      	cmp	r3, #255	; 0xff
 8001c30:	d802      	bhi.n	8001c38 <HAL_GPIO_Init+0x14c>
 8001c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x152>
 8001c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c3a:	3b08      	subs	r3, #8
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	210f      	movs	r1, #15
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	401a      	ands	r2, r3
 8001c50:	6a39      	ldr	r1, [r7, #32]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	601a      	str	r2, [r3, #0]
=======
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2bff      	cmp	r3, #255	; 0xff
 8001f80:	d801      	bhi.n	8001f86 <HAL_GPIO_Init+0x13a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	e001      	b.n	8001f8a <HAL_GPIO_Init+0x13e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	3304      	adds	r3, #4
 8001f8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2bff      	cmp	r3, #255	; 0xff
 8001f90:	d802      	bhi.n	8001f98 <HAL_GPIO_Init+0x14c>
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	e002      	b.n	8001f9e <HAL_GPIO_Init+0x152>
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	3b08      	subs	r3, #8
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	210f      	movs	r1, #15
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	401a      	ands	r2, r3
 8001fb0:	6a39      	ldr	r1, [r7, #32]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	601a      	str	r2, [r3, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 80b1 	beq.w	8001dce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c6c:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c72:	f043 0301 	orr.w	r3, r3, #1
 8001c76:	6193      	str	r3, [r2, #24]
 8001c78:	4b4a      	ldr	r3, [pc, #296]	; (8001da4 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c84:	4a48      	ldr	r2, [pc, #288]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	089b      	lsrs	r3, r3, #2
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c90:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a40      	ldr	r2, [pc, #256]	; (8001dac <HAL_GPIO_Init+0x2c0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d013      	beq.n	8001cd8 <HAL_GPIO_Init+0x1ec>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a3f      	ldr	r2, [pc, #252]	; (8001db0 <HAL_GPIO_Init+0x2c4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_GPIO_Init+0x1e8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a3e      	ldr	r2, [pc, #248]	; (8001db4 <HAL_GPIO_Init+0x2c8>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d007      	beq.n	8001cd0 <HAL_GPIO_Init+0x1e4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <HAL_GPIO_Init+0x2cc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d101      	bne.n	8001ccc <HAL_GPIO_Init+0x1e0>
 8001cc8:	2303      	movs	r3, #3
 8001cca:	e006      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001ccc:	2304      	movs	r3, #4
 8001cce:	e004      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	e002      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e000      	b.n	8001cda <HAL_GPIO_Init+0x1ee>
 8001cd8:	2300      	movs	r3, #0
 8001cda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cdc:	f002 0203 	and.w	r2, r2, #3
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	4093      	lsls	r3, r2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cea:	492f      	ldr	r1, [pc, #188]	; (8001da8 <HAL_GPIO_Init+0x2bc>)
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
=======
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80b1 	beq.w	800212e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	4a4c      	ldr	r2, [pc, #304]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6193      	str	r3, [r2, #24]
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	; (8002104 <HAL_GPIO_Init+0x2b8>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f003 0301 	and.w	r3, r3, #1
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fe4:	4a48      	ldr	r2, [pc, #288]	; (8002108 <HAL_GPIO_Init+0x2bc>)
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	089b      	lsrs	r3, r3, #2
 8001fea:	3302      	adds	r3, #2
 8001fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	220f      	movs	r2, #15
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	4a40      	ldr	r2, [pc, #256]	; (800210c <HAL_GPIO_Init+0x2c0>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d013      	beq.n	8002038 <HAL_GPIO_Init+0x1ec>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a3f      	ldr	r2, [pc, #252]	; (8002110 <HAL_GPIO_Init+0x2c4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d00d      	beq.n	8002034 <HAL_GPIO_Init+0x1e8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a3e      	ldr	r2, [pc, #248]	; (8002114 <HAL_GPIO_Init+0x2c8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d007      	beq.n	8002030 <HAL_GPIO_Init+0x1e4>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a3d      	ldr	r2, [pc, #244]	; (8002118 <HAL_GPIO_Init+0x2cc>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_GPIO_Init+0x1e0>
 8002028:	2303      	movs	r3, #3
 800202a:	e006      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 800202c:	2304      	movs	r3, #4
 800202e:	e004      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002030:	2302      	movs	r3, #2
 8002032:	e002      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_GPIO_Init+0x1ee>
 8002038:	2300      	movs	r3, #0
 800203a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203c:	f002 0203 	and.w	r2, r2, #3
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	4093      	lsls	r3, r2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800204a:	492f      	ldr	r1, [pc, #188]	; (8002108 <HAL_GPIO_Init+0x2bc>)
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
<<<<<<< HEAD
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	492c      	ldr	r1, [pc, #176]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	608b      	str	r3, [r1, #8]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x234>
=======
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002064:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	492c      	ldr	r1, [pc, #176]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	608b      	str	r3, [r1, #8]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x234>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
<<<<<<< HEAD
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	4928      	ldr	r1, [pc, #160]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	608b      	str	r3, [r1, #8]
=======
 8002072:	4b2a      	ldr	r3, [pc, #168]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002074:	689a      	ldr	r2, [r3, #8]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4928      	ldr	r1, [pc, #160]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800207c:	4013      	ands	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
<<<<<<< HEAD
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d2c:	4b23      	ldr	r3, [pc, #140]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d2e:	68da      	ldr	r2, [r3, #12]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	60cb      	str	r3, [r1, #12]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x25c>
=======
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800208c:	4b23      	ldr	r3, [pc, #140]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	4922      	ldr	r1, [pc, #136]	; (800211c <HAL_GPIO_Init+0x2d0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	60cb      	str	r3, [r1, #12]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x25c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
<<<<<<< HEAD
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d3c:	68da      	ldr	r2, [r3, #12]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	491e      	ldr	r1, [pc, #120]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	60cb      	str	r3, [r1, #12]
=======
 800209a:	4b20      	ldr	r3, [pc, #128]	; (800211c <HAL_GPIO_Init+0x2d0>)
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	491e      	ldr	r1, [pc, #120]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	60cb      	str	r3, [r1, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
<<<<<<< HEAD
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d006      	beq.n	8001d62 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d56:	685a      	ldr	r2, [r3, #4]
 8001d58:	4918      	ldr	r1, [pc, #96]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
 8001d60:	e006      	b.n	8001d70 <HAL_GPIO_Init+0x284>
=======
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	4918      	ldr	r1, [pc, #96]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	604b      	str	r3, [r1, #4]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x284>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
<<<<<<< HEAD
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	4914      	ldr	r1, [pc, #80]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
=======
 80020c2:	4b16      	ldr	r3, [pc, #88]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4914      	ldr	r1, [pc, #80]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
<<<<<<< HEAD
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d021      	beq.n	8001dc0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <HAL_GPIO_Init+0x2d0>)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e021      	b.n	8001dce <HAL_GPIO_Init+0x2e2>
 8001d8a:	bf00      	nop
 8001d8c:	10320000 	.word	0x10320000
 8001d90:	10310000 	.word	0x10310000
 8001d94:	10220000 	.word	0x10220000
 8001d98:	10210000 	.word	0x10210000
 8001d9c:	10120000 	.word	0x10120000
 8001da0:	10110000 	.word	0x10110000
 8001da4:	40021000 	.word	0x40021000
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40010800 	.word	0x40010800
 8001db0:	40010c00 	.word	0x40010c00
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40011400 	.word	0x40011400
 8001dbc:	40010400 	.word	0x40010400
=======
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d021      	beq.n	8002120 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020dc:	4b0f      	ldr	r3, [pc, #60]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	490e      	ldr	r1, [pc, #56]	; (800211c <HAL_GPIO_Init+0x2d0>)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e021      	b.n	800212e <HAL_GPIO_Init+0x2e2>
 80020ea:	bf00      	nop
 80020ec:	10320000 	.word	0x10320000
 80020f0:	10310000 	.word	0x10310000
 80020f4:	10220000 	.word	0x10220000
 80020f8:	10210000 	.word	0x10210000
 80020fc:	10120000 	.word	0x10120000
 8002100:	10110000 	.word	0x10110000
 8002104:	40021000 	.word	0x40021000
 8002108:	40010000 	.word	0x40010000
 800210c:	40010800 	.word	0x40010800
 8002110:	40010c00 	.word	0x40010c00
 8002114:	40011000 	.word	0x40011000
 8002118:	40011400 	.word	0x40011400
 800211c:	40010400 	.word	0x40010400
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
<<<<<<< HEAD
 8001dc0:	4b0b      	ldr	r3, [pc, #44]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	4909      	ldr	r1, [pc, #36]	; (8001df0 <HAL_GPIO_Init+0x304>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]
=======
 8002120:	4b0b      	ldr	r3, [pc, #44]	; (8002150 <HAL_GPIO_Init+0x304>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	43db      	mvns	r3, r3
 8002128:	4909      	ldr	r1, [pc, #36]	; (8002150 <HAL_GPIO_Init+0x304>)
 800212a:	4013      	ands	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }

	position++;
<<<<<<< HEAD
 8001dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	fa22 f303 	lsr.w	r3, r2, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f47f ae8e 	bne.w	8001b00 <HAL_GPIO_Init+0x14>
  }
}
 8001de4:	bf00      	nop
 8001de6:	bf00      	nop
 8001de8:	372c      	adds	r7, #44	; 0x2c
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr
 8001df0:	40010400 	.word	0x40010400

08001df4 <HAL_GPIO_ReadPin>:
=======
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	3301      	adds	r3, #1
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	f47f ae8e 	bne.w	8001e60 <HAL_GPIO_Init+0x14>
  }
}
 8002144:	bf00      	nop
 8002146:	bf00      	nop
 8002148:	372c      	adds	r7, #44	; 0x2c
 800214a:	46bd      	mov	sp, r7
 800214c:	bc80      	pop	{r7}
 800214e:	4770      	bx	lr
 8002150:	40010400 	.word	0x40010400

08002154 <HAL_GPIO_ReadPin>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	807b      	strh	r3, [r7, #2]
=======
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	460b      	mov	r3, r1
 800215e:	807b      	strh	r3, [r7, #2]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
<<<<<<< HEAD
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	887b      	ldrh	r3, [r7, #2]
 8001e06:	4013      	ands	r3, r2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d002      	beq.n	8001e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	e001      	b.n	8001e16 <HAL_GPIO_ReadPin+0x22>
=======
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689a      	ldr	r2, [r3, #8]
 8002164:	887b      	ldrh	r3, [r7, #2]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800216c:	2301      	movs	r3, #1
 800216e:	73fb      	strb	r3, [r7, #15]
 8002170:	e001      	b.n	8002176 <HAL_GPIO_ReadPin+0x22>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
<<<<<<< HEAD
 8001e12:	2300      	movs	r3, #0
 8001e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3714      	adds	r7, #20
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <HAL_GPIO_WritePin>:
=======
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3714      	adds	r7, #20
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_GPIO_WritePin>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001e22:	b480      	push	{r7}
 8001e24:	b083      	sub	sp, #12
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	807b      	strh	r3, [r7, #2]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	707b      	strb	r3, [r7, #1]
=======
 8002182:	b480      	push	{r7}
 8002184:	b083      	sub	sp, #12
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]
 800218e:	4613      	mov	r3, r2
 8002190:	707b      	strb	r3, [r7, #1]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001e32:	787b      	ldrb	r3, [r7, #1]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	611a      	str	r2, [r3, #16]
=======
 8002192:	787b      	ldrb	r3, [r7, #1]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002198:	887a      	ldrh	r2, [r7, #2]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
<<<<<<< HEAD
 8001e3e:	e003      	b.n	8001e48 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	041a      	lsls	r2, r3, #16
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	611a      	str	r2, [r3, #16]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <HAL_GPIO_TogglePin>:
=======
 800219e:	e003      	b.n	80021a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	041a      	lsls	r2, r3, #16
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	611a      	str	r2, [r3, #16]
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr

080021b2 <HAL_GPIO_TogglePin>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8001e52:	b480      	push	{r7}
 8001e54:	b085      	sub	sp, #20
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	807b      	strh	r3, [r7, #2]
=======
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
<<<<<<< HEAD
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e64:	887a      	ldrh	r2, [r7, #2]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	041a      	lsls	r2, r3, #16
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	400b      	ands	r3, r1
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bc80      	pop	{r7}
 8001e82:	4770      	bx	lr

08001e84 <HAL_RCC_OscConfig>:
=======
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021c4:	887a      	ldrh	r2, [r7, #2]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4013      	ands	r3, r2
 80021ca:	041a      	lsls	r2, r3, #16
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	400b      	ands	r3, r1
 80021d4:	431a      	orrs	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
}
 80021da:	bf00      	nop
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bc80      	pop	{r7}
 80021e2:	4770      	bx	lr

080021e4 <HAL_RCC_OscConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b086      	sub	sp, #24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
=======
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e272      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
=======
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e272      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 8087 	beq.w	8001fb2 <HAL_RCC_OscConfig+0x12e>
=======
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8087 	beq.w	8002312 <HAL_RCC_OscConfig+0x12e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
<<<<<<< HEAD
 8001ea4:	4b92      	ldr	r3, [pc, #584]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 030c 	and.w	r3, r3, #12
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d00c      	beq.n	8001eca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb0:	4b8f      	ldr	r3, [pc, #572]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 030c 	and.w	r3, r3, #12
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d112      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x5e>
 8001ebc:	4b8c      	ldr	r3, [pc, #560]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec8:	d10b      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eca:	4b89      	ldr	r3, [pc, #548]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d06c      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x12c>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d168      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e24c      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
=======
 8002204:	4b92      	ldr	r3, [pc, #584]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f003 030c 	and.w	r3, r3, #12
 800220c:	2b04      	cmp	r3, #4
 800220e:	d00c      	beq.n	800222a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002210:	4b8f      	ldr	r3, [pc, #572]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b08      	cmp	r3, #8
 800221a:	d112      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
 800221c:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002224:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002228:	d10b      	bne.n	8002242 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800222a:	4b89      	ldr	r3, [pc, #548]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d06c      	beq.n	8002310 <HAL_RCC_OscConfig+0x12c>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d168      	bne.n	8002310 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e24c      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eea:	d106      	bne.n	8001efa <HAL_RCC_OscConfig+0x76>
 8001eec:	4b80      	ldr	r3, [pc, #512]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a7f      	ldr	r2, [pc, #508]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef6:	6013      	str	r3, [r2, #0]
 8001ef8:	e02e      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10c      	bne.n	8001f1c <HAL_RCC_OscConfig+0x98>
 8001f02:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	4b78      	ldr	r3, [pc, #480]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a77      	ldr	r2, [pc, #476]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e01d      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f24:	d10c      	bne.n	8001f40 <HAL_RCC_OscConfig+0xbc>
 8001f26:	4b72      	ldr	r3, [pc, #456]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a71      	ldr	r2, [pc, #452]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	4b6f      	ldr	r3, [pc, #444]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a6e      	ldr	r2, [pc, #440]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	e00b      	b.n	8001f58 <HAL_RCC_OscConfig+0xd4>
 8001f40:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a6a      	ldr	r2, [pc, #424]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f4a:	6013      	str	r3, [r2, #0]
 8001f4c:	4b68      	ldr	r3, [pc, #416]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a67      	ldr	r2, [pc, #412]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f56:	6013      	str	r3, [r2, #0]
=======
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224a:	d106      	bne.n	800225a <HAL_RCC_OscConfig+0x76>
 800224c:	4b80      	ldr	r3, [pc, #512]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a7f      	ldr	r2, [pc, #508]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	e02e      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x98>
 8002262:	4b7b      	ldr	r3, [pc, #492]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a7a      	ldr	r2, [pc, #488]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b78      	ldr	r3, [pc, #480]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a77      	ldr	r2, [pc, #476]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002274:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e01d      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0xbc>
 8002286:	4b72      	ldr	r3, [pc, #456]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a71      	ldr	r2, [pc, #452]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800228c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b6f      	ldr	r3, [pc, #444]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a6e      	ldr	r2, [pc, #440]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e00b      	b.n	80022b8 <HAL_RCC_OscConfig+0xd4>
 80022a0:	4b6b      	ldr	r3, [pc, #428]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6a      	ldr	r2, [pc, #424]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b68      	ldr	r3, [pc, #416]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a67      	ldr	r2, [pc, #412]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b6:	6013      	str	r3, [r2, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
<<<<<<< HEAD
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d013      	beq.n	8001f88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7fe ff7e 	bl	8000e60 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f68:	f7fe ff7a 	bl	8000e60 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e200      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d0f0      	beq.n	8001f68 <HAL_RCC_OscConfig+0xe4>
 8001f86:	e014      	b.n	8001fb2 <HAL_RCC_OscConfig+0x12e>
=======
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d013      	beq.n	80022e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7fe fec8 	bl	8001054 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c8:	f7fe fec4 	bl	8001054 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e200      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	4b5d      	ldr	r3, [pc, #372]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCC_OscConfig+0xe4>
 80022e6:	e014      	b.n	8002312 <HAL_RCC_OscConfig+0x12e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001f88:	f7fe ff6a 	bl	8000e60 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f8e:	e008      	b.n	8001fa2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f90:	f7fe ff66 	bl	8000e60 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b64      	cmp	r3, #100	; 0x64
 8001f9c:	d901      	bls.n	8001fa2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e1ec      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	4b53      	ldr	r3, [pc, #332]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1f0      	bne.n	8001f90 <HAL_RCC_OscConfig+0x10c>
 8001fae:	e000      	b.n	8001fb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb0:	bf00      	nop
=======
 80022e8:	f7fe feb4 	bl	8001054 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022f0:	f7fe feb0 	bl	8001054 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b64      	cmp	r3, #100	; 0x64
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e1ec      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	4b53      	ldr	r3, [pc, #332]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x10c>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d063      	beq.n	8002086 <HAL_RCC_OscConfig+0x202>
=======
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d063      	beq.n	80023e6 <HAL_RCC_OscConfig+0x202>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
<<<<<<< HEAD
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fca:	4b49      	ldr	r3, [pc, #292]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d11c      	bne.n	8002010 <HAL_RCC_OscConfig+0x18c>
 8001fd6:	4b46      	ldr	r3, [pc, #280]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d116      	bne.n	8002010 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	4b43      	ldr	r3, [pc, #268]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d005      	beq.n	8001ffa <HAL_RCC_OscConfig+0x176>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	691b      	ldr	r3, [r3, #16]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d001      	beq.n	8001ffa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e1c0      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
=======
 800231e:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00b      	beq.n	8002342 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800232a:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 030c 	and.w	r3, r3, #12
 8002332:	2b08      	cmp	r3, #8
 8002334:	d11c      	bne.n	8002370 <HAL_RCC_OscConfig+0x18c>
 8002336:	4b46      	ldr	r3, [pc, #280]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d116      	bne.n	8002370 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002342:	4b43      	ldr	r3, [pc, #268]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d005      	beq.n	800235a <HAL_RCC_OscConfig+0x176>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e1c0      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001ffa:	4b3d      	ldr	r3, [pc, #244]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4939      	ldr	r1, [pc, #228]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	e03a      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
=======
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4939      	ldr	r1, [pc, #228]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800236e:	e03a      	b.n	80023e6 <HAL_RCC_OscConfig+0x202>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <HAL_RCC_OscConfig+0x270>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7fe ff1f 	bl	8000e60 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7fe ff1b 	bl	8000e60 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e1a1      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002038:	4b2d      	ldr	r3, [pc, #180]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x1a2>
=======
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d020      	beq.n	80023ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002378:	4b36      	ldr	r3, [pc, #216]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 800237a:	2201      	movs	r2, #1
 800237c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237e:	f7fe fe69 	bl	8001054 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002386:	f7fe fe65 	bl	8001054 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1a1      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x1a2>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002044:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4927      	ldr	r1, [pc, #156]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 8002054:	4313      	orrs	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
 8002058:	e015      	b.n	8002086 <HAL_RCC_OscConfig+0x202>
=======
 80023a4:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	695b      	ldr	r3, [r3, #20]
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4927      	ldr	r1, [pc, #156]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	600b      	str	r3, [r1, #0]
 80023b8:	e015      	b.n	80023e6 <HAL_RCC_OscConfig+0x202>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 800205a:	4b26      	ldr	r3, [pc, #152]	; (80020f4 <HAL_RCC_OscConfig+0x270>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fefe 	bl	8000e60 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002068:	f7fe fefa 	bl	8000e60 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e180      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800207a:	4b1d      	ldr	r3, [pc, #116]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1f0      	bne.n	8002068 <HAL_RCC_OscConfig+0x1e4>
=======
 80023ba:	4b26      	ldr	r3, [pc, #152]	; (8002454 <HAL_RCC_OscConfig+0x270>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7fe fe48 	bl	8001054 <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023c8:	f7fe fe44 	bl	8001054 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e180      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f0      	bne.n	80023c8 <HAL_RCC_OscConfig+0x1e4>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b00      	cmp	r3, #0
 8002090:	d03a      	beq.n	8002108 <HAL_RCC_OscConfig+0x284>
=======
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d03a      	beq.n	8002468 <HAL_RCC_OscConfig+0x284>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d019      	beq.n	80020ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a0:	f7fe fede 	bl	8000e60 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a8:	f7fe feda 	bl	8000e60 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e160      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ba:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d0f0      	beq.n	80020a8 <HAL_RCC_OscConfig+0x224>
=======
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d019      	beq.n	800242e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023fa:	4b17      	ldr	r3, [pc, #92]	; (8002458 <HAL_RCC_OscConfig+0x274>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002400:	f7fe fe28 	bl	8001054 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002408:	f7fe fe24 	bl	8001054 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e160      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	4b0d      	ldr	r3, [pc, #52]	; (8002450 <HAL_RCC_OscConfig+0x26c>)
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f0      	beq.n	8002408 <HAL_RCC_OscConfig+0x224>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
<<<<<<< HEAD
 80020c6:	2001      	movs	r0, #1
 80020c8:	f000 face 	bl	8002668 <RCC_Delay>
 80020cc:	e01c      	b.n	8002108 <HAL_RCC_OscConfig+0x284>
=======
 8002426:	2001      	movs	r0, #1
 8002428:	f000 face 	bl	80029c8 <RCC_Delay>
 800242c:	e01c      	b.n	8002468 <HAL_RCC_OscConfig+0x284>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_OscConfig+0x274>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d4:	f7fe fec4 	bl	8000e60 <HAL_GetTick>
 80020d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020da:	e00f      	b.n	80020fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020dc:	f7fe fec0 	bl	8000e60 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d908      	bls.n	80020fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e146      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
 80020ee:	bf00      	nop
 80020f0:	40021000 	.word	0x40021000
 80020f4:	42420000 	.word	0x42420000
 80020f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020fc:	4b92      	ldr	r3, [pc, #584]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d1e9      	bne.n	80020dc <HAL_RCC_OscConfig+0x258>
=======
 800242e:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <HAL_RCC_OscConfig+0x274>)
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002434:	f7fe fe0e 	bl	8001054 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243a:	e00f      	b.n	800245c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243c:	f7fe fe0a 	bl	8001054 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d908      	bls.n	800245c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e146      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	42420000 	.word	0x42420000
 8002458:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245c:	4b92      	ldr	r3, [pc, #584]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1e9      	bne.n	800243c <HAL_RCC_OscConfig+0x258>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 80a6 	beq.w	8002262 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002116:	2300      	movs	r3, #0
 8002118:	75fb      	strb	r3, [r7, #23]
=======
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80a6 	beq.w	80025c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002476:	2300      	movs	r3, #0
 8002478:	75fb      	strb	r3, [r7, #23]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 800211a:	4b8b      	ldr	r3, [pc, #556]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10d      	bne.n	8002142 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	4b88      	ldr	r3, [pc, #544]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	4a87      	ldr	r2, [pc, #540]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	61d3      	str	r3, [r2, #28]
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800213e:	2301      	movs	r3, #1
 8002140:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002142:	4b82      	ldr	r3, [pc, #520]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214a:	2b00      	cmp	r3, #0
 800214c:	d118      	bne.n	8002180 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800214e:	4b7f      	ldr	r3, [pc, #508]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a7e      	ldr	r2, [pc, #504]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800215a:	f7fe fe81 	bl	8000e60 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002162:	f7fe fe7d 	bl	8000e60 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e103      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002174:	4b75      	ldr	r3, [pc, #468]	; (800234c <HAL_RCC_OscConfig+0x4c8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x2de>
=======
 800247a:	4b8b      	ldr	r3, [pc, #556]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10d      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a87      	ldr	r2, [pc, #540]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800249e:	2301      	movs	r3, #1
 80024a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a2:	4b82      	ldr	r3, [pc, #520]	; (80026ac <HAL_RCC_OscConfig+0x4c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d118      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024ae:	4b7f      	ldr	r3, [pc, #508]	; (80026ac <HAL_RCC_OscConfig+0x4c8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a7e      	ldr	r2, [pc, #504]	; (80026ac <HAL_RCC_OscConfig+0x4c8>)
 80024b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ba:	f7fe fdcb 	bl	8001054 <HAL_GetTick>
 80024be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c2:	f7fe fdc7 	bl	8001054 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b64      	cmp	r3, #100	; 0x64
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e103      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	4b75      	ldr	r3, [pc, #468]	; (80026ac <HAL_RCC_OscConfig+0x4c8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0f0      	beq.n	80024c2 <HAL_RCC_OscConfig+0x2de>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x312>
 8002188:	4b6f      	ldr	r3, [pc, #444]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a6e      	ldr	r2, [pc, #440]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e02d      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x334>
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a69      	ldr	r2, [pc, #420]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0301 	bic.w	r3, r3, #1
 80021a8:	6213      	str	r3, [r2, #32]
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	6a1b      	ldr	r3, [r3, #32]
 80021ae:	4a66      	ldr	r2, [pc, #408]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	f023 0304 	bic.w	r3, r3, #4
 80021b4:	6213      	str	r3, [r2, #32]
 80021b6:	e01c      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	2b05      	cmp	r3, #5
 80021be:	d10c      	bne.n	80021da <HAL_RCC_OscConfig+0x356>
 80021c0:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021c2:	6a1b      	ldr	r3, [r3, #32]
 80021c4:	4a60      	ldr	r2, [pc, #384]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021c6:	f043 0304 	orr.w	r3, r3, #4
 80021ca:	6213      	str	r3, [r2, #32]
 80021cc:	4b5e      	ldr	r3, [pc, #376]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	6a1b      	ldr	r3, [r3, #32]
 80021d0:	4a5d      	ldr	r2, [pc, #372]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	6213      	str	r3, [r2, #32]
 80021d8:	e00b      	b.n	80021f2 <HAL_RCC_OscConfig+0x36e>
 80021da:	4b5b      	ldr	r3, [pc, #364]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	4a5a      	ldr	r2, [pc, #360]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	6213      	str	r3, [r2, #32]
 80021e6:	4b58      	ldr	r3, [pc, #352]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	4a57      	ldr	r2, [pc, #348]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	f023 0304 	bic.w	r3, r3, #4
 80021f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d015      	beq.n	8002226 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7fe fe31 	bl	8000e60 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7fe fe2d 	bl	8000e60 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e0b1      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002218:	4b4b      	ldr	r3, [pc, #300]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ee      	beq.n	8002202 <HAL_RCC_OscConfig+0x37e>
 8002224:	e014      	b.n	8002250 <HAL_RCC_OscConfig+0x3cc>
=======
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_OscConfig+0x312>
 80024e8:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4a6e      	ldr	r2, [pc, #440]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	f043 0301 	orr.w	r3, r3, #1
 80024f2:	6213      	str	r3, [r2, #32]
 80024f4:	e02d      	b.n	8002552 <HAL_RCC_OscConfig+0x36e>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10c      	bne.n	8002518 <HAL_RCC_OscConfig+0x334>
 80024fe:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	6a1b      	ldr	r3, [r3, #32]
 8002502:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	6213      	str	r3, [r2, #32]
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	f023 0304 	bic.w	r3, r3, #4
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	e01c      	b.n	8002552 <HAL_RCC_OscConfig+0x36e>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b05      	cmp	r3, #5
 800251e:	d10c      	bne.n	800253a <HAL_RCC_OscConfig+0x356>
 8002520:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4a60      	ldr	r2, [pc, #384]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002526:	f043 0304 	orr.w	r3, r3, #4
 800252a:	6213      	str	r3, [r2, #32]
 800252c:	4b5e      	ldr	r3, [pc, #376]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800252e:	6a1b      	ldr	r3, [r3, #32]
 8002530:	4a5d      	ldr	r2, [pc, #372]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6213      	str	r3, [r2, #32]
 8002538:	e00b      	b.n	8002552 <HAL_RCC_OscConfig+0x36e>
 800253a:	4b5b      	ldr	r3, [pc, #364]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a5a      	ldr	r2, [pc, #360]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f023 0301 	bic.w	r3, r3, #1
 8002544:	6213      	str	r3, [r2, #32]
 8002546:	4b58      	ldr	r3, [pc, #352]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	4a57      	ldr	r2, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	f023 0304 	bic.w	r3, r3, #4
 8002550:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d015      	beq.n	8002586 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7fe fd7b 	bl	8001054 <HAL_GetTick>
 800255e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002562:	f7fe fd77 	bl	8001054 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002570:	4293      	cmp	r3, r2
 8002572:	d901      	bls.n	8002578 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e0b1      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002578:	4b4b      	ldr	r3, [pc, #300]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	f003 0302 	and.w	r3, r3, #2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0ee      	beq.n	8002562 <HAL_RCC_OscConfig+0x37e>
 8002584:	e014      	b.n	80025b0 <HAL_RCC_OscConfig+0x3cc>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002226:	f7fe fe1b 	bl	8000e60 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7fe fe17 	bl	8000e60 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	; 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e09b      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002244:	4b40      	ldr	r3, [pc, #256]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1ee      	bne.n	800222e <HAL_RCC_OscConfig+0x3aa>
=======
 8002586:	f7fe fd65 	bl	8001054 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800258c:	e00a      	b.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fd61 	bl	8001054 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d901      	bls.n	80025a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e09b      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a4:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80025a6:	6a1b      	ldr	r3, [r3, #32]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ee      	bne.n	800258e <HAL_RCC_OscConfig+0x3aa>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
<<<<<<< HEAD
 8002250:	7dfb      	ldrb	r3, [r7, #23]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d105      	bne.n	8002262 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002256:	4b3c      	ldr	r3, [pc, #240]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	4a3b      	ldr	r2, [pc, #236]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800225c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002260:	61d3      	str	r3, [r2, #28]
=======
 80025b0:	7dfb      	ldrb	r3, [r7, #23]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b6:	4b3c      	ldr	r3, [pc, #240]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	4a3b      	ldr	r2, [pc, #236]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80025bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025c0:	61d3      	str	r3, [r2, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	2b00      	cmp	r3, #0
 8002268:	f000 8087 	beq.w	800237a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800226c:	4b36      	ldr	r3, [pc, #216]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d061      	beq.n	800233c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d146      	bne.n	800230e <HAL_RCC_OscConfig+0x48a>
=======
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8087 	beq.w	80026da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025cc:	4b36      	ldr	r3, [pc, #216]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 030c 	and.w	r3, r3, #12
 80025d4:	2b08      	cmp	r3, #8
 80025d6:	d061      	beq.n	800269c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d146      	bne.n	800266e <HAL_RCC_OscConfig+0x48a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8002280:	4b33      	ldr	r3, [pc, #204]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fdeb 	bl	8000e60 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228e:	f7fe fde7 	bl	8000e60 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e06d      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a0:	4b29      	ldr	r3, [pc, #164]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x40a>
=======
 80025e0:	4b33      	ldr	r3, [pc, #204]	; (80026b0 <HAL_RCC_OscConfig+0x4cc>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fd35 	bl	8001054 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fd31 	bl	8001054 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e06d      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f0      	bne.n	80025ee <HAL_RCC_OscConfig+0x40a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
<<<<<<< HEAD
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d108      	bne.n	80022c8 <HAL_RCC_OscConfig+0x444>
=======
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d108      	bne.n	8002628 <HAL_RCC_OscConfig+0x444>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
<<<<<<< HEAD
 80022b6:	4b24      	ldr	r3, [pc, #144]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	4921      	ldr	r1, [pc, #132]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	604b      	str	r3, [r1, #4]
=======
 8002616:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	4921      	ldr	r1, [pc, #132]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80022c8:	4b1f      	ldr	r3, [pc, #124]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a19      	ldr	r1, [r3, #32]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	430b      	orrs	r3, r1
 80022da:	491b      	ldr	r1, [pc, #108]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022e0:	4b1b      	ldr	r3, [pc, #108]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 80022e2:	2201      	movs	r2, #1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e6:	f7fe fdbb 	bl	8000e60 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe fdb7 	bl	8000e60 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002300:	4b11      	ldr	r3, [pc, #68]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x46a>
 800230c:	e035      	b.n	800237a <HAL_RCC_OscConfig+0x4f6>
=======
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a19      	ldr	r1, [r3, #32]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	430b      	orrs	r3, r1
 800263a:	491b      	ldr	r1, [pc, #108]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	4313      	orrs	r3, r2
 800263e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_RCC_OscConfig+0x4cc>)
 8002642:	2201      	movs	r2, #1
 8002644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002646:	f7fe fd05 	bl	8001054 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264e:	f7fe fd01 	bl	8001054 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e03d      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f0      	beq.n	800264e <HAL_RCC_OscConfig+0x46a>
 800266c:	e035      	b.n	80026da <HAL_RCC_OscConfig+0x4f6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <HAL_RCC_OscConfig+0x4cc>)
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002314:	f7fe fda4 	bl	8000e60 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231c:	f7fe fda0 	bl	8000e60 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e026      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800232e:	4b06      	ldr	r3, [pc, #24]	; (8002348 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1f0      	bne.n	800231c <HAL_RCC_OscConfig+0x498>
 800233a:	e01e      	b.n	800237a <HAL_RCC_OscConfig+0x4f6>
=======
 800266e:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_RCC_OscConfig+0x4cc>)
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002674:	f7fe fcee 	bl	8001054 <HAL_GetTick>
 8002678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800267a:	e008      	b.n	800268e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800267c:	f7fe fcea 	bl	8001054 <HAL_GetTick>
 8002680:	4602      	mov	r2, r0
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	1ad3      	subs	r3, r2, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d901      	bls.n	800268e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e026      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <HAL_RCC_OscConfig+0x4c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d1f0      	bne.n	800267c <HAL_RCC_OscConfig+0x498>
 800269a:	e01e      	b.n	80026da <HAL_RCC_OscConfig+0x4f6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d107      	bne.n	8002354 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e019      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
 8002348:	40021000 	.word	0x40021000
 800234c:	40007000 	.word	0x40007000
 8002350:	42420060 	.word	0x42420060
=======
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69db      	ldr	r3, [r3, #28]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e019      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42420060 	.word	0x42420060
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
<<<<<<< HEAD
 8002354:	4b0b      	ldr	r3, [pc, #44]	; (8002384 <HAL_RCC_OscConfig+0x500>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	429a      	cmp	r2, r3
 8002366:	d106      	bne.n	8002376 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002372:	429a      	cmp	r2, r3
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <HAL_RCC_OscConfig+0x4f8>
=======
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_RCC_OscConfig+0x500>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d106      	bne.n	80026d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e000      	b.n	80026dc <HAL_RCC_OscConfig+0x4f8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }
  }

  return HAL_OK;
<<<<<<< HEAD
 800237a:	2300      	movs	r3, #0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40021000 	.word	0x40021000

08002388 <HAL_RCC_ClockConfig>:
=======
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000

080026e8 <HAL_RCC_ClockConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
=======
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e0d0      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
=======
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e0d0      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800239c:	4b6a      	ldr	r3, [pc, #424]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d910      	bls.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b67      	ldr	r3, [pc, #412]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 0207 	bic.w	r2, r3, #7
 80023b2:	4965      	ldr	r1, [pc, #404]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
=======
 80026fc:	4b6a      	ldr	r3, [pc, #424]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	683a      	ldr	r2, [r7, #0]
 8002706:	429a      	cmp	r2, r3
 8002708:	d910      	bls.n	800272c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270a:	4b67      	ldr	r3, [pc, #412]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0207 	bic.w	r2, r3, #7
 8002712:	4965      	ldr	r1, [pc, #404]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	4313      	orrs	r3, r2
 8002718:	600b      	str	r3, [r1, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0b8      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
=======
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d001      	beq.n	800272c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e0b8      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d020      	beq.n	800241a <HAL_RCC_ClockConfig+0x92>
=======
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d020      	beq.n	800277a <HAL_RCC_ClockConfig+0x92>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d005      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e4:	4b59      	ldr	r3, [pc, #356]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a58      	ldr	r2, [pc, #352]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0308 	and.w	r3, r3, #8
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023fc:	4b53      	ldr	r3, [pc, #332]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	4a52      	ldr	r2, [pc, #328]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002406:	6053      	str	r3, [r2, #4]
=======
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	4a58      	ldr	r2, [pc, #352]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800274e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800275c:	4b53      	ldr	r3, [pc, #332]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	4a52      	ldr	r2, [pc, #328]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002762:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002766:	6053      	str	r3, [r2, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	494d      	ldr	r1, [pc, #308]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	4313      	orrs	r3, r2
 8002418:	604b      	str	r3, [r1, #4]
=======
 8002768:	4b50      	ldr	r3, [pc, #320]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	494d      	ldr	r1, [pc, #308]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0301 	and.w	r3, r3, #1
 8002422:	2b00      	cmp	r3, #0
 8002424:	d040      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x120>
=======
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d040      	beq.n	8002808 <HAL_RCC_ClockConfig+0x120>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242e:	4b47      	ldr	r3, [pc, #284]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d115      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e07f      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
=======
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e07f      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b02      	cmp	r3, #2
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002446:	4b41      	ldr	r3, [pc, #260]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d109      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e073      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
=======
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e073      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8002456:	4b3d      	ldr	r3, [pc, #244]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d101      	bne.n	8002466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e06b      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002466:	4b39      	ldr	r3, [pc, #228]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 0203 	bic.w	r2, r3, #3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4936      	ldr	r1, [pc, #216]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002478:	f7fe fcf2 	bl	8000e60 <HAL_GetTick>
 800247c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	e00a      	b.n	8002496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002480:	f7fe fcee 	bl	8000e60 <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	f241 3288 	movw	r2, #5000	; 0x1388
 800248e:	4293      	cmp	r3, r2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e053      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 020c 	and.w	r2, r3, #12
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d1eb      	bne.n	8002480 <HAL_RCC_ClockConfig+0xf8>
=======
 80027b6:	4b3d      	ldr	r3, [pc, #244]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e06b      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b39      	ldr	r3, [pc, #228]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4936      	ldr	r1, [pc, #216]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027d8:	f7fe fc3c 	bl	8001054 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7fe fc38 	bl	8001054 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e053      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b2d      	ldr	r3, [pc, #180]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	683a      	ldr	r2, [r7, #0]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d210      	bcs.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f023 0207 	bic.w	r2, r3, #7
 80024be:	4922      	ldr	r1, [pc, #136]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	600b      	str	r3, [r1, #0]
=======
 8002808:	4b27      	ldr	r3, [pc, #156]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	683a      	ldr	r2, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d210      	bcs.n	8002838 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b24      	ldr	r3, [pc, #144]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 0207 	bic.w	r2, r3, #7
 800281e:	4922      	ldr	r1, [pc, #136]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	4313      	orrs	r3, r2
 8002824:	600b      	str	r3, [r1, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 80024c6:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCC_ClockConfig+0x1c0>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e032      	b.n	800253e <HAL_RCC_ClockConfig+0x1b6>
=======
 8002826:	4b20      	ldr	r3, [pc, #128]	; (80028a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0307 	and.w	r3, r3, #7
 800282e:	683a      	ldr	r2, [r7, #0]
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e032      	b.n	800289e <HAL_RCC_ClockConfig+0x1b6>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e4:	4b19      	ldr	r3, [pc, #100]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	4916      	ldr	r1, [pc, #88]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	604b      	str	r3, [r1, #4]
=======
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d008      	beq.n	8002856 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	4916      	ldr	r1, [pc, #88]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d009      	beq.n	8002516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002502:	4b12      	ldr	r3, [pc, #72]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	490e      	ldr	r1, [pc, #56]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
=======
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d009      	beq.n	8002876 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002862:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	490e      	ldr	r1, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 8002872:	4313      	orrs	r3, r2
 8002874:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 8002516:	f000 f821 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251a:	4602      	mov	r2, r0
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	091b      	lsrs	r3, r3, #4
 8002522:	f003 030f 	and.w	r3, r3, #15
 8002526:	490a      	ldr	r1, [pc, #40]	; (8002550 <HAL_RCC_ClockConfig+0x1c8>)
 8002528:	5ccb      	ldrb	r3, [r1, r3]
 800252a:	fa22 f303 	lsr.w	r3, r2, r3
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1cc>)
 8002530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1d0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7fe fc50 	bl	8000ddc <HAL_InitTick>

  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3710      	adds	r7, #16
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40022000 	.word	0x40022000
 800254c:	40021000 	.word	0x40021000
 8002550:	080045a8 	.word	0x080045a8
 8002554:	20000004 	.word	0x20000004
 8002558:	20000008 	.word	0x20000008

0800255c <HAL_RCC_GetSysClockFreq>:
=======
 8002876:	f000 f821 	bl	80028bc <HAL_RCC_GetSysClockFreq>
 800287a:	4602      	mov	r2, r0
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_ClockConfig+0x1c4>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	490a      	ldr	r1, [pc, #40]	; (80028b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002888:	5ccb      	ldrb	r3, [r1, r3]
 800288a:	fa22 f303 	lsr.w	r3, r2, r3
 800288e:	4a09      	ldr	r2, [pc, #36]	; (80028b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002892:	4b09      	ldr	r3, [pc, #36]	; (80028b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4618      	mov	r0, r3
 8002898:	f7fe fb9a 	bl	8000fd0 <HAL_InitTick>

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	40022000 	.word	0x40022000
 80028ac:	40021000 	.word	0x40021000
 80028b0:	08004908 	.word	0x08004908
 80028b4:	20000000 	.word	0x20000000
 80028b8:	20000004 	.word	0x20000004

080028bc <HAL_RCC_GetSysClockFreq>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800255c:	b480      	push	{r7}
 800255e:	b087      	sub	sp, #28
 8002560:	af00      	add	r7, sp, #0
=======
 80028bc:	b480      	push	{r7}
 80028be:	b087      	sub	sp, #28
 80028c0:	af00      	add	r7, sp, #0
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002562:	2300      	movs	r3, #0
 8002564:	60fb      	str	r3, [r7, #12]
 8002566:	2300      	movs	r3, #0
 8002568:	60bb      	str	r3, [r7, #8]
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002572:	2300      	movs	r3, #0
 8002574:	613b      	str	r3, [r7, #16]
=======
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	2300      	movs	r3, #0
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	613b      	str	r3, [r7, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
<<<<<<< HEAD
 8002576:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b04      	cmp	r3, #4
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x30>
 8002586:	2b08      	cmp	r3, #8
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x36>
 800258a:	e027      	b.n	80025dc <HAL_RCC_GetSysClockFreq+0x80>
=======
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_GetSysClockFreq+0x94>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b04      	cmp	r3, #4
 80028e4:	d002      	beq.n	80028ec <HAL_RCC_GetSysClockFreq+0x30>
 80028e6:	2b08      	cmp	r3, #8
 80028e8:	d003      	beq.n	80028f2 <HAL_RCC_GetSysClockFreq+0x36>
 80028ea:	e027      	b.n	800293c <HAL_RCC_GetSysClockFreq+0x80>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800258e:	613b      	str	r3, [r7, #16]
      break;
 8002590:	e027      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x86>
=======
 80028ec:	4b19      	ldr	r3, [pc, #100]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 80028ee:	613b      	str	r3, [r7, #16]
      break;
 80028f0:	e027      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
<<<<<<< HEAD
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	0c9b      	lsrs	r3, r3, #18
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	4a17      	ldr	r2, [pc, #92]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d010      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x70>
=======
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_RCC_GetSysClockFreq+0x9c>)
 80028fc:	5cd3      	ldrb	r3, [r2, r3]
 80028fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d010      	beq.n	800292c <HAL_RCC_GetSysClockFreq+0x70>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
<<<<<<< HEAD
 80025aa:	4b11      	ldr	r3, [pc, #68]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	0c5b      	lsrs	r3, r3, #17
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_RCC_GetSysClockFreq+0xa0>)
 80025b6:	5cd3      	ldrb	r3, [r2, r3]
 80025b8:	60bb      	str	r3, [r7, #8]
=======
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <HAL_RCC_GetSysClockFreq+0x94>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	0c5b      	lsrs	r3, r3, #17
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	4a11      	ldr	r2, [pc, #68]	; (800295c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002916:	5cd3      	ldrb	r3, [r2, r3]
 8002918:	60bb      	str	r3, [r7, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
<<<<<<< HEAD
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025be:	fb03 f202 	mul.w	r2, r3, r2
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	e004      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x7a>
=======
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 800291e:	fb03 f202 	mul.w	r2, r3, r2
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	fbb2 f3f3 	udiv	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e004      	b.n	8002936 <HAL_RCC_GetSysClockFreq+0x7a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
<<<<<<< HEAD
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a0c      	ldr	r2, [pc, #48]	; (8002600 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025d0:	fb02 f303 	mul.w	r3, r2, r3
 80025d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	613b      	str	r3, [r7, #16]
      break;
 80025da:	e002      	b.n	80025e2 <HAL_RCC_GetSysClockFreq+0x86>
=======
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002930:	fb02 f303 	mul.w	r3, r2, r3
 8002934:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	613b      	str	r3, [r7, #16]
      break;
 800293a:	e002      	b.n	8002942 <HAL_RCC_GetSysClockFreq+0x86>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x98>)
 80025de:	613b      	str	r3, [r7, #16]
      break;
 80025e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025e2:	693b      	ldr	r3, [r7, #16]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000
 80025f4:	007a1200 	.word	0x007a1200
 80025f8:	080045c0 	.word	0x080045c0
 80025fc:	080045d0 	.word	0x080045d0
 8002600:	003d0900 	.word	0x003d0900

08002604 <HAL_RCC_GetHCLKFreq>:
=======
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_RCC_GetSysClockFreq+0x98>)
 800293e:	613b      	str	r3, [r7, #16]
      break;
 8002940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002942:	693b      	ldr	r3, [r7, #16]
}
 8002944:	4618      	mov	r0, r3
 8002946:	371c      	adds	r7, #28
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	40021000 	.word	0x40021000
 8002954:	007a1200 	.word	0x007a1200
 8002958:	08004920 	.word	0x08004920
 800295c:	08004930 	.word	0x08004930
 8002960:	003d0900 	.word	0x003d0900

08002964 <HAL_RCC_GetHCLKFreq>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002608:	4b02      	ldr	r3, [pc, #8]	; (8002614 <HAL_RCC_GetHCLKFreq+0x10>)
 800260a:	681b      	ldr	r3, [r3, #0]
}
 800260c:	4618      	mov	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	bc80      	pop	{r7}
 8002612:	4770      	bx	lr
 8002614:	20000004 	.word	0x20000004

08002618 <HAL_RCC_GetPCLK1Freq>:
=======
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b02      	ldr	r3, [pc, #8]	; (8002974 <HAL_RCC_GetHCLKFreq+0x10>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800261c:	f7ff fff2 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK1Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	080045b8 	.word	0x080045b8

08002640 <HAL_RCC_GetPCLK2Freq>:
=======
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff2 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	; (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40021000 	.word	0x40021000
 800299c:	08004918 	.word	0x08004918

080029a0 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002644:	f7ff ffde 	bl	8002604 <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	0adb      	lsrs	r3, r3, #11
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4903      	ldr	r1, [pc, #12]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800265c:	4618      	mov	r0, r3
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40021000 	.word	0x40021000
 8002664:	080045b8 	.word	0x080045b8

08002668 <RCC_Delay>:
=======
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffde 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	; (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0adb      	lsrs	r3, r3, #11
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	; (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40021000 	.word	0x40021000
 80029c4:	08004918 	.word	0x08004918

080029c8 <RCC_Delay>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
<<<<<<< HEAD
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <RCC_Delay+0x34>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <RCC_Delay+0x38>)
 8002676:	fba2 2303 	umull	r2, r3, r2, r3
 800267a:	0a5b      	lsrs	r3, r3, #9
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002684:	bf00      	nop
  }
  while (Delay --);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	60fa      	str	r2, [r7, #12]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1f9      	bne.n	8002684 <RCC_Delay+0x1c>
}
 8002690:	bf00      	nop
 8002692:	bf00      	nop
 8002694:	3714      	adds	r7, #20
 8002696:	46bd      	mov	sp, r7
 8002698:	bc80      	pop	{r7}
 800269a:	4770      	bx	lr
 800269c:	20000004 	.word	0x20000004
 80026a0:	10624dd3 	.word	0x10624dd3

080026a4 <HAL_RCCEx_PeriphCLKConfig>:
=======
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029d0:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <RCC_Delay+0x34>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <RCC_Delay+0x38>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a5b      	lsrs	r3, r3, #9
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	fb02 f303 	mul.w	r3, r2, r3
 80029e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029e4:	bf00      	nop
  }
  while (Delay --);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1e5a      	subs	r2, r3, #1
 80029ea:	60fa      	str	r2, [r7, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d1f9      	bne.n	80029e4 <RCC_Delay+0x1c>
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3714      	adds	r7, #20
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr
 80029fc:	20000000 	.word	0x20000000
 8002a00:	10624dd3 	.word	0x10624dd3

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b086      	sub	sp, #24
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]
=======
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	2300      	movs	r3, #0
 8002a12:	60fb      	str	r3, [r7, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
<<<<<<< HEAD
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d07d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80026c0:	2300      	movs	r3, #0
 80026c2:	75fb      	strb	r3, [r7, #23]
=======
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d07d      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a20:	2300      	movs	r3, #0
 8002a22:	75fb      	strb	r3, [r7, #23]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 80026c4:	4b4f      	ldr	r3, [pc, #316]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	69db      	ldr	r3, [r3, #28]
 80026c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d0:	4b4c      	ldr	r3, [pc, #304]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	69db      	ldr	r3, [r3, #28]
 80026d4:	4a4b      	ldr	r2, [pc, #300]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026da:	61d3      	str	r3, [r2, #28]
 80026dc:	4b49      	ldr	r3, [pc, #292]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026e8:	2301      	movs	r3, #1
 80026ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b46      	ldr	r3, [pc, #280]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d118      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f8:	4b43      	ldr	r3, [pc, #268]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002704:	f7fe fbac 	bl	8000e60 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	e008      	b.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fba8 	bl	8000e60 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b64      	cmp	r3, #100	; 0x64
 8002718:	d901      	bls.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e06d      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271e:	4b3a      	ldr	r3, [pc, #232]	; (8002808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0f0      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x68>
=======
 8002a24:	4b4f      	ldr	r3, [pc, #316]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10d      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a30:	4b4c      	ldr	r3, [pc, #304]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a3a:	61d3      	str	r3, [r2, #28]
 8002a3c:	4b49      	ldr	r3, [pc, #292]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d118      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a58:	4b43      	ldr	r3, [pc, #268]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a42      	ldr	r2, [pc, #264]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a62:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a64:	f7fe faf6 	bl	8001054 <HAL_GetTick>
 8002a68:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	e008      	b.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6c:	f7fe faf2 	bl	8001054 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b64      	cmp	r3, #100	; 0x64
 8002a78:	d901      	bls.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e06d      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7e:	4b3a      	ldr	r3, [pc, #232]	; (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d0f0      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x68>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
<<<<<<< HEAD
 800272a:	4b36      	ldr	r3, [pc, #216]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002732:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d02e      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	429a      	cmp	r2, r3
 8002746:	d027      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002748:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002750:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002758:	4b2c      	ldr	r3, [pc, #176]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800275e:	4a29      	ldr	r2, [pc, #164]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d014      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276e:	f7fe fb77 	bl	8000e60 <HAL_GetTick>
 8002772:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002774:	e00a      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fb73 	bl	8000e60 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e036      	b.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278c:	4b1d      	ldr	r3, [pc, #116]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800278e:	6a1b      	ldr	r3, [r3, #32]
 8002790:	f003 0302 	and.w	r3, r3, #2
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0ee      	beq.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0xd2>
=======
 8002a8a:	4b36      	ldr	r3, [pc, #216]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a92:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d02e      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d027      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aa8:	4b2e      	ldr	r3, [pc, #184]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ab0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab2:	4b2e      	ldr	r3, [pc, #184]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ab8:	4b2c      	ldr	r3, [pc, #176]	; (8002b6c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002abe:	4a29      	ldr	r2, [pc, #164]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d014      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ace:	f7fe fac1 	bl	8001054 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad4:	e00a      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad6:	f7fe fabd 	bl	8001054 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e036      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	4b1d      	ldr	r3, [pc, #116]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0ee      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
<<<<<<< HEAD
 8002798:	4b1a      	ldr	r3, [pc, #104]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4917      	ldr	r1, [pc, #92]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027aa:	7dfb      	ldrb	r3, [r7, #23]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b14      	ldr	r3, [pc, #80]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b2:	69db      	ldr	r3, [r3, #28]
 80027b4:	4a13      	ldr	r2, [pc, #76]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	61d3      	str	r3, [r2, #28]
=======
 8002af8:	4b1a      	ldr	r3, [pc, #104]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4917      	ldr	r1, [pc, #92]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b0a:	7dfb      	ldrb	r3, [r7, #23]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d105      	bne.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b10:	4b14      	ldr	r3, [pc, #80]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	4a13      	ldr	r2, [pc, #76]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d008      	beq.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x136>
=======
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x136>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	490b      	ldr	r1, [pc, #44]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	604b      	str	r3, [r1, #4]
=======
 8002b28:	4b0e      	ldr	r3, [pc, #56]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	490b      	ldr	r1, [pc, #44]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
=======
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x154>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
<<<<<<< HEAD
 80027e6:	4b07      	ldr	r3, [pc, #28]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	4904      	ldr	r1, [pc, #16]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
=======
 8002b46:	4b07      	ldr	r3, [pc, #28]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	4904      	ldr	r1, [pc, #16]	; (8002b64 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
<<<<<<< HEAD
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	40021000 	.word	0x40021000
 8002808:	40007000 	.word	0x40007000
 800280c:	42420440 	.word	0x42420440

08002810 <HAL_RCCEx_GetPeriphCLKFreq>:
=======
 8002b58:	2300      	movs	r3, #0
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3718      	adds	r7, #24
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40007000 	.word	0x40007000
 8002b6c:	42420440 	.word	0x42420440

08002b70 <HAL_RCCEx_GetPeriphCLKFreq>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
<<<<<<< HEAD
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
=======
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
<<<<<<< HEAD
 8002818:	2300      	movs	r3, #0
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]
 8002828:	2300      	movs	r3, #0
 800282a:	61bb      	str	r3, [r7, #24]
=======
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
 8002b80:	2300      	movs	r3, #0
 8002b82:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
<<<<<<< HEAD
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2b10      	cmp	r3, #16
 8002830:	d00a      	beq.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b10      	cmp	r3, #16
 8002836:	f200 808a 	bhi.w	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d045      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d075      	beq.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
=======
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b10      	cmp	r3, #16
 8002b90:	d00a      	beq.n	8002ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	f200 808a 	bhi.w	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d045      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d075      	beq.n	8002c92 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
<<<<<<< HEAD
 8002846:	e082      	b.n	800294e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002848:	4b46      	ldr	r3, [pc, #280]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800284e:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d07b      	beq.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	0c9b      	lsrs	r3, r3, #18
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	4a41      	ldr	r2, [pc, #260]	; (8002968 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002864:	5cd3      	ldrb	r3, [r2, r3]
 8002866:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d015      	beq.n	800289e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002872:	4b3c      	ldr	r3, [pc, #240]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	0c5b      	lsrs	r3, r3, #17
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	4a3b      	ldr	r2, [pc, #236]	; (800296c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800287e:	5cd3      	ldrb	r3, [r2, r3]
 8002880:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00d      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fbb2 f2f3 	udiv	r2, r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	61fb      	str	r3, [r7, #28]
 800289c:	e004      	b.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4a34      	ldr	r2, [pc, #208]	; (8002974 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80028a2:	fb02 f303 	mul.w	r3, r2, r3
 80028a6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80028a8:	4b2e      	ldr	r3, [pc, #184]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028b4:	d102      	bne.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	61bb      	str	r3, [r7, #24]
      break;
 80028ba:	e04a      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4a2d      	ldr	r2, [pc, #180]	; (8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	085b      	lsrs	r3, r3, #1
 80028c8:	61bb      	str	r3, [r7, #24]
      break;
 80028ca:	e042      	b.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028dc:	d108      	bne.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80028e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	e01f      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fa:	d109      	bne.n	8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80028fc:	4b19      	ldr	r3, [pc, #100]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002908:	f649 4340 	movw	r3, #40000	; 0x9c40
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	e00f      	b.n	8002930 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800291a:	d11c      	bne.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800291c:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d016      	beq.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002928:	f24f 4324 	movw	r3, #62500	; 0xf424
 800292c:	61bb      	str	r3, [r7, #24]
      break;
 800292e:	e012      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002930:	e011      	b.n	8002956 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002932:	f7ff fe85 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8002936:	4602      	mov	r2, r0
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	0b9b      	lsrs	r3, r3, #14
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	3301      	adds	r3, #1
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	61bb      	str	r3, [r7, #24]
      break;
 800294c:	e004      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800294e:	bf00      	nop
 8002950:	e002      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002952:	bf00      	nop
 8002954:	e000      	b.n	8002958 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002956:	bf00      	nop
    }
  }
  return (frequency);
 8002958:	69bb      	ldr	r3, [r7, #24]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3720      	adds	r7, #32
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	080045d4 	.word	0x080045d4
 800296c:	080045e4 	.word	0x080045e4
 8002970:	007a1200 	.word	0x007a1200
 8002974:	003d0900 	.word	0x003d0900
 8002978:	aaaaaaab 	.word	0xaaaaaaab

0800297c <HAL_TIM_Base_Init>:
=======
 8002ba6:	e082      	b.n	8002cae <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bae:	4b45      	ldr	r3, [pc, #276]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d07b      	beq.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0c9b      	lsrs	r3, r3, #18
 8002bbe:	f003 030f 	and.w	r3, r3, #15
 8002bc2:	4a41      	ldr	r2, [pc, #260]	; (8002cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002bc4:	5cd3      	ldrb	r3, [r2, r3]
 8002bc6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d015      	beq.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bd2:	4b3c      	ldr	r3, [pc, #240]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	0c5b      	lsrs	r3, r3, #17
 8002bd8:	f003 0301 	and.w	r3, r3, #1
 8002bdc:	4a3b      	ldr	r2, [pc, #236]	; (8002ccc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002bde:	5cd3      	ldrb	r3, [r2, r3]
 8002be0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00d      	beq.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002bec:	4a38      	ldr	r2, [pc, #224]	; (8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	fb02 f303 	mul.w	r3, r2, r3
 8002bfa:	61fb      	str	r3, [r7, #28]
 8002bfc:	e004      	b.n	8002c08 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	4a34      	ldr	r2, [pc, #208]	; (8002cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c02:	fb02 f303 	mul.w	r3, r2, r3
 8002c06:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c08:	4b2e      	ldr	r3, [pc, #184]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c14:	d102      	bne.n	8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	61bb      	str	r3, [r7, #24]
      break;
 8002c1a:	e04a      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	4a2d      	ldr	r2, [pc, #180]	; (8002cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	61bb      	str	r3, [r7, #24]
      break;
 8002c2a:	e042      	b.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c2c:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c2e:	6a1b      	ldr	r3, [r3, #32]
 8002c30:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c3c:	d108      	bne.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4c:	61bb      	str	r3, [r7, #24]
 8002c4e:	e01f      	b.n	8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	f003 0302 	and.w	r3, r3, #2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c68:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	e00f      	b.n	8002c90 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c7a:	d11c      	bne.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c7c:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d016      	beq.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002c88:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002c8c:	61bb      	str	r3, [r7, #24]
      break;
 8002c8e:	e012      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002c90:	e011      	b.n	8002cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002c92:	f7ff fe85 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8002c96:	4602      	mov	r2, r0
 8002c98:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0b9b      	lsrs	r3, r3, #14
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002caa:	61bb      	str	r3, [r7, #24]
      break;
 8002cac:	e004      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cae:	bf00      	nop
 8002cb0:	e002      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cb2:	bf00      	nop
 8002cb4:	e000      	b.n	8002cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cb6:	bf00      	nop
    }
  }
  return (frequency);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3720      	adds	r7, #32
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08004934 	.word	0x08004934
 8002ccc:	08004944 	.word	0x08004944
 8002cd0:	007a1200 	.word	0x007a1200
 8002cd4:	003d0900 	.word	0x003d0900
 8002cd8:	aaaaaaab 	.word	0xaaaaaaab

08002cdc <HAL_TIM_Base_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e041      	b.n	8002a12 <HAL_TIM_Base_Init+0x96>
=======
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e041      	b.n	8002d72 <HAL_TIM_Base_Init+0x96>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d106      	bne.n	8002d08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe f8d2 	bl	8000b4c <HAL_TIM_Base_MspInit>
=======
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f7fe f802 	bl	8000d0c <HAL_TIM_Base_MspInit>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	3304      	adds	r3, #4
 80029b8:	4619      	mov	r1, r3
 80029ba:	4610      	mov	r0, r2
 80029bc:	f000 fc30 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}
	...

08002a1c <HAL_TIM_Base_Start_IT>:
=======
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2202      	movs	r2, #2
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f000 fc30 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_TIM_Base_Start_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
=======
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
<<<<<<< HEAD
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d001      	beq.n	8002a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e03a      	b.n	8002aaa <HAL_TIM_Base_Start_IT+0x8e>
=======
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d001      	beq.n	8002d94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e03a      	b.n	8002e0a <HAL_TIM_Base_Start_IT+0x8e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68da      	ldr	r2, [r3, #12]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f042 0201 	orr.w	r2, r2, #1
 8002a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a18      	ldr	r2, [pc, #96]	; (8002ab4 <HAL_TIM_Base_Start_IT+0x98>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x58>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x58>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_Base_Start_IT+0x58>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a13      	ldr	r2, [pc, #76]	; (8002abc <HAL_TIM_Base_Start_IT+0xa0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d111      	bne.n	8002a98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 0307 	and.w	r3, r3, #7
 8002a7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d010      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a96:	e007      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0x8c>
=======
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68da      	ldr	r2, [r3, #12]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a18      	ldr	r2, [pc, #96]	; (8002e14 <HAL_TIM_Base_Start_IT+0x98>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d00e      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x58>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dbe:	d009      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x58>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a14      	ldr	r2, [pc, #80]	; (8002e18 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d004      	beq.n	8002dd4 <HAL_TIM_Base_Start_IT+0x58>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <HAL_TIM_Base_Start_IT+0xa0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d111      	bne.n	8002df8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 0307 	and.w	r3, r3, #7
 8002dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2b06      	cmp	r3, #6
 8002de4:	d010      	beq.n	8002e08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f042 0201 	orr.w	r2, r2, #1
 8002df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df6:	e007      	b.n	8002e08 <HAL_TIM_Base_Start_IT+0x8c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
=======
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800

08002ac0 <HAL_TIM_PWM_Init>:
=======
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	40012c00 	.word	0x40012c00
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40000800 	.word	0x40000800

08002e20 <HAL_TIM_PWM_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e041      	b.n	8002b56 <HAL_TIM_PWM_Init+0x96>
=======
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e041      	b.n	8002eb6 <HAL_TIM_PWM_Init+0x96>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f839 	bl	8002b5e <HAL_TIM_PWM_MspInit>
=======
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f839 	bl	8002ebe <HAL_TIM_PWM_MspInit>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 fb8e 	bl	8003220 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_PWM_MspInit>:
=======
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	4610      	mov	r0, r2
 8002e60:	f000 fb8e 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_TIM_PWM_MspInit>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002b5e:	b480      	push	{r7}
 8002b60:	b083      	sub	sp, #12
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
=======
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8002b66:	bf00      	nop
 8002b68:	370c      	adds	r7, #12
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bc80      	pop	{r7}
 8002b6e:	4770      	bx	lr

08002b70 <HAL_TIM_PWM_Start>:
=======
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_PWM_Start>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
=======
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
<<<<<<< HEAD
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d109      	bne.n	8002b94 <HAL_TIM_PWM_Start+0x24>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	bf14      	ite	ne
 8002b8c:	2301      	movne	r3, #1
 8002b8e:	2300      	moveq	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e022      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	d109      	bne.n	8002bae <HAL_TIM_PWM_Start+0x3e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	e015      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	2b08      	cmp	r3, #8
 8002bb2:	d109      	bne.n	8002bc8 <HAL_TIM_PWM_Start+0x58>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	bf14      	ite	ne
 8002bc0:	2301      	movne	r3, #1
 8002bc2:	2300      	moveq	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	e008      	b.n	8002bda <HAL_TIM_PWM_Start+0x6a>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e05e      	b.n	8002ca0 <HAL_TIM_PWM_Start+0x130>
=======
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d109      	bne.n	8002ef4 <HAL_TIM_PWM_Start+0x24>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	bf14      	ite	ne
 8002eec:	2301      	movne	r3, #1
 8002eee:	2300      	moveq	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	e022      	b.n	8002f3a <HAL_TIM_PWM_Start+0x6a>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d109      	bne.n	8002f0e <HAL_TIM_PWM_Start+0x3e>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	bf14      	ite	ne
 8002f06:	2301      	movne	r3, #1
 8002f08:	2300      	moveq	r3, #0
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	e015      	b.n	8002f3a <HAL_TIM_PWM_Start+0x6a>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b08      	cmp	r3, #8
 8002f12:	d109      	bne.n	8002f28 <HAL_TIM_PWM_Start+0x58>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	bf14      	ite	ne
 8002f20:	2301      	movne	r3, #1
 8002f22:	2300      	moveq	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	e008      	b.n	8002f3a <HAL_TIM_PWM_Start+0x6a>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e05e      	b.n	8003000 <HAL_TIM_PWM_Start+0x130>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
<<<<<<< HEAD
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d104      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x82>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2202      	movs	r2, #2
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf0:	e013      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d104      	bne.n	8002c02 <HAL_TIM_PWM_Start+0x92>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c00:	e00b      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d104      	bne.n	8002c12 <HAL_TIM_PWM_Start+0xa2>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c10:	e003      	b.n	8002c1a <HAL_TIM_PWM_Start+0xaa>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	6839      	ldr	r1, [r7, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f000 fd7c 	bl	8003720 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_TIM_PWM_Start+0x138>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d107      	bne.n	8002c42 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d104      	bne.n	8002f52 <HAL_TIM_PWM_Start+0x82>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f50:	e013      	b.n	8002f7a <HAL_TIM_PWM_Start+0xaa>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d104      	bne.n	8002f62 <HAL_TIM_PWM_Start+0x92>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2202      	movs	r2, #2
 8002f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f60:	e00b      	b.n	8002f7a <HAL_TIM_PWM_Start+0xaa>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b08      	cmp	r3, #8
 8002f66:	d104      	bne.n	8002f72 <HAL_TIM_PWM_Start+0xa2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f70:	e003      	b.n	8002f7a <HAL_TIM_PWM_Start+0xaa>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2202      	movs	r2, #2
 8002f76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	6839      	ldr	r1, [r7, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fd7c 	bl	8003a80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1e      	ldr	r2, [pc, #120]	; (8003008 <HAL_TIM_PWM_Start+0x138>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fa0:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
<<<<<<< HEAD
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIM_PWM_Start+0x138>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00e      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c54:	d009      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_TIM_PWM_Start+0x13c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d004      	beq.n	8002c6a <HAL_TIM_PWM_Start+0xfa>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a12      	ldr	r2, [pc, #72]	; (8002cb0 <HAL_TIM_PWM_Start+0x140>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d111      	bne.n	8002c8e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2b06      	cmp	r3, #6
 8002c7a:	d010      	beq.n	8002c9e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0201 	orr.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c8c:	e007      	b.n	8002c9e <HAL_TIM_PWM_Start+0x12e>
=======
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_TIM_PWM_Start+0x138>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00e      	beq.n	8002fca <HAL_TIM_PWM_Start+0xfa>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb4:	d009      	beq.n	8002fca <HAL_TIM_PWM_Start+0xfa>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIM_PWM_Start+0x13c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d004      	beq.n	8002fca <HAL_TIM_PWM_Start+0xfa>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a12      	ldr	r2, [pc, #72]	; (8003010 <HAL_TIM_PWM_Start+0x140>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d111      	bne.n	8002fee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b06      	cmp	r3, #6
 8002fda:	d010      	beq.n	8002ffe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0201 	orr.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fec:	e007      	b.n	8002ffe <HAL_TIM_PWM_Start+0x12e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0201 	orr.w	r2, r2, #1
 8002c9c:	601a      	str	r2, [r3, #0]
=======
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f042 0201 	orr.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40012c00 	.word	0x40012c00
 8002cac:	40000400 	.word	0x40000400
 8002cb0:	40000800 	.word	0x40000800

08002cb4 <HAL_TIM_IRQHandler>:
=======
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800

08003014 <HAL_TIM_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0202 	mvn.w	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x4a>
=======
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b02      	cmp	r3, #2
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b02      	cmp	r3, #2
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0202 	mvn.w	r2, #2
 8003040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x4a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 fa76 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x56>
=======
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa76 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x56>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 fa69 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 fa78 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
=======
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fa69 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fa78 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0204 	mvn.w	r2, #4
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x9e>
=======
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0304 	and.w	r3, r3, #4
 800307a:	2b04      	cmp	r3, #4
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0204 	mvn.w	r2, #4
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2202      	movs	r2, #2
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x9e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fa4c 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0xaa>
=======
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 fa4c 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xaa>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 fa3f 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fa4e 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
=======
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fa3f 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa4e 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0208 	mvn.w	r2, #8
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0xf2>
=======
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d122      	bne.n	8003118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0308 	and.w	r3, r3, #8
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d11b      	bne.n	8003118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0208 	mvn.w	r2, #8
 80030e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2204      	movs	r2, #4
 80030ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f003 0303 	and.w	r3, r3, #3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fa22 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xfe>
=======
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fa22 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003104:	e005      	b.n	8003112 <HAL_TIM_IRQHandler+0xfe>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 fa15 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 fa24 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
=======
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fa15 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 fa24 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	771a      	strb	r2, [r3, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2208      	movs	r2, #8
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x146>
=======
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0310 	and.w	r3, r3, #16
 8003122:	2b10      	cmp	r3, #16
 8003124:	d122      	bne.n	800316c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b10      	cmp	r3, #16
 8003132:	d11b      	bne.n	800316c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0210 	mvn.w	r2, #16
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2208      	movs	r2, #8
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x146>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f9f8 	bl	80031e8 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x152>
=======
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f9f8 	bl	8003548 <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0x152>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f9eb 	bl	80031d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f9fa 	bl	80031fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
=======
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f9eb 	bl	8003536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f9fa 	bl	800355a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0201 	mvn.w	r2, #1
 8002e30:	611a      	str	r2, [r3, #16]
=======
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	2b01      	cmp	r3, #1
 8003178:	d10e      	bne.n	8003198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0301 	and.w	r3, r3, #1
 8003184:	2b01      	cmp	r3, #1
 8003186:	d107      	bne.n	8003198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f06f 0201 	mvn.w	r2, #1
 8003190:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fd10 	bl	8000858 <HAL_TIM_PeriodElapsedCallback>
=======
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fd fb72 	bl	800087c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b80      	cmp	r3, #128	; 0x80
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b80      	cmp	r3, #128	; 0x80
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e5c:	611a      	str	r2, [r3, #16]
=======
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d10e      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b0:	2b80      	cmp	r3, #128	; 0x80
 80031b2:	d107      	bne.n	80031c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031bc:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fce9 	bl	8003836 <HAL_TIMEx_BreakCallback>
=======
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 fce9 	bl	8003b96 <HAL_TIMEx_BreakCallback>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6e:	2b40      	cmp	r3, #64	; 0x40
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7c:	2b40      	cmp	r3, #64	; 0x40
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e88:	611a      	str	r2, [r3, #16]
=======
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d10e      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031dc:	2b40      	cmp	r3, #64	; 0x40
 80031de:	d107      	bne.n	80031f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031e8:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f9be 	bl	800320c <HAL_TIM_TriggerCallback>
=======
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9be 	bl	800356c <HAL_TIM_TriggerCallback>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0220 	mvn.w	r2, #32
 8002eb4:	611a      	str	r2, [r3, #16]
=======
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b20      	cmp	r3, #32
 80031fc:	d10e      	bne.n	800321c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0320 	and.w	r3, r3, #32
 8003208:	2b20      	cmp	r3, #32
 800320a:	d107      	bne.n	800321c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0220 	mvn.w	r2, #32
 8003214:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fcb4 	bl	8003824 <HAL_TIMEx_CommutCallback>
=======
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 fcb4 	bl	8003b84 <HAL_TIMEx_CommutCallback>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_PWM_ConfigChannel>:
=======
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	75fb      	strb	r3, [r7, #23]
=======
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d101      	bne.n	8002ee2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ede:	2302      	movs	r3, #2
 8002ee0:	e0ae      	b.n	8003040 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b0c      	cmp	r3, #12
 8002eee:	f200 809f 	bhi.w	8003030 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ef2:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef8:	08002f2d 	.word	0x08002f2d
 8002efc:	08003031 	.word	0x08003031
 8002f00:	08003031 	.word	0x08003031
 8002f04:	08003031 	.word	0x08003031
 8002f08:	08002f6d 	.word	0x08002f6d
 8002f0c:	08003031 	.word	0x08003031
 8002f10:	08003031 	.word	0x08003031
 8002f14:	08003031 	.word	0x08003031
 8002f18:	08002faf 	.word	0x08002faf
 8002f1c:	08003031 	.word	0x08003031
 8002f20:	08003031 	.word	0x08003031
 8002f24:	08003031 	.word	0x08003031
 8002f28:	08002fef 	.word	0x08002fef
=======
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800323e:	2302      	movs	r3, #2
 8003240:	e0ae      	b.n	80033a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b0c      	cmp	r3, #12
 800324e:	f200 809f 	bhi.w	8003390 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800328d 	.word	0x0800328d
 800325c:	08003391 	.word	0x08003391
 8003260:	08003391 	.word	0x08003391
 8003264:	08003391 	.word	0x08003391
 8003268:	080032cd 	.word	0x080032cd
 800326c:	08003391 	.word	0x08003391
 8003270:	08003391 	.word	0x08003391
 8003274:	08003391 	.word	0x08003391
 8003278:	0800330f 	.word	0x0800330f
 800327c:	08003391 	.word	0x08003391
 8003280:	08003391 	.word	0x08003391
 8003284:	08003391 	.word	0x08003391
 8003288:	0800334f 	.word	0x0800334f
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68b9      	ldr	r1, [r7, #8]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 f9d6 	bl	80032e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0208 	orr.w	r2, r2, #8
 8002f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0204 	bic.w	r2, r2, #4
 8002f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6999      	ldr	r1, [r3, #24]
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	691a      	ldr	r2, [r3, #16]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	430a      	orrs	r2, r1
 8002f68:	619a      	str	r2, [r3, #24]
      break;
 8002f6a:	e064      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	4618      	mov	r0, r3
 8003294:	f000 f9d6 	bl	8003644 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699a      	ldr	r2, [r3, #24]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0208 	orr.w	r2, r2, #8
 80032a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0204 	bic.w	r2, r2, #4
 80032b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6999      	ldr	r1, [r3, #24]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	619a      	str	r2, [r3, #24]
      break;
 80032ca:	e064      	b.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fa1c 	bl	80033b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699a      	ldr	r2, [r3, #24]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	699a      	ldr	r2, [r3, #24]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6999      	ldr	r1, [r3, #24]
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	021a      	lsls	r2, r3, #8
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	619a      	str	r2, [r3, #24]
      break;
 8002fac:	e043      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 fa1c 	bl	8003710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699a      	ldr	r2, [r3, #24]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6999      	ldr	r1, [r3, #24]
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	021a      	lsls	r2, r3, #8
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	430a      	orrs	r2, r1
 800330a:	619a      	str	r2, [r3, #24]
      break;
 800330c:	e043      	b.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68b9      	ldr	r1, [r7, #8]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f000 fa65 	bl	8003484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	69da      	ldr	r2, [r3, #28]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f042 0208 	orr.w	r2, r2, #8
 8002fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	69da      	ldr	r2, [r3, #28]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0204 	bic.w	r2, r2, #4
 8002fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	69d9      	ldr	r1, [r3, #28]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	691a      	ldr	r2, [r3, #16]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	61da      	str	r2, [r3, #28]
      break;
 8002fec:	e023      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68b9      	ldr	r1, [r7, #8]
 8003314:	4618      	mov	r0, r3
 8003316:	f000 fa65 	bl	80037e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f042 0208 	orr.w	r2, r2, #8
 8003328:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0204 	bic.w	r2, r2, #4
 8003338:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69d9      	ldr	r1, [r3, #28]
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
      break;
 800334c:	e023      	b.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68b9      	ldr	r1, [r7, #8]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f000 faaf 	bl	8003558 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69da      	ldr	r2, [r3, #28]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69d9      	ldr	r1, [r3, #28]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	61da      	str	r2, [r3, #28]
      break;
 800302e:	e002      	b.n	8003036 <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 faaf 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69da      	ldr	r2, [r3, #28]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	69da      	ldr	r2, [r3, #28]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	021a      	lsls	r2, r3, #8
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	61da      	str	r2, [r3, #28]
      break;
 800338e:	e002      	b.n	8003396 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 8003030:	2301      	movs	r3, #1
 8003032:	75fb      	strb	r3, [r7, #23]
      break;
 8003034:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	3718      	adds	r7, #24
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_ConfigClockSource>:
=======
 8003390:	2301      	movs	r3, #1
 8003392:	75fb      	strb	r3, [r7, #23]
      break;
 8003394:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800339e:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_TIM_ConfigClockSource>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	73fb      	strb	r3, [r7, #15]
=======
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033b2:	2300      	movs	r3, #0
 80033b4:	73fb      	strb	r3, [r7, #15]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_TIM_ConfigClockSource+0x1c>
 8003060:	2302      	movs	r3, #2
 8003062:	e0b4      	b.n	80031ce <HAL_TIM_ConfigClockSource+0x186>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d101      	bne.n	80033c4 <HAL_TIM_ConfigClockSource+0x1c>
 80033c0:	2302      	movs	r3, #2
 80033c2:	e0b4      	b.n	800352e <HAL_TIM_ConfigClockSource+0x186>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2201      	movs	r2, #1
 80033c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800308a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309c:	d03e      	beq.n	800311c <HAL_TIM_ConfigClockSource+0xd4>
 800309e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a2:	f200 8087 	bhi.w	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030aa:	f000 8086 	beq.w	80031ba <HAL_TIM_ConfigClockSource+0x172>
 80030ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030b2:	d87f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b4:	2b70      	cmp	r3, #112	; 0x70
 80030b6:	d01a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0xa6>
 80030b8:	2b70      	cmp	r3, #112	; 0x70
 80030ba:	d87b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030bc:	2b60      	cmp	r3, #96	; 0x60
 80030be:	d050      	beq.n	8003162 <HAL_TIM_ConfigClockSource+0x11a>
 80030c0:	2b60      	cmp	r3, #96	; 0x60
 80030c2:	d877      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b50      	cmp	r3, #80	; 0x50
 80030c6:	d03c      	beq.n	8003142 <HAL_TIM_ConfigClockSource+0xfa>
 80030c8:	2b50      	cmp	r3, #80	; 0x50
 80030ca:	d873      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b40      	cmp	r3, #64	; 0x40
 80030ce:	d058      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0x13a>
 80030d0:	2b40      	cmp	r3, #64	; 0x40
 80030d2:	d86f      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b30      	cmp	r3, #48	; 0x30
 80030d6:	d064      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030d8:	2b30      	cmp	r3, #48	; 0x30
 80030da:	d86b      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b20      	cmp	r3, #32
 80030de:	d060      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d867      	bhi.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05c      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d05a      	beq.n	80031a2 <HAL_TIM_ConfigClockSource+0x15a>
 80030ec:	e062      	b.n	80031b4 <HAL_TIM_ConfigClockSource+0x16c>
=======
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033fc:	d03e      	beq.n	800347c <HAL_TIM_ConfigClockSource+0xd4>
 80033fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003402:	f200 8087 	bhi.w	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800340a:	f000 8086 	beq.w	800351a <HAL_TIM_ConfigClockSource+0x172>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d87f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003414:	2b70      	cmp	r3, #112	; 0x70
 8003416:	d01a      	beq.n	800344e <HAL_TIM_ConfigClockSource+0xa6>
 8003418:	2b70      	cmp	r3, #112	; 0x70
 800341a:	d87b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b60      	cmp	r3, #96	; 0x60
 800341e:	d050      	beq.n	80034c2 <HAL_TIM_ConfigClockSource+0x11a>
 8003420:	2b60      	cmp	r3, #96	; 0x60
 8003422:	d877      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b50      	cmp	r3, #80	; 0x50
 8003426:	d03c      	beq.n	80034a2 <HAL_TIM_ConfigClockSource+0xfa>
 8003428:	2b50      	cmp	r3, #80	; 0x50
 800342a:	d873      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b40      	cmp	r3, #64	; 0x40
 800342e:	d058      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0x13a>
 8003430:	2b40      	cmp	r3, #64	; 0x40
 8003432:	d86f      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d064      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d86b      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d060      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d867      	bhi.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05c      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d05a      	beq.n	8003502 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	e062      	b.n	8003514 <HAL_TIM_ConfigClockSource+0x16c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	6899      	ldr	r1, [r3, #8]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	f000 faf0 	bl	80036e2 <TIM_ETR_SetConfig>
=======
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6818      	ldr	r0, [r3, #0]
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	6899      	ldr	r1, [r3, #8]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f000 faf0 	bl	8003a42 <TIM_ETR_SetConfig>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003110:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	609a      	str	r2, [r3, #8]
      break;
 800311a:	e04f      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	609a      	str	r2, [r3, #8]
      break;
 800347a:	e04f      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
<<<<<<< HEAD
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6818      	ldr	r0, [r3, #0]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	6899      	ldr	r1, [r3, #8]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f000 fad9 	bl	80036e2 <TIM_ETR_SetConfig>
=======
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6818      	ldr	r0, [r3, #0]
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f000 fad9 	bl	8003a42 <TIM_ETR_SetConfig>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
<<<<<<< HEAD
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800313e:	609a      	str	r2, [r3, #8]
      break;
 8003140:	e03c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800349e:	609a      	str	r2, [r3, #8]
      break;
 80034a0:	e03c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6818      	ldr	r0, [r3, #0]
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	6859      	ldr	r1, [r3, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	461a      	mov	r2, r3
 8003150:	f000 fa50 	bl	80035f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2150      	movs	r1, #80	; 0x50
 800315a:	4618      	mov	r0, r3
 800315c:	f000 faa7 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003160:	e02c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6818      	ldr	r0, [r3, #0]
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	6859      	ldr	r1, [r3, #4]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f000 fa50 	bl	8003954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2150      	movs	r1, #80	; 0x50
 80034ba:	4618      	mov	r0, r3
 80034bc:	f000 faa7 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 80034c0:	e02c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	6859      	ldr	r1, [r3, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	461a      	mov	r2, r3
 8003170:	f000 fa6e 	bl	8003650 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2160      	movs	r1, #96	; 0x60
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fa97 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 8003180:	e01c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6818      	ldr	r0, [r3, #0]
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	6859      	ldr	r1, [r3, #4]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f000 fa6e 	bl	80039b0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	2160      	movs	r1, #96	; 0x60
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 fa97 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 80034e0:	e01c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
<<<<<<< HEAD
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6859      	ldr	r1, [r3, #4]
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	461a      	mov	r2, r3
 8003190:	f000 fa30 	bl	80035f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2140      	movs	r1, #64	; 0x40
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fa87 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80031a0:	e00c      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6859      	ldr	r1, [r3, #4]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	461a      	mov	r2, r3
 80034f0:	f000 fa30 	bl	8003954 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2140      	movs	r1, #64	; 0x40
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fa87 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003500:	e00c      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
<<<<<<< HEAD
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f000 fa7e 	bl	80036ae <TIM_ITRx_SetConfig>
      break;
 80031b2:	e003      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
=======
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f000 fa7e 	bl	8003a0e <TIM_ITRx_SetConfig>
      break;
 8003512:	e003      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e000      	b.n	80031bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003514:	2301      	movs	r3, #1
 8003516:	73fb      	strb	r3, [r7, #15]
      break;
 8003518:	e000      	b.n	800351c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800351a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800352c:	7bfb      	ldrb	r3, [r7, #15]
}
 800352e:	4618      	mov	r0, r3
 8003530:	3710      	adds	r7, #16
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
=======
 8003536:	b480      	push	{r7}
 8003538:	b083      	sub	sp, #12
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIM_IC_CaptureCallback>:
=======
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <HAL_TIM_IC_CaptureCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
=======
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	bc80      	pop	{r7}
 8003558:	4770      	bx	lr

0800355a <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
=======
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <HAL_TIM_TriggerCallback>:
=======
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <HAL_TIM_TriggerCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
=======
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	bc80      	pop	{r7}
 800321c:	4770      	bx	lr
	...

08003220 <TIM_Base_SetConfig>:
=======
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323e:	d007      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a26      	ldr	r2, [pc, #152]	; (80032dc <TIM_Base_SetConfig+0xbc>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d003      	beq.n	8003250 <TIM_Base_SetConfig+0x30>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a25      	ldr	r2, [pc, #148]	; (80032e0 <TIM_Base_SetConfig+0xc0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d108      	bne.n	8003262 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a1c      	ldr	r2, [pc, #112]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d00b      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003270:	d007      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a19      	ldr	r2, [pc, #100]	; (80032dc <TIM_Base_SetConfig+0xbc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d003      	beq.n	8003282 <TIM_Base_SetConfig+0x62>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <TIM_Base_SetConfig+0xc0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d108      	bne.n	8003294 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	60fb      	str	r3, [r7, #12]
=======
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a29      	ldr	r2, [pc, #164]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d00b      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a26      	ldr	r2, [pc, #152]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x30>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a25      	ldr	r2, [pc, #148]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d00b      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d007      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <TIM_Base_SetConfig+0xbc>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_Base_SetConfig+0x62>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a18      	ldr	r2, [pc, #96]	; (8003640 <TIM_Base_SetConfig+0xc0>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d108      	bne.n	80035f4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	60fb      	str	r3, [r7, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a07      	ldr	r2, [pc, #28]	; (80032d8 <TIM_Base_SetConfig+0xb8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
=======
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68fa      	ldr	r2, [r7, #12]
 8003606:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a07      	ldr	r2, [pc, #28]	; (8003638 <TIM_Base_SetConfig+0xb8>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	615a      	str	r2, [r3, #20]
}
 80032ce:	bf00      	nop
 80032d0:	3714      	adds	r7, #20
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40000800 	.word	0x40000800

080032e4 <TIM_OC1_SetConfig>:
=======
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	615a      	str	r2, [r3, #20]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	bc80      	pop	{r7}
 8003636:	4770      	bx	lr
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40000400 	.word	0x40000400
 8003640:	40000800 	.word	0x40000800

08003644 <TIM_OC1_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
=======
 8003644:	b480      	push	{r7}
 8003646:	b087      	sub	sp, #28
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	f023 0201 	bic.w	r2, r3, #1
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	699b      	ldr	r3, [r3, #24]
 800330a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f023 0303 	bic.w	r3, r3, #3
 800331a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68fa      	ldr	r2, [r7, #12]
 8003322:	4313      	orrs	r3, r2
 8003324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	f023 0302 	bic.w	r3, r3, #2
 800332c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a1c      	ldr	r2, [pc, #112]	; (80033ac <TIM_OC1_SetConfig+0xc8>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d10c      	bne.n	800335a <TIM_OC1_SetConfig+0x76>
=======
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	f023 0201 	bic.w	r2, r3, #1
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0303 	bic.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 0302 	bic.w	r3, r3, #2
 800368c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	4a1c      	ldr	r2, [pc, #112]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d10c      	bne.n	80036ba <TIM_OC1_SetConfig+0x76>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f023 0308 	bic.w	r3, r3, #8
 8003346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	4313      	orrs	r3, r2
 8003350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	f023 0304 	bic.w	r3, r3, #4
 8003358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <TIM_OC1_SetConfig+0xc8>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d111      	bne.n	8003386 <TIM_OC1_SetConfig+0xa2>
=======
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	f023 0308 	bic.w	r3, r3, #8
 80036a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a13      	ldr	r2, [pc, #76]	; (800370c <TIM_OC1_SetConfig+0xc8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d111      	bne.n	80036e6 <TIM_OC1_SetConfig+0xa2>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	693a      	ldr	r2, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	613b      	str	r3, [r7, #16]
=======
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	613b      	str	r3, [r7, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	621a      	str	r2, [r3, #32]
}
 80033a0:	bf00      	nop
 80033a2:	371c      	adds	r7, #28
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40012c00 	.word	0x40012c00

080033b0 <TIM_OC2_SetConfig>:
=======
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40012c00 	.word	0x40012c00

08003710 <TIM_OC2_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
=======
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f023 0210 	bic.w	r2, r3, #16
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	021b      	lsls	r3, r3, #8
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 0320 	bic.w	r3, r3, #32
 80033fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a1d      	ldr	r2, [pc, #116]	; (8003480 <TIM_OC2_SetConfig+0xd0>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d10d      	bne.n	800342c <TIM_OC2_SetConfig+0x7c>
=======
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f023 0210 	bic.w	r2, r3, #16
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003746:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4313      	orrs	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f023 0320 	bic.w	r3, r3, #32
 800375a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_OC2_SetConfig+0xd0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <TIM_OC2_SetConfig+0x7c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800342a:	617b      	str	r3, [r7, #20]
=======
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003776:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	4313      	orrs	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800378a:	617b      	str	r3, [r7, #20]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a14      	ldr	r2, [pc, #80]	; (8003480 <TIM_OC2_SetConfig+0xd0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d113      	bne.n	800345c <TIM_OC2_SetConfig+0xac>
=======
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC2_SetConfig+0xd0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d113      	bne.n	80037bc <TIM_OC2_SetConfig+0xac>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800343a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	4313      	orrs	r3, r2
 800344e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	4313      	orrs	r3, r2
 800345a:	613b      	str	r3, [r7, #16]
=======
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	613b      	str	r3, [r7, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	621a      	str	r2, [r3, #32]
}
 8003476:	bf00      	nop
 8003478:	371c      	adds	r7, #28
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	40012c00 	.word	0x40012c00

08003484 <TIM_OC3_SetConfig>:
=======
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bc80      	pop	{r7}
 80037de:	4770      	bx	lr
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC3_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003484:	b480      	push	{r7}
 8003486:	b087      	sub	sp, #28
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
=======
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	f023 0303 	bic.w	r3, r3, #3
 80034ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d10d      	bne.n	80034fe <TIM_OC3_SetConfig+0x7a>
=======
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0303 	bic.w	r3, r3, #3
 800381a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800382c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1d      	ldr	r2, [pc, #116]	; (80038b4 <TIM_OC3_SetConfig+0xd0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d10d      	bne.n	800385e <TIM_OC3_SetConfig+0x7a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a14      	ldr	r2, [pc, #80]	; (8003554 <TIM_OC3_SetConfig+0xd0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d113      	bne.n	800352e <TIM_OC3_SetConfig+0xaa>
=======
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	4313      	orrs	r3, r2
 8003854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800385c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a14      	ldr	r2, [pc, #80]	; (80038b4 <TIM_OC3_SetConfig+0xd0>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d113      	bne.n	800388e <TIM_OC3_SetConfig+0xaa>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800350c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003514:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	699b      	ldr	r3, [r3, #24]
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
=======
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800386c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	011b      	lsls	r3, r3, #4
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	4313      	orrs	r3, r2
 8003880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	621a      	str	r2, [r3, #32]
}
 8003548:	bf00      	nop
 800354a:	371c      	adds	r7, #28
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40012c00 	.word	0x40012c00

08003558 <TIM_OC4_SetConfig>:
=======
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	621a      	str	r2, [r3, #32]
}
 80038a8:	bf00      	nop
 80038aa:	371c      	adds	r7, #28
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bc80      	pop	{r7}
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	40012c00 	.word	0x40012c00

080038b8 <TIM_OC4_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
 8003560:	6039      	str	r1, [r7, #0]
=======
 80038b8:	b480      	push	{r7}
 80038ba:	b087      	sub	sp, #28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	021b      	lsls	r3, r3, #8
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	031b      	lsls	r3, r3, #12
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a0f      	ldr	r2, [pc, #60]	; (80035f0 <TIM_OC4_SetConfig+0x98>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d109      	bne.n	80035cc <TIM_OC4_SetConfig+0x74>
=======
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a0f      	ldr	r2, [pc, #60]	; (8003950 <TIM_OC4_SetConfig+0x98>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d109      	bne.n	800392c <TIM_OC4_SetConfig+0x74>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	019b      	lsls	r3, r3, #6
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
=======
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800391e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	695b      	ldr	r3, [r3, #20]
 8003924:	019b      	lsls	r3, r3, #6
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685a      	ldr	r2, [r3, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	693a      	ldr	r2, [r7, #16]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bc80      	pop	{r7}
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00

080035f4 <TIM_TI1_ConfigInputStage>:
=======
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	621a      	str	r2, [r3, #32]
}
 8003946:	bf00      	nop
 8003948:	371c      	adds	r7, #28
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	40012c00 	.word	0x40012c00

08003954 <TIM_TI1_ConfigInputStage>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80035f4:	b480      	push	{r7}
 80035f6:	b087      	sub	sp, #28
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
=======
 8003954:	b480      	push	{r7}
 8003956:	b087      	sub	sp, #28
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	607a      	str	r2, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	f023 0201 	bic.w	r2, r3, #1
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800361e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f023 030a 	bic.w	r3, r3, #10
 8003630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <TIM_TI2_ConfigInputStage>:
=======
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	f023 0201 	bic.w	r2, r3, #1
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800397e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f023 030a 	bic.w	r3, r3, #10
 8003990:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	4313      	orrs	r3, r2
 8003998:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bc80      	pop	{r7}
 80039ae:	4770      	bx	lr

080039b0 <TIM_TI2_ConfigInputStage>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
=======
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0210 	bic.w	r2, r3, #16
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	031b      	lsls	r3, r3, #12
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	693a      	ldr	r2, [r7, #16]
 800369c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	621a      	str	r2, [r3, #32]
}
 80036a4:	bf00      	nop
 80036a6:	371c      	adds	r7, #28
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <TIM_ITRx_SetConfig>:
=======
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	f023 0210 	bic.w	r2, r3, #16
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	031b      	lsls	r3, r3, #12
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80039ec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	697a      	ldr	r2, [r7, #20]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	621a      	str	r2, [r3, #32]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <TIM_ITRx_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 80036ae:	b480      	push	{r7}
 80036b0:	b085      	sub	sp, #20
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	6039      	str	r1, [r7, #0]
=======
 8003a0e:	b480      	push	{r7}
 8003a10:	b085      	sub	sp, #20
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
 8003a16:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	f043 0307 	orr.w	r3, r3, #7
 80036d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	bc80      	pop	{r7}
 80036e0:	4770      	bx	lr

080036e2 <TIM_ETR_SetConfig>:
=======
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a26:	683a      	ldr	r2, [r7, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f043 0307 	orr.w	r3, r3, #7
 8003a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	609a      	str	r2, [r3, #8]
}
 8003a38:	bf00      	nop
 8003a3a:	3714      	adds	r7, #20
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bc80      	pop	{r7}
 8003a40:	4770      	bx	lr

08003a42 <TIM_ETR_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 80036e2:	b480      	push	{r7}
 80036e4:	b087      	sub	sp, #28
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	60f8      	str	r0, [r7, #12]
 80036ea:	60b9      	str	r1, [r7, #8]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	021a      	lsls	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	4313      	orrs	r3, r2
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	609a      	str	r2, [r3, #8]
}
 8003716:	bf00      	nop
 8003718:	371c      	adds	r7, #28
 800371a:	46bd      	mov	sp, r7
 800371c:	bc80      	pop	{r7}
 800371e:	4770      	bx	lr

08003720 <TIM_CCxChannelCmd>:
=======
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	021a      	lsls	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	697a      	ldr	r2, [r7, #20]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	609a      	str	r2, [r3, #8]
}
 8003a76:	bf00      	nop
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <TIM_CCxChannelCmd>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8003720:	b480      	push	{r7}
 8003722:	b087      	sub	sp, #28
 8003724:	af00      	add	r7, sp, #0
 8003726:	60f8      	str	r0, [r7, #12]
 8003728:	60b9      	str	r1, [r7, #8]
 800372a:	607a      	str	r2, [r7, #4]
=======
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2201      	movs	r2, #1
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	43db      	mvns	r3, r3
 8003742:	401a      	ands	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a1a      	ldr	r2, [r3, #32]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 031f 	and.w	r3, r3, #31
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	fa01 f303 	lsl.w	r3, r1, r3
 8003758:	431a      	orrs	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	621a      	str	r2, [r3, #32]
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2201      	movs	r2, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a1a      	ldr	r2, [r3, #32]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	401a      	ands	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a1a      	ldr	r2, [r3, #32]
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f003 031f 	and.w	r3, r3, #31
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab8:	431a      	orrs	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	621a      	str	r2, [r3, #32]
}
 8003abe:	bf00      	nop
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bc80      	pop	{r7}
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
=======
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800377c:	2302      	movs	r3, #2
 800377e:	e046      	b.n	800380e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68fa      	ldr	r2, [r7, #12]
 80037b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a16      	ldr	r2, [pc, #88]	; (8003818 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037cc:	d009      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a12      	ldr	r2, [pc, #72]	; (800381c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a10      	ldr	r2, [pc, #64]	; (8003820 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d10c      	bne.n	80037fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]
=======
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d101      	bne.n	8003ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003adc:	2302      	movs	r3, #2
 8003ade:	e046      	b.n	8003b6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2202      	movs	r2, #2
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a16      	ldr	r2, [pc, #88]	; (8003b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00e      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2c:	d009      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d004      	beq.n	8003b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d10c      	bne.n	8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	609a      	str	r2, [r3, #8]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3714      	adds	r7, #20
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40000400 	.word	0x40000400
 8003820:	40000800 	.word	0x40000800

08003824 <HAL_TIMEx_CommutCallback>:
=======
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	40012c00 	.word	0x40012c00
 8003b7c:	40000400 	.word	0x40000400
 8003b80:	40000800 	.word	0x40000800

08003b84 <HAL_TIMEx_CommutCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
=======
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_TIMEx_BreakCallback>:
=======
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr

08003b96 <HAL_TIMEx_BreakCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003836:	b480      	push	{r7}
 8003838:	b083      	sub	sp, #12
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
=======
 8003b96:	b480      	push	{r7}
 8003b98:	b083      	sub	sp, #12
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	bc80      	pop	{r7}
 8003846:	4770      	bx	lr

08003848 <HAL_UART_Init>:
=======
 8003b9e:	bf00      	nop
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bc80      	pop	{r7}
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_UART_Init>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e042      	b.n	80038e0 <HAL_UART_Init+0x98>
=======
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b082      	sub	sp, #8
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e042      	b.n	8003c40 <HAL_UART_Init+0x98>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
=======
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fa24 	bl	8000cbc <HAL_UART_MspInit>
=======
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fd f96e 	bl	8000eb0 <HAL_UART_MspInit>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	; 0x24
 8003878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800388a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fdc5 	bl	800441c <UART_SetConfig>
=======
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68da      	ldr	r2, [r3, #12]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fdc5 	bl	800477c <UART_SetConfig>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	695a      	ldr	r2, [r3, #20]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	68da      	ldr	r2, [r3, #12]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <HAL_UART_Transmit>:
=======
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695a      	ldr	r2, [r3, #20]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68da      	ldr	r2, [r3, #12]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_UART_Transmit>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08a      	sub	sp, #40	; 0x28
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	603b      	str	r3, [r7, #0]
 80038f4:	4613      	mov	r3, r2
 80038f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	d16d      	bne.n	80039e4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <HAL_UART_Transmit+0x2c>
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e066      	b.n	80039e6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2221      	movs	r2, #33	; 0x21
 8003922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003926:	f7fd fa9b 	bl	8000e60 <HAL_GetTick>
 800392a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	88fa      	ldrh	r2, [r7, #6]
 8003936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d108      	bne.n	8003954 <HAL_UART_Transmit+0x6c>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e003      	b.n	800395c <HAL_UART_Transmit+0x74>
=======
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b08a      	sub	sp, #40	; 0x28
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b20      	cmp	r3, #32
 8003c66:	d16d      	bne.n	8003d44 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d002      	beq.n	8003c74 <HAL_UART_Transmit+0x2c>
 8003c6e:	88fb      	ldrh	r3, [r7, #6]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d101      	bne.n	8003c78 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	e066      	b.n	8003d46 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2221      	movs	r2, #33	; 0x21
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c86:	f7fd f9e5 	bl	8001054 <HAL_GetTick>
 8003c8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88fa      	ldrh	r2, [r7, #6]
 8003c96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ca0:	d108      	bne.n	8003cb4 <HAL_UART_Transmit+0x6c>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d104      	bne.n	8003cb4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	61bb      	str	r3, [r7, #24]
 8003cb2:	e003      	b.n	8003cbc <HAL_UART_Transmit+0x74>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    else
    {
      pdata8bits  = pData;
<<<<<<< HEAD
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800395c:	e02a      	b.n	80039b4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2200      	movs	r2, #0
 8003966:	2180      	movs	r1, #128	; 0x80
 8003968:	68f8      	ldr	r0, [r7, #12]
 800396a:	f000 fb14 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d001      	beq.n	8003978 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e036      	b.n	80039e6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xbe>
=======
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003cbc:	e02a      	b.n	8003d14 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f000 fb14 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e036      	b.n	8003d46 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10b      	bne.n	8003cf6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	3302      	adds	r3, #2
 8003cf2:	61bb      	str	r3, [r7, #24]
 8003cf4:	e007      	b.n	8003d06 <HAL_UART_Transmit+0xbe>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
<<<<<<< HEAD
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cf      	bne.n	800395e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	; 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 fae4 	bl	8003f96 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e006      	b.n	80039e6 <HAL_UART_Transmit+0xfe>
=======
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	3301      	adds	r3, #1
 8003d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3b01      	subs	r3, #1
 8003d0e:	b29a      	uxth	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1cf      	bne.n	8003cbe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	2200      	movs	r2, #0
 8003d26:	2140      	movs	r1, #64	; 0x40
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 fae4 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d001      	beq.n	8003d38 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003d34:	2303      	movs	r3, #3
 8003d36:	e006      	b.n	8003d46 <HAL_UART_Transmit+0xfe>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2220      	movs	r2, #32
 80039dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80039e0:	2300      	movs	r3, #0
 80039e2:	e000      	b.n	80039e6 <HAL_UART_Transmit+0xfe>
=======
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	e000      	b.n	8003d46 <HAL_UART_Transmit+0xfe>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 80039e4:	2302      	movs	r3, #2
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_UART_Receive_IT>:
=======
 8003d44:	2302      	movs	r3, #2
  }
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3720      	adds	r7, #32
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <HAL_UART_Receive_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d112      	bne.n	8003a2e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <HAL_UART_Receive_IT+0x26>
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d101      	bne.n	8003a18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e00b      	b.n	8003a30 <HAL_UART_Receive_IT+0x42>
=======
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	2b20      	cmp	r3, #32
 8003d66:	d112      	bne.n	8003d8e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d002      	beq.n	8003d74 <HAL_UART_Receive_IT+0x26>
 8003d6e:	88fb      	ldrh	r3, [r7, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d101      	bne.n	8003d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00b      	b.n	8003d90 <HAL_UART_Receive_IT+0x42>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
<<<<<<< HEAD
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	461a      	mov	r2, r3
 8003a22:	68b9      	ldr	r1, [r7, #8]
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f000 fb24 	bl	8004072 <UART_Start_Receive_IT>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	e000      	b.n	8003a30 <HAL_UART_Receive_IT+0x42>
=======
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d7e:	88fb      	ldrh	r3, [r7, #6]
 8003d80:	461a      	mov	r2, r3
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fb24 	bl	80043d2 <UART_Start_Receive_IT>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	e000      	b.n	8003d90 <HAL_UART_Receive_IT+0x42>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8003a2e:	2302      	movs	r3, #2
  }
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_IRQHandler>:
=======
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_IRQHandler>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b0ba      	sub	sp, #232	; 0xe8
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10f      	bne.n	8003a9e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fc01 	bl	800429e <UART_Receive_IT>
      return;
 8003a9c:	e25b      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
=======
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b0ba      	sub	sp, #232	; 0xe8
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10f      	bne.n	8003dfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d009      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f003 0320 	and.w	r3, r3, #32
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 fc01 	bl	80045fe <UART_Receive_IT>
      return;
 8003dfc:	e25b      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
<<<<<<< HEAD
 8003a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 80de 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
 8003aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d106      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ab4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ab8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 80d1 	beq.w	8003c64 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00b      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
 8003ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d005      	beq.n	8003ae6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ade:	f043 0201 	orr.w	r2, r3, #1
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003dfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 80de 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
 8003e08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 80d1 	beq.w	8003fc4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00b      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
 8003e2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	f043 0201 	orr.w	r2, r3, #1
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aea:	f003 0304 	and.w	r3, r3, #4
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
 8003af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
 8003e52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f043 0202 	orr.w	r2, r3, #2
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
<<<<<<< HEAD
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
 8003b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f043 0204 	orr.w	r2, r3, #4
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00b      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
 8003e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e86:	f043 0204 	orr.w	r2, r3, #4
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
<<<<<<< HEAD
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d011      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
 8003b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b3e:	f003 0320 	and.w	r3, r3, #32
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d105      	bne.n	8003b52 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0208 	orr.w	r2, r3, #8
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
=======
 8003e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e92:	f003 0308 	and.w	r3, r3, #8
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d011      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
 8003e9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d005      	beq.n	8003ebe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f043 0208 	orr.w	r2, r3, #8
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
<<<<<<< HEAD
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 81f2 	beq.w	8003f4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d008      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
 8003b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b78:	f003 0320 	and.w	r3, r3, #32
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d002      	beq.n	8003b86 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb8c 	bl	800429e <UART_Receive_IT>
=======
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 81f2 	beq.w	80042ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
 8003ed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed8:	f003 0320 	and.w	r3, r3, #32
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d002      	beq.n	8003ee6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fb8c 	bl	80045fe <UART_Receive_IT>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	bf14      	ite	ne
 8003b94:	2301      	movne	r3, #1
 8003b96:	2300      	moveq	r3, #0
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x17a>
 8003baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d04f      	beq.n	8003c52 <HAL_UART_IRQHandler+0x21a>
=======
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf14      	ite	ne
 8003ef4:	2301      	movne	r3, #1
 8003ef6:	2300      	moveq	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_UART_IRQHandler+0x17a>
 8003f0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d04f      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x21a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f000 fa96 	bl	80040e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d041      	beq.n	8003c4a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	3314      	adds	r3, #20
 8003bcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
=======
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fa96 	bl	8004444 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d041      	beq.n	8003faa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	3314      	adds	r3, #20
 8003f2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8003bd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bf2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
=======
 8003f30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f34:	e853 3f00 	ldrex	r3, [r3]
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8003bfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bfe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003c02:	e841 2300 	strex	r3, r2, [r1]
 8003c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003c0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1d9      	bne.n	8003bc6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d013      	beq.n	8003c42 <HAL_UART_IRQHandler+0x20a>
=======
 8003f5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f62:	e841 2300 	strex	r3, r2, [r1]
 8003f66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d1d9      	bne.n	8003f26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d013      	beq.n	8003fa2 <HAL_UART_IRQHandler+0x20a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
<<<<<<< HEAD
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1e:	4a7e      	ldr	r2, [pc, #504]	; (8003e18 <HAL_UART_IRQHandler+0x3e0>)
 8003c20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fd fee8 	bl	80019fc <HAL_DMA_Abort_IT>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d016      	beq.n	8003c60 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c40:	e00e      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
=======
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	4a7e      	ldr	r2, [pc, #504]	; (8004178 <HAL_UART_IRQHandler+0x3e0>)
 8003f80:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7fd fee8 	bl	8001d5c <HAL_DMA_Abort_IT>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa0:	e00e      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f993 	bl	8003f6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	e00a      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
=======
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f993 	bl	80042ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa8:	e00a      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f98f 	bl	8003f6e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c50:	e006      	b.n	8003c60 <HAL_UART_IRQHandler+0x228>
=======
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f98f 	bl	80042ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fb0:	e006      	b.n	8003fc0 <HAL_UART_IRQHandler+0x228>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f98b 	bl	8003f6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003c5e:	e175      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c60:	bf00      	nop
    return;
 8003c62:	e173      	b.n	8003f4c <HAL_UART_IRQHandler+0x514>
=======
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f98b 	bl	80042ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8003fbe:	e175      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fc0:	bf00      	nop
    return;
 8003fc2:	e173      	b.n	80042ac <HAL_UART_IRQHandler+0x514>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	f040 814f 	bne.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8148 	beq.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 8141 	beq.w	8003f0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	60bb      	str	r3, [r7, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	60bb      	str	r3, [r7, #8]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	f000 80b6 	beq.w	8003e1c <HAL_UART_IRQHandler+0x3e4>
=======
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 814f 	bne.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fd2:	f003 0310 	and.w	r3, r3, #16
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f000 8148 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8141 	beq.w	800426c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fea:	2300      	movs	r3, #0
 8003fec:	60bb      	str	r3, [r7, #8]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	60bb      	str	r3, [r7, #8]
 8003ffe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 80b6 	beq.w	800417c <HAL_UART_IRQHandler+0x3e4>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
<<<<<<< HEAD
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cbc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8145 	beq.w	8003f50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	f080 813e 	bcs.w	8003f50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cda:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b20      	cmp	r3, #32
 8003ce4:	f000 8088 	beq.w	8003df8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	330c      	adds	r3, #12
 8003cee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cf6:	e853 3f00 	ldrex	r3, [r3]
 8003cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003d02:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	330c      	adds	r3, #12
 8003d10:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d14:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d20:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d24:	e841 2300 	strex	r3, r2, [r1]
 8003d28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1d9      	bne.n	8003ce8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3314      	adds	r3, #20
 8003d3a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d46:	f023 0301 	bic.w	r3, r3, #1
 8003d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3314      	adds	r3, #20
 8003d54:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d58:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d5c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d60:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d64:	e841 2300 	strex	r3, r2, [r1]
 8003d68:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1e1      	bne.n	8003d34 <HAL_UART_IRQHandler+0x2fc>
=======
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800401c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8145 	beq.w	80042b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800402a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402e:	429a      	cmp	r2, r3
 8004030:	f080 813e 	bcs.w	80042b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800403a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b20      	cmp	r3, #32
 8004044:	f000 8088 	beq.w	8004158 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	330c      	adds	r3, #12
 800404e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004052:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800405e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004062:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004066:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	330c      	adds	r3, #12
 8004070:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004074:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004080:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004084:	e841 2300 	strex	r3, r2, [r1]
 8004088:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1d9      	bne.n	8004048 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	3314      	adds	r3, #20
 80040b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e1      	bne.n	8004094 <HAL_UART_IRQHandler+0x2fc>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
<<<<<<< HEAD
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3314      	adds	r3, #20
 8003d76:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d7a:	e853 3f00 	ldrex	r3, [r3]
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	3314      	adds	r3, #20
 8003d90:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d94:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d96:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d9a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e3      	bne.n	8003d70 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	330c      	adds	r3, #12
 8003dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc8:	f023 0310 	bic.w	r3, r3, #16
 8003dcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dda:	65ba      	str	r2, [r7, #88]	; 0x58
 8003ddc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dde:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003de2:	e841 2300 	strex	r3, r2, [r1]
 8003de6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003de8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1e3      	bne.n	8003db6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df2:	4618      	mov	r0, r3
 8003df4:	f7fd fdc7 	bl	8001986 <HAL_DMA_Abort>
=======
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fc:	e841 2300 	strex	r3, r2, [r1]
 8004100:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e3      	bne.n	80040d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	330c      	adds	r3, #12
 800411c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800413a:	65ba      	str	r2, [r7, #88]	; 0x58
 800413c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004140:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004148:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e3      	bne.n	8004116 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004152:	4618      	mov	r0, r3
 8004154:	f7fd fdc7 	bl	8001ce6 <HAL_DMA_Abort>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
<<<<<<< HEAD
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f8b6 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e14:	e09c      	b.n	8003f50 <HAL_UART_IRQHandler+0x518>
 8003e16:	bf00      	nop
 8003e18:	080041a9 	.word	0x080041a9
=======
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004166:	b29b      	uxth	r3, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	b29b      	uxth	r3, r3
 800416c:	4619      	mov	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f8b6 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004174:	e09c      	b.n	80042b0 <HAL_UART_IRQHandler+0x518>
 8004176:	bf00      	nop
 8004178:	08004509 	.word	0x08004509
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
<<<<<<< HEAD
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 808e 	beq.w	8003f54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8089 	beq.w	8003f54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	330c      	adds	r3, #12
 8003e48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e66:	647a      	str	r2, [r7, #68]	; 0x44
 8003e68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e3      	bne.n	8003e42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	623b      	str	r3, [r7, #32]
   return(result);
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3314      	adds	r3, #20
 8003e9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e9e:	633a      	str	r2, [r7, #48]	; 0x30
 8003ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ea6:	e841 2300 	strex	r3, r2, [r1]
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1e3      	bne.n	8003e7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	330c      	adds	r3, #12
 8003ec6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	e853 3f00 	ldrex	r3, [r3]
 8003ece:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0310 	bic.w	r3, r3, #16
 8003ed6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	330c      	adds	r3, #12
 8003ee0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ee4:	61fa      	str	r2, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee8:	69b9      	ldr	r1, [r7, #24]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	e841 2300 	strex	r3, r2, [r1]
 8003ef0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e3      	bne.n	8003ec0 <HAL_UART_IRQHandler+0x488>
=======
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004184:	b29b      	uxth	r3, r3
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 808e 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004198:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8089 	beq.w	80042b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	330c      	adds	r3, #12
 80041a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ac:	e853 3f00 	ldrex	r3, [r3]
 80041b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041c6:	647a      	str	r2, [r7, #68]	; 0x44
 80041c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041ce:	e841 2300 	strex	r3, r2, [r1]
 80041d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1e3      	bne.n	80041a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	3314      	adds	r3, #20
 80041e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	e853 3f00 	ldrex	r3, [r3]
 80041e8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	f023 0301 	bic.w	r3, r3, #1
 80041f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3314      	adds	r3, #20
 80041fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004200:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e3      	bne.n	80041da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	e853 3f00 	ldrex	r3, [r3]
 800422e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f023 0310 	bic.w	r3, r3, #16
 8004236:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	330c      	adds	r3, #12
 8004240:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004244:	61fa      	str	r2, [r7, #28]
 8004246:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	e841 2300 	strex	r3, r2, [r1]
 8004250:	617b      	str	r3, [r7, #20]
   return(result);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1e3      	bne.n	8004220 <HAL_UART_IRQHandler+0x488>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
<<<<<<< HEAD
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
<<<<<<< HEAD
 8003efe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 f83b 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f0a:	e023      	b.n	8003f54 <HAL_UART_IRQHandler+0x51c>
=======
 800425e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f83b 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800426a:	e023      	b.n	80042b4 <HAL_UART_IRQHandler+0x51c>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
<<<<<<< HEAD
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d009      	beq.n	8003f2c <HAL_UART_IRQHandler+0x4f4>
 8003f18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f953 	bl	80041d0 <UART_Transmit_IT>
    return;
 8003f2a:	e014      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
=======
 800426c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d009      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
 8004278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800427c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004280:	2b00      	cmp	r3, #0
 8004282:	d003      	beq.n	800428c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f000 f953 	bl	8004530 <UART_Transmit_IT>
    return;
 800428a:	e014      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
<<<<<<< HEAD
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00e      	beq.n	8003f56 <HAL_UART_IRQHandler+0x51e>
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d008      	beq.n	8003f56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f992 	bl	800426e <UART_EndTransmit_IT>
    return;
 8003f4a:	e004      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
    return;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_UART_IRQHandler+0x51e>
      return;
 8003f54:	bf00      	nop
  }
}
 8003f56:	37e8      	adds	r7, #232	; 0xe8
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_UART_TxCpltCallback>:
=======
 800428c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00e      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
 8004298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f992 	bl	80045ce <UART_EndTransmit_IT>
    return;
 80042aa:	e004      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80042b4:	bf00      	nop
  }
}
 80042b6:	37e8      	adds	r7, #232	; 0xe8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_UART_TxCpltCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
=======
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bc80      	pop	{r7}
 8003f6c:	4770      	bx	lr

08003f6e <HAL_UART_ErrorCallback>:
=======
 80042c4:	bf00      	nop
 80042c6:	370c      	adds	r7, #12
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <HAL_UART_ErrorCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
=======
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bc80      	pop	{r7}
 8003f7e:	4770      	bx	lr

08003f80 <HAL_UARTEx_RxEventCallback>:
=======
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	bc80      	pop	{r7}
 80042de:	4770      	bx	lr

080042e0 <HAL_UARTEx_RxEventCallback>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
<<<<<<< HEAD
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	460b      	mov	r3, r1
 8003f8a:	807b      	strh	r3, [r7, #2]
=======
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	807b      	strh	r3, [r7, #2]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
<<<<<<< HEAD
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bc80      	pop	{r7}
 8003f94:	4770      	bx	lr

08003f96 <UART_WaitOnFlagUntilTimeout>:
=======
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bc80      	pop	{r7}
 80042f4:	4770      	bx	lr

080042f6 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b090      	sub	sp, #64	; 0x40
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	60f8      	str	r0, [r7, #12]
 8003f9e:	60b9      	str	r1, [r7, #8]
 8003fa0:	603b      	str	r3, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa6:	e050      	b.n	800404a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003faa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fae:	d04c      	beq.n	800404a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	f7fc ff53 	bl	8000e60 <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	1ad3      	subs	r3, r2, r3
 8003fc0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d241      	bcs.n	800404a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	330c      	adds	r3, #12
 8003fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fe6:	637a      	str	r2, [r7, #52]	; 0x34
 8003fe8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	613b      	str	r3, [r7, #16]
   return(result);
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	63bb      	str	r3, [r7, #56]	; 0x38
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401a:	623a      	str	r2, [r7, #32]
 800401c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	69f9      	ldr	r1, [r7, #28]
 8004020:	6a3a      	ldr	r2, [r7, #32]
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	61bb      	str	r3, [r7, #24]
   return(result);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2220      	movs	r2, #32
 8004032:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2220      	movs	r2, #32
 800403a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e00f      	b.n	800406a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	4013      	ands	r3, r2
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	429a      	cmp	r2, r3
 8004058:	bf0c      	ite	eq
 800405a:	2301      	moveq	r3, #1
 800405c:	2300      	movne	r3, #0
 800405e:	b2db      	uxtb	r3, r3
 8004060:	461a      	mov	r2, r3
 8004062:	79fb      	ldrb	r3, [r7, #7]
 8004064:	429a      	cmp	r2, r3
 8004066:	d09f      	beq.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b090      	sub	sp, #64	; 0x40
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e050      	b.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430e:	d04c      	beq.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004310:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
 8004316:	f7fc fe9d 	bl	8001054 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004322:	429a      	cmp	r2, r3
 8004324:	d241      	bcs.n	80043aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	330c      	adds	r3, #12
 800432c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800433c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	330c      	adds	r3, #12
 8004344:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004346:	637a      	str	r2, [r7, #52]	; 0x34
 8004348:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800434c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e5      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3314      	adds	r3, #20
 8004360:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	613b      	str	r3, [r7, #16]
   return(result);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f023 0301 	bic.w	r3, r3, #1
 8004370:	63bb      	str	r3, [r7, #56]	; 0x38
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3314      	adds	r3, #20
 8004378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800437a:	623a      	str	r2, [r7, #32]
 800437c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437e:	69f9      	ldr	r1, [r7, #28]
 8004380:	6a3a      	ldr	r2, [r7, #32]
 8004382:	e841 2300 	strex	r3, r2, [r1]
 8004386:	61bb      	str	r3, [r7, #24]
   return(result);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e00f      	b.n	80043ca <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	4013      	ands	r3, r2
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	bf0c      	ite	eq
 80043ba:	2301      	moveq	r3, #1
 80043bc:	2300      	movne	r3, #0
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d09f      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3740      	adds	r7, #64	; 0x40
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <UART_Start_Receive_IT>:
=======
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3740      	adds	r7, #64	; 0x40
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <UART_Start_Receive_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8004072:	b480      	push	{r7}
 8004074:	b085      	sub	sp, #20
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	4613      	mov	r3, r2
 800407e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2222      	movs	r2, #34	; 0x22
 800409c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d007      	beq.n	80040b8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040b6:	60da      	str	r2, [r3, #12]
=======
 80043d2:	b480      	push	{r7}
 80043d4:	b085      	sub	sp, #20
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	60f8      	str	r0, [r7, #12]
 80043da:	60b9      	str	r1, [r7, #8]
 80043dc:	4613      	mov	r3, r2
 80043de:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	68ba      	ldr	r2, [r7, #8]
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	88fa      	ldrh	r2, [r7, #6]
 80043ea:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2222      	movs	r2, #34	; 0x22
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d007      	beq.n	8004418 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004416:	60da      	str	r2, [r3, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
<<<<<<< HEAD
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	695a      	ldr	r2, [r3, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bc80      	pop	{r7}
 80040e2:	4770      	bx	lr

080040e4 <UART_EndRxTransfer>:
=======
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68da      	ldr	r2, [r3, #12]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f042 0220 	orr.w	r2, r2, #32
 8004436:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	bc80      	pop	{r7}
 8004442:	4770      	bx	lr

08004444 <UART_EndRxTransfer>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80040e4:	b480      	push	{r7}
 80040e6:	b095      	sub	sp, #84	; 0x54
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f6:	e853 3f00 	ldrex	r3, [r3]
 80040fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004102:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	330c      	adds	r3, #12
 800410a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800410c:	643a      	str	r2, [r7, #64]	; 0x40
 800410e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004110:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004112:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004114:	e841 2300 	strex	r3, r2, [r1]
 8004118:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1e5      	bne.n	80040ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	3314      	adds	r3, #20
 8004126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6a3b      	ldr	r3, [r7, #32]
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f023 0301 	bic.w	r3, r3, #1
 8004136:	64bb      	str	r3, [r7, #72]	; 0x48
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	3314      	adds	r3, #20
 800413e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004140:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e5      	bne.n	8004120 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b01      	cmp	r3, #1
 800415a:	d119      	bne.n	8004190 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	60bb      	str	r3, [r7, #8]
   return(result);
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f023 0310 	bic.w	r3, r3, #16
 8004172:	647b      	str	r3, [r7, #68]	; 0x44
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800417c:	61ba      	str	r2, [r7, #24]
 800417e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6979      	ldr	r1, [r7, #20]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	613b      	str	r3, [r7, #16]
   return(result);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_EndRxTransfer+0x78>
=======
 8004444:	b480      	push	{r7}
 8004446:	b095      	sub	sp, #84	; 0x54
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800445c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800446c:	643a      	str	r2, [r7, #64]	; 0x40
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004472:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800447a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e5      	bne.n	800444c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6a3b      	ldr	r3, [r7, #32]
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	64bb      	str	r3, [r7, #72]	; 0x48
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3314      	adds	r3, #20
 800449e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a8:	e841 2300 	strex	r3, r2, [r1]
 80044ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1e5      	bne.n	8004480 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d119      	bne.n	80044f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	330c      	adds	r3, #12
 80044c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f023 0310 	bic.w	r3, r3, #16
 80044d2:	647b      	str	r3, [r7, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	330c      	adds	r3, #12
 80044da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044dc:	61ba      	str	r2, [r7, #24]
 80044de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_EndRxTransfer+0x78>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800419e:	bf00      	nop
 80041a0:	3754      	adds	r7, #84	; 0x54
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bc80      	pop	{r7}
 80041a6:	4770      	bx	lr

080041a8 <UART_DMAAbortOnError>:
=======
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80044fe:	bf00      	nop
 8004500:	3754      	adds	r7, #84	; 0x54
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <UART_DMAAbortOnError>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	84da      	strh	r2, [r3, #38]	; 0x26
=======
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	84da      	strh	r2, [r3, #38]	; 0x26
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
<<<<<<< HEAD
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7ff fed3 	bl	8003f6e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c8:	bf00      	nop
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <UART_Transmit_IT>:
=======
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fed3 	bl	80042ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <UART_Transmit_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
=======
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
<<<<<<< HEAD
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	2b21      	cmp	r3, #33	; 0x21
 80041e2:	d13e      	bne.n	8004262 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ec:	d114      	bne.n	8004218 <UART_Transmit_IT+0x48>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d110      	bne.n	8004218 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	461a      	mov	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800420a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	1c9a      	adds	r2, r3, #2
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	621a      	str	r2, [r3, #32]
 8004216:	e008      	b.n	800422a <UART_Transmit_IT+0x5a>
=======
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800453e:	b2db      	uxtb	r3, r3
 8004540:	2b21      	cmp	r3, #33	; 0x21
 8004542:	d13e      	bne.n	80045c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800454c:	d114      	bne.n	8004578 <UART_Transmit_IT+0x48>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d110      	bne.n	8004578 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
 800455a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800456a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	1c9a      	adds	r2, r3, #2
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	621a      	str	r2, [r3, #32]
 8004576:	e008      	b.n	800458a <UART_Transmit_IT+0x5a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
<<<<<<< HEAD
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	1c59      	adds	r1, r3, #1
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	6211      	str	r1, [r2, #32]
 8004222:	781a      	ldrb	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800422e:	b29b      	uxth	r3, r3
 8004230:	3b01      	subs	r3, #1
 8004232:	b29b      	uxth	r3, r3
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4619      	mov	r1, r3
 8004238:	84d1      	strh	r1, [r2, #38]	; 0x26
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10f      	bne.n	800425e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800424c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68da      	ldr	r2, [r3, #12]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800425c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	e000      	b.n	8004264 <UART_Transmit_IT+0x94>
=======
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	1c59      	adds	r1, r3, #1
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6211      	str	r1, [r2, #32]
 8004582:	781a      	ldrb	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29b      	uxth	r3, r3
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	4619      	mov	r1, r3
 8004598:	84d1      	strh	r1, [r2, #38]	; 0x26
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68da      	ldr	r2, [r3, #12]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80045ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68da      	ldr	r2, [r3, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <UART_Transmit_IT+0x94>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004262:	2302      	movs	r3, #2
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	bc80      	pop	{r7}
 800426c:	4770      	bx	lr

0800426e <UART_EndTransmit_IT>:
=======
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <UART_EndTransmit_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004284:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
=======
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b082      	sub	sp, #8
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
<<<<<<< HEAD
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fe64 	bl	8003f5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <UART_Receive_IT>:
=======
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff fe64 	bl	80042bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3708      	adds	r7, #8
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}

080045fe <UART_Receive_IT>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800429e:	b580      	push	{r7, lr}
 80042a0:	b08c      	sub	sp, #48	; 0x30
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
=======
 80045fe:	b580      	push	{r7, lr}
 8004600:	b08c      	sub	sp, #48	; 0x30
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
<<<<<<< HEAD
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b22      	cmp	r3, #34	; 0x22
 80042b0:	f040 80ae 	bne.w	8004410 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042bc:	d117      	bne.n	80042ee <UART_Receive_IT+0x50>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d113      	bne.n	80042ee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042c6:	2300      	movs	r3, #0
 80042c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042dc:	b29a      	uxth	r2, r3
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	1c9a      	adds	r2, r3, #2
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
 80042ec:	e026      	b.n	800433c <UART_Receive_IT+0x9e>
=======
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b22      	cmp	r3, #34	; 0x22
 8004610:	f040 80ae 	bne.w	8004770 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d117      	bne.n	800464e <UART_Receive_IT+0x50>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d113      	bne.n	800464e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	b29b      	uxth	r3, r3
 8004638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800463c:	b29a      	uxth	r2, r3
 800463e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004640:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	1c9a      	adds	r2, r3, #2
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28
 800464c:	e026      	b.n	800469c <UART_Receive_IT+0x9e>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
<<<<<<< HEAD
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d007      	beq.n	8004312 <UART_Receive_IT+0x74>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10a      	bne.n	8004320 <UART_Receive_IT+0x82>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d106      	bne.n	8004320 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e008      	b.n	8004332 <UART_Receive_IT+0x94>
=======
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004660:	d007      	beq.n	8004672 <UART_Receive_IT+0x74>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <UART_Receive_IT+0x82>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d106      	bne.n	8004680 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b2da      	uxtb	r2, r3
 800467a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467c:	701a      	strb	r2, [r3, #0]
 800467e:	e008      	b.n	8004692 <UART_Receive_IT+0x94>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
<<<<<<< HEAD
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800432c:	b2da      	uxtb	r2, r3
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29b      	uxth	r3, r3
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4619      	mov	r1, r3
 800434a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800434c:	2b00      	cmp	r3, #0
 800434e:	d15d      	bne.n	800440c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0220 	bic.w	r2, r2, #32
 800435e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800436e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 0201 	bic.w	r2, r2, #1
 800437e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2220      	movs	r2, #32
 8004384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	635a      	str	r2, [r3, #52]	; 0x34
=======
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b2db      	uxtb	r3, r3
 8004688:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800468c:	b2da      	uxtb	r2, r3
 800468e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004690:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	1c5a      	adds	r2, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4619      	mov	r1, r3
 80046aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d15d      	bne.n	800476c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f022 0220 	bic.w	r2, r2, #32
 80046be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 0201 	bic.w	r2, r2, #1
 80046de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	635a      	str	r2, [r3, #52]	; 0x34
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004392:	2b01      	cmp	r3, #1
 8004394:	d135      	bne.n	8004402 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	330c      	adds	r3, #12
 80043a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 0310 	bic.w	r3, r3, #16
 80043b2:	627b      	str	r3, [r7, #36]	; 0x24
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043bc:	623a      	str	r2, [r7, #32]
 80043be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0310 	and.w	r3, r3, #16
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d10a      	bne.n	80043f4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043de:	2300      	movs	r3, #0
 80043e0:	60fb      	str	r3, [r7, #12]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	60fb      	str	r3, [r7, #12]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
 80043f2:	68fb      	ldr	r3, [r7, #12]
=======
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d135      	bne.n	8004762 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	330c      	adds	r3, #12
 8004702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	e853 3f00 	ldrex	r3, [r3]
 800470a:	613b      	str	r3, [r7, #16]
   return(result);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f023 0310 	bic.w	r3, r3, #16
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	330c      	adds	r3, #12
 800471a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800471c:	623a      	str	r2, [r7, #32]
 800471e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004720:	69f9      	ldr	r1, [r7, #28]
 8004722:	6a3a      	ldr	r2, [r7, #32]
 8004724:	e841 2300 	strex	r3, r2, [r1]
 8004728:	61bb      	str	r3, [r7, #24]
   return(result);
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d1e5      	bne.n	80046fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0310 	and.w	r3, r3, #16
 800473a:	2b10      	cmp	r3, #16
 800473c:	d10a      	bne.n	8004754 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	68fb      	ldr	r3, [r7, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
<<<<<<< HEAD
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff fdc0 	bl	8003f80 <HAL_UARTEx_RxEventCallback>
 8004400:	e002      	b.n	8004408 <UART_Receive_IT+0x16a>
=======
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fdc0 	bl	80042e0 <HAL_UARTEx_RxEventCallback>
 8004760:	e002      	b.n	8004768 <UART_Receive_IT+0x16a>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
<<<<<<< HEAD
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f7fc fa0a 	bl	800081c <HAL_UART_RxCpltCallback>
=======
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f7fc f86c 	bl	8000840 <HAL_UART_RxCpltCallback>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
<<<<<<< HEAD
 8004408:	2300      	movs	r3, #0
 800440a:	e002      	b.n	8004412 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <UART_Receive_IT+0x174>
=======
 8004768:	2300      	movs	r3, #0
 800476a:	e002      	b.n	8004772 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800476c:	2300      	movs	r3, #0
 800476e:	e000      	b.n	8004772 <UART_Receive_IT+0x174>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    return HAL_BUSY;
<<<<<<< HEAD
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3730      	adds	r7, #48	; 0x30
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
	...

0800441c <UART_SetConfig>:
=======
 8004770:	2302      	movs	r3, #2
  }
}
 8004772:	4618      	mov	r0, r3
 8004774:	3730      	adds	r7, #48	; 0x30
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <UART_SetConfig>:
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
=======
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	611a      	str	r2, [r3, #16]
=======
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	611a      	str	r2, [r3, #16]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
<<<<<<< HEAD
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	4313      	orrs	r3, r2
 800444a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004456:	f023 030c 	bic.w	r3, r3, #12
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	430b      	orrs	r3, r1
 8004462:	60d3      	str	r3, [r2, #12]
=======
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689a      	ldr	r2, [r3, #8]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80047b6:	f023 030c 	bic.w	r3, r3, #12
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	68b9      	ldr	r1, [r7, #8]
 80047c0:	430b      	orrs	r3, r1
 80047c2:	60d3      	str	r3, [r2, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
<<<<<<< HEAD
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a2c      	ldr	r2, [pc, #176]	; (8004530 <UART_SetConfig+0x114>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d103      	bne.n	800448c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004484:	f7fe f8dc 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	e002      	b.n	8004492 <UART_SetConfig+0x76>
=======
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699a      	ldr	r2, [r3, #24]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a2c      	ldr	r2, [pc, #176]	; (8004890 <UART_SetConfig+0x114>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d103      	bne.n	80047ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80047e4:	f7fe f8dc 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 80047e8:	60f8      	str	r0, [r7, #12]
 80047ea:	e002      	b.n	80047f2 <UART_SetConfig+0x76>
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
<<<<<<< HEAD
 800448c:	f7fe f8c4 	bl	8002618 <HAL_RCC_GetPCLK1Freq>
 8004490:	60f8      	str	r0, [r7, #12]
=======
 80047ec:	f7fe f8c4 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 80047f0:	60f8      	str	r0, [r7, #12]
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
<<<<<<< HEAD
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009a      	lsls	r2, r3, #2
 800449c:	441a      	add	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a8:	4a22      	ldr	r2, [pc, #136]	; (8004534 <UART_SetConfig+0x118>)
 80044aa:	fba2 2303 	umull	r2, r3, r2, r3
 80044ae:	095b      	lsrs	r3, r3, #5
 80044b0:	0119      	lsls	r1, r3, #4
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009a      	lsls	r2, r3, #2
 80044bc:	441a      	add	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <UART_SetConfig+0x118>)
 80044ca:	fba3 0302 	umull	r0, r3, r3, r2
 80044ce:	095b      	lsrs	r3, r3, #5
 80044d0:	2064      	movs	r0, #100	; 0x64
 80044d2:	fb00 f303 	mul.w	r3, r0, r3
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	011b      	lsls	r3, r3, #4
 80044da:	3332      	adds	r3, #50	; 0x32
 80044dc:	4a15      	ldr	r2, [pc, #84]	; (8004534 <UART_SetConfig+0x118>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	095b      	lsrs	r3, r3, #5
 80044e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e8:	4419      	add	r1, r3
 80044ea:	68fa      	ldr	r2, [r7, #12]
 80044ec:	4613      	mov	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	009a      	lsls	r2, r3, #2
 80044f4:	441a      	add	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <UART_SetConfig+0x118>)
 8004502:	fba3 0302 	umull	r0, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2064      	movs	r0, #100	; 0x64
 800450a:	fb00 f303 	mul.w	r3, r0, r3
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	3332      	adds	r3, #50	; 0x32
 8004514:	4a07      	ldr	r2, [pc, #28]	; (8004534 <UART_SetConfig+0x118>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	f003 020f 	and.w	r2, r3, #15
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	440a      	add	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004528:	bf00      	nop
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40013800 	.word	0x40013800
 8004534:	51eb851f 	.word	0x51eb851f

08004538 <__libc_init_array>:
 8004538:	b570      	push	{r4, r5, r6, lr}
 800453a:	2600      	movs	r6, #0
 800453c:	4d0c      	ldr	r5, [pc, #48]	; (8004570 <__libc_init_array+0x38>)
 800453e:	4c0d      	ldr	r4, [pc, #52]	; (8004574 <__libc_init_array+0x3c>)
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	42a6      	cmp	r6, r4
 8004546:	d109      	bne.n	800455c <__libc_init_array+0x24>
 8004548:	f000 f822 	bl	8004590 <_init>
 800454c:	2600      	movs	r6, #0
 800454e:	4d0a      	ldr	r5, [pc, #40]	; (8004578 <__libc_init_array+0x40>)
 8004550:	4c0a      	ldr	r4, [pc, #40]	; (800457c <__libc_init_array+0x44>)
 8004552:	1b64      	subs	r4, r4, r5
 8004554:	10a4      	asrs	r4, r4, #2
 8004556:	42a6      	cmp	r6, r4
 8004558:	d105      	bne.n	8004566 <__libc_init_array+0x2e>
 800455a:	bd70      	pop	{r4, r5, r6, pc}
 800455c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004560:	4798      	blx	r3
 8004562:	3601      	adds	r6, #1
 8004564:	e7ee      	b.n	8004544 <__libc_init_array+0xc>
 8004566:	f855 3b04 	ldr.w	r3, [r5], #4
 800456a:	4798      	blx	r3
 800456c:	3601      	adds	r6, #1
 800456e:	e7f2      	b.n	8004556 <__libc_init_array+0x1e>
 8004570:	080045e8 	.word	0x080045e8
 8004574:	080045e8 	.word	0x080045e8
 8004578:	080045e8 	.word	0x080045e8
 800457c:	080045ec 	.word	0x080045ec

08004580 <memset>:
 8004580:	4603      	mov	r3, r0
 8004582:	4402      	add	r2, r0
 8004584:	4293      	cmp	r3, r2
 8004586:	d100      	bne.n	800458a <memset+0xa>
 8004588:	4770      	bx	lr
 800458a:	f803 1b01 	strb.w	r1, [r3], #1
 800458e:	e7f9      	b.n	8004584 <memset+0x4>

08004590 <_init>:
 8004590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004592:	bf00      	nop
 8004594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004596:	bc08      	pop	{r3}
 8004598:	469e      	mov	lr, r3
 800459a:	4770      	bx	lr

0800459c <_fini>:
 800459c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459e:	bf00      	nop
 80045a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045a2:	bc08      	pop	{r3}
 80045a4:	469e      	mov	lr, r3
 80045a6:	4770      	bx	lr
=======
 80047f2:	68fa      	ldr	r2, [r7, #12]
 80047f4:	4613      	mov	r3, r2
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	4413      	add	r3, r2
 80047fa:	009a      	lsls	r2, r3, #2
 80047fc:	441a      	add	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	4a22      	ldr	r2, [pc, #136]	; (8004894 <UART_SetConfig+0x118>)
 800480a:	fba2 2303 	umull	r2, r3, r2, r3
 800480e:	095b      	lsrs	r3, r3, #5
 8004810:	0119      	lsls	r1, r3, #4
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009a      	lsls	r2, r3, #2
 800481c:	441a      	add	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	fbb2 f2f3 	udiv	r2, r2, r3
 8004828:	4b1a      	ldr	r3, [pc, #104]	; (8004894 <UART_SetConfig+0x118>)
 800482a:	fba3 0302 	umull	r0, r3, r3, r2
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	2064      	movs	r0, #100	; 0x64
 8004832:	fb00 f303 	mul.w	r3, r0, r3
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	3332      	adds	r3, #50	; 0x32
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <UART_SetConfig+0x118>)
 800483e:	fba2 2303 	umull	r2, r3, r2, r3
 8004842:	095b      	lsrs	r3, r3, #5
 8004844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004848:	4419      	add	r1, r3
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4613      	mov	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	009a      	lsls	r2, r3, #2
 8004854:	441a      	add	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004860:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <UART_SetConfig+0x118>)
 8004862:	fba3 0302 	umull	r0, r3, r3, r2
 8004866:	095b      	lsrs	r3, r3, #5
 8004868:	2064      	movs	r0, #100	; 0x64
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	3332      	adds	r3, #50	; 0x32
 8004874:	4a07      	ldr	r2, [pc, #28]	; (8004894 <UART_SetConfig+0x118>)
 8004876:	fba2 2303 	umull	r2, r3, r2, r3
 800487a:	095b      	lsrs	r3, r3, #5
 800487c:	f003 020f 	and.w	r2, r3, #15
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	440a      	add	r2, r1
 8004886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004888:	bf00      	nop
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40013800 	.word	0x40013800
 8004894:	51eb851f 	.word	0x51eb851f

08004898 <__libc_init_array>:
 8004898:	b570      	push	{r4, r5, r6, lr}
 800489a:	2600      	movs	r6, #0
 800489c:	4d0c      	ldr	r5, [pc, #48]	; (80048d0 <__libc_init_array+0x38>)
 800489e:	4c0d      	ldr	r4, [pc, #52]	; (80048d4 <__libc_init_array+0x3c>)
 80048a0:	1b64      	subs	r4, r4, r5
 80048a2:	10a4      	asrs	r4, r4, #2
 80048a4:	42a6      	cmp	r6, r4
 80048a6:	d109      	bne.n	80048bc <__libc_init_array+0x24>
 80048a8:	f000 f822 	bl	80048f0 <_init>
 80048ac:	2600      	movs	r6, #0
 80048ae:	4d0a      	ldr	r5, [pc, #40]	; (80048d8 <__libc_init_array+0x40>)
 80048b0:	4c0a      	ldr	r4, [pc, #40]	; (80048dc <__libc_init_array+0x44>)
 80048b2:	1b64      	subs	r4, r4, r5
 80048b4:	10a4      	asrs	r4, r4, #2
 80048b6:	42a6      	cmp	r6, r4
 80048b8:	d105      	bne.n	80048c6 <__libc_init_array+0x2e>
 80048ba:	bd70      	pop	{r4, r5, r6, pc}
 80048bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80048c0:	4798      	blx	r3
 80048c2:	3601      	adds	r6, #1
 80048c4:	e7ee      	b.n	80048a4 <__libc_init_array+0xc>
 80048c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ca:	4798      	blx	r3
 80048cc:	3601      	adds	r6, #1
 80048ce:	e7f2      	b.n	80048b6 <__libc_init_array+0x1e>
 80048d0:	08004948 	.word	0x08004948
 80048d4:	08004948 	.word	0x08004948
 80048d8:	08004948 	.word	0x08004948
 80048dc:	0800494c 	.word	0x0800494c

080048e0 <memset>:
 80048e0:	4603      	mov	r3, r0
 80048e2:	4402      	add	r2, r0
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d100      	bne.n	80048ea <memset+0xa>
 80048e8:	4770      	bx	lr
 80048ea:	f803 1b01 	strb.w	r1, [r3], #1
 80048ee:	e7f9      	b.n	80048e4 <memset+0x4>

080048f0 <_init>:
 80048f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048f2:	bf00      	nop
 80048f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048f6:	bc08      	pop	{r3}
 80048f8:	469e      	mov	lr, r3
 80048fa:	4770      	bx	lr

080048fc <_fini>:
 80048fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048fe:	bf00      	nop
 8004900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004902:	bc08      	pop	{r3}
 8004904:	469e      	mov	lr, r3
 8004906:	4770      	bx	lr
>>>>>>> c499ee18f90316c201fdafdd6c6c334d44865699
