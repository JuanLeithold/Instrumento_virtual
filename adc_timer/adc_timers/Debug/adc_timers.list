
adc_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080038bc  080038bc  000138bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800398c  0800398c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800398c  0800398c  0001398c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003990  08003990  00013990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08003a04  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08003a04  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afdd  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd5  00000000  00000000  0002b076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bd0  00000000  00000000  0002ce50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad8  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a8b  00000000  00000000  0002e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca1b  00000000  00000000  00046f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e859  00000000  00000000  0005399e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e21f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000e2248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a4 	.word	0x080038a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080038a4 	.word	0x080038a4

0800014c <MUX_SelectChannel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

	void MUX_SelectChannel(canal){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]

	switch (canal){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b07      	cmp	r3, #7
 8000158:	d84f      	bhi.n	80001fa <MUX_SelectChannel+0xae>
 800015a:	a201      	add	r2, pc, #4	; (adr r2, 8000160 <MUX_SelectChannel+0x14>)
 800015c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000160:	08000181 	.word	0x08000181
 8000164:	080001a7 	.word	0x080001a7
 8000168:	080001b3 	.word	0x080001b3
 800016c:	080001bf 	.word	0x080001bf
 8000170:	080001cb 	.word	0x080001cb
 8000174:	080001d7 	.word	0x080001d7
 8000178:	080001e3 	.word	0x080001e3
 800017c:	080001ef 	.word	0x080001ef
	case 0:
		        HAL_GPIO_WritePin(MUXA_GPIO_Port, MUXA_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000186:	481f      	ldr	r0, [pc, #124]	; (8000204 <MUX_SelectChannel+0xb8>)
 8000188:	f001 fb02 	bl	8001790 <HAL_GPIO_WritePin>
			 	HAL_GPIO_WritePin(MUXB_GPIO_Port, MUXB_Pin, GPIO_PIN_RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000192:	481c      	ldr	r0, [pc, #112]	; (8000204 <MUX_SelectChannel+0xb8>)
 8000194:	f001 fafc 	bl	8001790 <HAL_GPIO_WritePin>
			 	HAL_GPIO_WritePin(MUXC_GPIO_Port, MUXC_Pin, GPIO_PIN_RESET);//CH0
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800019e:	4819      	ldr	r0, [pc, #100]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001a0:	f001 faf6 	bl	8001790 <HAL_GPIO_WritePin>
				 break;
 80001a4:	e029      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 1:
		HAL_GPIO_TogglePin(MUXC_GPIO_Port, MUXC_Pin);//001 CH1
 80001a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001aa:	4816      	ldr	r0, [pc, #88]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001ac:	f001 fb08 	bl	80017c0 <HAL_GPIO_TogglePin>

				 break;
 80001b0:	e023      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 2:
		HAL_GPIO_TogglePin(MUXB_GPIO_Port, MUXB_Pin);//011 CH3
 80001b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001b6:	4813      	ldr	r0, [pc, #76]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001b8:	f001 fb02 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001bc:	e01d      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 3:
		HAL_GPIO_TogglePin(MUXC_GPIO_Port, MUXC_Pin);//010 CH2
 80001be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001c2:	4810      	ldr	r0, [pc, #64]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001c4:	f001 fafc 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001c8:	e017      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 4:
		HAL_GPIO_TogglePin(MUXA_GPIO_Port, MUXA_Pin);//110 CH6
 80001ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ce:	480d      	ldr	r0, [pc, #52]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001d0:	f001 faf6 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001d4:	e011      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 5:
		HAL_GPIO_TogglePin(MUXC_GPIO_Port, MUXC_Pin);//111 CH7
 80001d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001da:	480a      	ldr	r0, [pc, #40]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001dc:	f001 faf0 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001e0:	e00b      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 6:
		HAL_GPIO_TogglePin(MUXB_GPIO_Port, MUXB_Pin);//101 CH5
 80001e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001e8:	f001 faea 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001ec:	e005      	b.n	80001fa <MUX_SelectChannel+0xae>
	case 7:
		HAL_GPIO_TogglePin(MUXC_GPIO_Port, MUXC_Pin);//100 CH4
 80001ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001f2:	4804      	ldr	r0, [pc, #16]	; (8000204 <MUX_SelectChannel+0xb8>)
 80001f4:	f001 fae4 	bl	80017c0 <HAL_GPIO_TogglePin>
				 break;
 80001f8:	bf00      	nop

	}
}
 80001fa:	bf00      	nop
 80001fc:	3708      	adds	r7, #8
 80001fe:	46bd      	mov	sp, r7
 8000200:	bd80      	pop	{r7, pc}
 8000202:	bf00      	nop
 8000204:	40010c00 	.word	0x40010c00

08000208 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800020c:	f000 fbc4 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000210:	f000 f81e 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000214:	f000 f952 	bl	80004bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000218:	f000 f876 	bl	8000308 <MX_ADC1_Init>
  MX_TIM2_Init();
 800021c:	f000 f8b2 	bl	8000384 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000220:	f000 f8fe 	bl	8000420 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000224:	4807      	ldr	r0, [pc, #28]	; (8000244 <main+0x3c>)
 8000226:	f000 fcf1 	bl	8000c0c <HAL_ADC_Start_IT>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <main+0x2c>
 	  Error_Handler();
 8000230:	f000 f9e4 	bl	80005fc <Error_Handler>

  HAL_TIM_Base_Start_IT(&htim4);
 8000234:	4804      	ldr	r0, [pc, #16]	; (8000248 <main+0x40>)
 8000236:	f001 ffc1 	bl	80021bc <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim2);
 800023a:	4804      	ldr	r0, [pc, #16]	; (800024c <main+0x44>)
 800023c:	f001 ffbe 	bl	80021bc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000240:	e7fe      	b.n	8000240 <main+0x38>
 8000242:	bf00      	nop
 8000244:	2000008c 	.word	0x2000008c
 8000248:	20000104 	.word	0x20000104
 800024c:	200000bc 	.word	0x200000bc

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b094      	sub	sp, #80	; 0x50
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800025a:	2228      	movs	r2, #40	; 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f002 fb84 	bl	800296c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
 8000270:	60da      	str	r2, [r3, #12]
 8000272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000274:	1d3b      	adds	r3, r7, #4
 8000276:	2200      	movs	r2, #0
 8000278:	601a      	str	r2, [r3, #0]
 800027a:	605a      	str	r2, [r3, #4]
 800027c:	609a      	str	r2, [r3, #8]
 800027e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000284:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000288:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028e:	2301      	movs	r3, #1
 8000290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000292:	2302      	movs	r3, #2
 8000294:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800029a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800029c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 faa4 	bl	80017f4 <HAL_RCC_OscConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002b2:	f000 f9a3 	bl	80005fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002b6:	230f      	movs	r3, #15
 80002b8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002be:	2300      	movs	r3, #0
 80002c0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002c8:	2300      	movs	r3, #0
 80002ca:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2102      	movs	r1, #2
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fd10 	bl	8001cf8 <HAL_RCC_ClockConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002de:	f000 f98d 	bl	80005fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002e2:	2302      	movs	r3, #2
 80002e4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ea:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4618      	mov	r0, r3
 80002f0:	f001 fe5e 	bl	8001fb0 <HAL_RCCEx_PeriphCLKConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002fa:	f000 f97f 	bl	80005fc <Error_Handler>
  }
}
 80002fe:	bf00      	nop
 8000300:	3750      	adds	r7, #80	; 0x50
 8000302:	46bd      	mov	sp, r7
 8000304:	bd80      	pop	{r7, pc}
	...

08000308 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800030e:	1d3b      	adds	r3, r7, #4
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
 8000314:	605a      	str	r2, [r3, #4]
 8000316:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000318:	4b18      	ldr	r3, [pc, #96]	; (800037c <MX_ADC1_Init+0x74>)
 800031a:	4a19      	ldr	r2, [pc, #100]	; (8000380 <MX_ADC1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_ADC1_Init+0x74>)
 8000320:	2200      	movs	r2, #0
 8000322:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_ADC1_Init+0x74>)
 8000326:	2201      	movs	r2, #1
 8000328:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800032a:	4b14      	ldr	r3, [pc, #80]	; (800037c <MX_ADC1_Init+0x74>)
 800032c:	2200      	movs	r2, #0
 800032e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000330:	4b12      	ldr	r3, [pc, #72]	; (800037c <MX_ADC1_Init+0x74>)
 8000332:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000336:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000338:	4b10      	ldr	r3, [pc, #64]	; (800037c <MX_ADC1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <MX_ADC1_Init+0x74>)
 8000340:	2201      	movs	r2, #1
 8000342:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <MX_ADC1_Init+0x74>)
 8000346:	f000 fb89 	bl	8000a5c <HAL_ADC_Init>
 800034a:	4603      	mov	r3, r0
 800034c:	2b00      	cmp	r3, #0
 800034e:	d001      	beq.n	8000354 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000350:	f000 f954 	bl	80005fc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000354:	2306      	movs	r3, #6
 8000356:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000358:	2301      	movs	r3, #1
 800035a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800035c:	2307      	movs	r3, #7
 800035e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_ADC1_Init+0x74>)
 8000366:	f000 fde5 	bl	8000f34 <HAL_ADC_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000370:	f000 f944 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	3710      	adds	r7, #16
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000008c 	.word	0x2000008c
 8000380:	40012400 	.word	0x40012400

08000384 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b086      	sub	sp, #24
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	2200      	movs	r2, #0
 8000390:	601a      	str	r2, [r3, #0]
 8000392:	605a      	str	r2, [r3, #4]
 8000394:	609a      	str	r2, [r3, #8]
 8000396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000398:	463b      	mov	r3, r7
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <MX_TIM2_Init+0x98>)
 80003a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80003a8:	4b1c      	ldr	r3, [pc, #112]	; (800041c <MX_TIM2_Init+0x98>)
 80003aa:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80003ae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b0:	4b1a      	ldr	r3, [pc, #104]	; (800041c <MX_TIM2_Init+0x98>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80003b6:	4b19      	ldr	r3, [pc, #100]	; (800041c <MX_TIM2_Init+0x98>)
 80003b8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80003bc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003be:	4b17      	ldr	r3, [pc, #92]	; (800041c <MX_TIM2_Init+0x98>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003c4:	4b15      	ldr	r3, [pc, #84]	; (800041c <MX_TIM2_Init+0x98>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003ca:	4814      	ldr	r0, [pc, #80]	; (800041c <MX_TIM2_Init+0x98>)
 80003cc:	f001 fea6 	bl	800211c <HAL_TIM_Base_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80003d6:	f000 f911 	bl	80005fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4619      	mov	r1, r3
 80003e6:	480d      	ldr	r0, [pc, #52]	; (800041c <MX_TIM2_Init+0x98>)
 80003e8:	f002 f842 	bl	8002470 <HAL_TIM_ConfigClockSource>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80003f2:	f000 f903 	bl	80005fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f6:	2300      	movs	r3, #0
 80003f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fa:	2300      	movs	r3, #0
 80003fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003fe:	463b      	mov	r3, r7
 8000400:	4619      	mov	r1, r3
 8000402:	4806      	ldr	r0, [pc, #24]	; (800041c <MX_TIM2_Init+0x98>)
 8000404:	f002 fa18 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800040e:	f000 f8f5 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	3718      	adds	r7, #24
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200000bc 	.word	0x200000bc

08000420 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM4_Init+0x94>)
 800043e:	4a1e      	ldr	r2, [pc, #120]	; (80004b8 <MX_TIM4_Init+0x98>)
 8000440:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 -1;
 8000442:	4b1c      	ldr	r3, [pc, #112]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000444:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000448:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044a:	4b1a      	ldr	r3, [pc, #104]	; (80004b4 <MX_TIM4_Init+0x94>)
 800044c:	2200      	movs	r2, #0
 800044e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 8000450:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000452:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000456:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_TIM4_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000466:	f001 fe59 	bl	800211c <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000470:	f000 f8c4 	bl	80005fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_TIM4_Init+0x94>)
 8000482:	f001 fff5 	bl	8002470 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800048c:	f000 f8b6 	bl	80005fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM4_Init+0x94>)
 800049e:	f002 f9cb 	bl	8002838 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f000 f8a8 	bl	80005fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	20000104 	.word	0x20000104
 80004b8:	40000800 	.word	0x40000800

080004bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c2:	f107 0310 	add.w	r3, r7, #16
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004d0:	4b27      	ldr	r3, [pc, #156]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004d2:	699b      	ldr	r3, [r3, #24]
 80004d4:	4a26      	ldr	r2, [pc, #152]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004d6:	f043 0320 	orr.w	r3, r3, #32
 80004da:	6193      	str	r3, [r2, #24]
 80004dc:	4b24      	ldr	r3, [pc, #144]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	f003 0320 	and.w	r3, r3, #32
 80004e4:	60fb      	str	r3, [r7, #12]
 80004e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e8:	4b21      	ldr	r3, [pc, #132]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	4a20      	ldr	r2, [pc, #128]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004ee:	f043 0304 	orr.w	r3, r3, #4
 80004f2:	6193      	str	r3, [r2, #24]
 80004f4:	4b1e      	ldr	r3, [pc, #120]	; (8000570 <MX_GPIO_Init+0xb4>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	f003 0304 	and.w	r3, r3, #4
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000500:	4b1b      	ldr	r3, [pc, #108]	; (8000570 <MX_GPIO_Init+0xb4>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	4a1a      	ldr	r2, [pc, #104]	; (8000570 <MX_GPIO_Init+0xb4>)
 8000506:	f043 0308 	orr.w	r3, r3, #8
 800050a:	6193      	str	r3, [r2, #24]
 800050c:	4b18      	ldr	r3, [pc, #96]	; (8000570 <MX_GPIO_Init+0xb4>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	f003 0308 	and.w	r3, r3, #8
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	4815      	ldr	r0, [pc, #84]	; (8000574 <MX_GPIO_Init+0xb8>)
 800051e:	f001 f937 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_Pin|MUXC_Pin|MUXB_Pin|MUXA_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000528:	4813      	ldr	r0, [pc, #76]	; (8000578 <MX_GPIO_Init+0xbc>)
 800052a:	f001 f931 	bl	8001790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800052e:	2302      	movs	r3, #2
 8000530:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000532:	2301      	movs	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000536:	2300      	movs	r3, #0
 8000538:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053a:	2302      	movs	r3, #2
 800053c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	480b      	ldr	r0, [pc, #44]	; (8000574 <MX_GPIO_Init+0xb8>)
 8000546:	f000 ff9f 	bl	8001488 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_Pin MUXC_Pin MUXB_Pin MUXA_Pin */
  GPIO_InitStruct.Pin = EN_Pin|MUXC_Pin|MUXB_Pin|MUXA_Pin;
 800054a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800054e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000550:	2301      	movs	r3, #1
 8000552:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000554:	2300      	movs	r3, #0
 8000556:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000558:	2302      	movs	r3, #2
 800055a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800055c:	f107 0310 	add.w	r3, r7, #16
 8000560:	4619      	mov	r1, r3
 8000562:	4805      	ldr	r0, [pc, #20]	; (8000578 <MX_GPIO_Init+0xbc>)
 8000564:	f000 ff90 	bl	8001488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000568:	bf00      	nop
 800056a:	3720      	adds	r7, #32
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800
 8000578:	40010c00 	.word	0x40010c00

0800057c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

	 HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800058a:	4816      	ldr	r0, [pc, #88]	; (80005e4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800058c:	f001 f900 	bl	8001790 <HAL_GPIO_WritePin>
	if (htim->Instance == TIM4) {
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d11f      	bne.n	80005da <HAL_TIM_PeriodElapsedCallback+0x5e>

		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800059a:	2102      	movs	r1, #2
 800059c:	4813      	ldr	r0, [pc, #76]	; (80005ec <HAL_TIM_PeriodElapsedCallback+0x70>)
 800059e:	f001 f90f 	bl	80017c0 <HAL_GPIO_TogglePin>
		 for(int i=0;i<8;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	e015      	b.n	80005d4 <HAL_TIM_PeriodElapsedCallback+0x58>
		 {
		MUX_SelectChannel(i);
 80005a8:	68f8      	ldr	r0, [r7, #12]
 80005aa:	f7ff fdcf 	bl	800014c <MUX_SelectChannel>
		adc_val[i]= HAL_ADC_GetValue(&hadc1);
 80005ae:	4810      	ldr	r0, [pc, #64]	; (80005f0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80005b0:	f000 fbe2 	bl	8000d78 <HAL_ADC_GetValue>
 80005b4:	4602      	mov	r2, r0
 80005b6:	490f      	ldr	r1, [pc, #60]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  printf("Valor del ADC: %d\n", adc_val[i]);
 80005be:	4a0d      	ldr	r2, [pc, #52]	; (80005f4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c6:	4619      	mov	r1, r3
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 80005ca:	f002 f9d7 	bl	800297c <iprintf>
		 for(int i=0;i<8;i++)
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	3301      	adds	r3, #1
 80005d2:	60fb      	str	r3, [r7, #12]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	dde6      	ble.n	80005a8 <HAL_TIM_PeriodElapsedCallback+0x2c>

				  //}


    }
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40010c00 	.word	0x40010c00
 80005e8:	40000800 	.word	0x40000800
 80005ec:	40010800 	.word	0x40010800
 80005f0:	2000008c 	.word	0x2000008c
 80005f4:	2000014c 	.word	0x2000014c
 80005f8:	080038bc 	.word	0x080038bc

080005fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000600:	b672      	cpsid	i
}
 8000602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000604:	e7fe      	b.n	8000604 <Error_Handler+0x8>
	...

08000608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <HAL_MspInit+0x5c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a14      	ldr	r2, [pc, #80]	; (8000664 <HAL_MspInit+0x5c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b12      	ldr	r3, [pc, #72]	; (8000664 <HAL_MspInit+0x5c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000626:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <HAL_MspInit+0x5c>)
 8000628:	69db      	ldr	r3, [r3, #28]
 800062a:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <HAL_MspInit+0x5c>)
 800062c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000630:	61d3      	str	r3, [r2, #28]
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_MspInit+0x5c>)
 8000634:	69db      	ldr	r3, [r3, #28]
 8000636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800063e:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <HAL_MspInit+0x60>)
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	4a04      	ldr	r2, [pc, #16]	; (8000668 <HAL_MspInit+0x60>)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr
 8000664:	40021000 	.word	0x40021000
 8000668:	40010000 	.word	0x40010000

0800066c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b088      	sub	sp, #32
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a18      	ldr	r2, [pc, #96]	; (80006e8 <HAL_ADC_MspInit+0x7c>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d129      	bne.n	80006e0 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <HAL_ADC_MspInit+0x80>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <HAL_ADC_MspInit+0x80>)
 8000692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <HAL_ADC_MspInit+0x80>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <HAL_ADC_MspInit+0x80>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <HAL_ADC_MspInit+0x80>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <HAL_ADC_MspInit+0x80>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006bc:	2340      	movs	r3, #64	; 0x40
 80006be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c4:	f107 0310 	add.w	r3, r7, #16
 80006c8:	4619      	mov	r1, r3
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <HAL_ADC_MspInit+0x84>)
 80006cc:	f000 fedc 	bl	8001488 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2100      	movs	r1, #0
 80006d4:	2012      	movs	r0, #18
 80006d6:	f000 fea0 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006da:	2012      	movs	r0, #18
 80006dc:	f000 feb9 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80006e0:	bf00      	nop
 80006e2:	3720      	adds	r7, #32
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40012400 	.word	0x40012400
 80006ec:	40021000 	.word	0x40021000
 80006f0:	40010800 	.word	0x40010800

080006f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000704:	d114      	bne.n	8000730 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000706:	4b19      	ldr	r3, [pc, #100]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a18      	ldr	r2, [pc, #96]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b16      	ldr	r3, [pc, #88]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	201c      	movs	r0, #28
 8000724:	f000 fe79 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000728:	201c      	movs	r0, #28
 800072a:	f000 fe92 	bl	8001452 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800072e:	e018      	b.n	8000762 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a0e      	ldr	r2, [pc, #56]	; (8000770 <HAL_TIM_Base_MspInit+0x7c>)
 8000736:	4293      	cmp	r3, r2
 8000738:	d113      	bne.n	8000762 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	61d3      	str	r3, [r2, #28]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_TIM_Base_MspInit+0x78>)
 8000748:	69db      	ldr	r3, [r3, #28]
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	2100      	movs	r1, #0
 8000756:	201e      	movs	r0, #30
 8000758:	f000 fe5f 	bl	800141a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800075c:	201e      	movs	r0, #30
 800075e:	f000 fe78 	bl	8001452 <HAL_NVIC_EnableIRQ>
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40021000 	.word	0x40021000
 8000770:	40000800 	.word	0x40000800

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000778:	e7fe      	b.n	8000778 <NMI_Handler+0x4>

0800077a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077a:	b480      	push	{r7}
 800077c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077e:	e7fe      	b.n	800077e <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	e7fe      	b.n	8000784 <MemManage_Handler+0x4>

08000786 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000786:	b480      	push	{r7}
 8000788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <BusFault_Handler+0x4>

0800078c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler+0x4>

08000792 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000792:	b480      	push	{r7}
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000796:	bf00      	nop
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f933 	bl	8000a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <ADC1_2_IRQHandler+0x10>)
 80007ca:	f000 fae1 	bl	8000d90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000008c 	.word	0x2000008c

080007d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <TIM2_IRQHandler+0x10>)
 80007de:	f001 fd3f 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200000bc 	.word	0x200000bc

080007ec <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80007f0:	4802      	ldr	r0, [pc, #8]	; (80007fc <TIM4_IRQHandler+0x10>)
 80007f2:	f001 fd35 	bl	8002260 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000104 	.word	0x20000104

08000800 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
  }

  return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
  }
  return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000898:	605a      	str	r2, [r3, #4]
  return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_isatty>:

int _isatty(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b085      	sub	sp, #20
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f002 f808 	bl	8002918 <__errno>
 8000908:	4603      	mov	r3, r0
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20005000 	.word	0x20005000
 8000934:	00000400 	.word	0x00000400
 8000938:	2000016c 	.word	0x2000016c
 800093c:	20000188 	.word	0x20000188

08000940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800094c:	f7ff fff8 	bl	8000940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000950:	480b      	ldr	r0, [pc, #44]	; (8000980 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000952:	490c      	ldr	r1, [pc, #48]	; (8000984 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000954:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a09      	ldr	r2, [pc, #36]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000968:	4c09      	ldr	r4, [pc, #36]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000976:	f001 ffd5 	bl	8002924 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800097a:	f7ff fc45 	bl	8000208 <main>
  bx lr
 800097e:	4770      	bx	lr
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000988:	08003994 	.word	0x08003994
  ldr r2, =_sbss
 800098c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000990:	20000184 	.word	0x20000184

08000994 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <CAN1_RX1_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800099c:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <HAL_Init+0x28>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	; (80009c0 <HAL_Init+0x28>)
 80009a2:	f043 0310 	orr.w	r3, r3, #16
 80009a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009a8:	2003      	movs	r0, #3
 80009aa:	f000 fd2b 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ae:	200f      	movs	r0, #15
 80009b0:	f000 f808 	bl	80009c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b4:	f7ff fe28 	bl	8000608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009b8:	2300      	movs	r3, #0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40022000 	.word	0x40022000

080009c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <HAL_InitTick+0x54>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <HAL_InitTick+0x58>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	4619      	mov	r1, r3
 80009d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009da:	fbb3 f3f1 	udiv	r3, r3, r1
 80009de:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fd43 	bl	800146e <HAL_SYSTICK_Config>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	e00e      	b.n	8000a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b0f      	cmp	r3, #15
 80009f6:	d80a      	bhi.n	8000a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f8:	2200      	movs	r2, #0
 80009fa:	6879      	ldr	r1, [r7, #4]
 80009fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000a00:	f000 fd0b 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <HAL_InitTick+0x5c>)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	e000      	b.n	8000a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	20000008 	.word	0x20000008
 8000a20:	20000004 	.word	0x20000004

08000a24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <HAL_IncTick+0x1c>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	461a      	mov	r2, r3
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_IncTick+0x20>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4413      	add	r3, r2
 8000a34:	4a03      	ldr	r2, [pc, #12]	; (8000a44 <HAL_IncTick+0x20>)
 8000a36:	6013      	str	r3, [r2, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	20000008 	.word	0x20000008
 8000a44:	20000170 	.word	0x20000170

08000a48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a4c:	4b02      	ldr	r3, [pc, #8]	; (8000a58 <HAL_GetTick+0x10>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr
 8000a58:	20000170 	.word	0x20000170

08000a5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e0be      	b.n	8000bfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fde6 	bl	800066c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 fb99 	bl	80011d8 <ADC_ConversionStop_Disable>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8099 	bne.w	8000bea <HAL_ADC_Init+0x18e>
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 8095 	bne.w	8000bea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac8:	f023 0302 	bic.w	r3, r3, #2
 8000acc:	f043 0202 	orr.w	r2, r3, #2
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000adc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af4:	d003      	beq.n	8000afe <HAL_ADC_Init+0xa2>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <HAL_ADC_Init+0xa8>
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	e000      	b.n	8000b06 <HAL_ADC_Init+0xaa>
 8000b04:	2300      	movs	r3, #0
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7d1b      	ldrb	r3, [r3, #20]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d119      	bne.n	8000b48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7b1b      	ldrb	r3, [r3, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	035a      	lsls	r2, r3, #13
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	e00b      	b.n	8000b48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f043 0220 	orr.w	r2, r3, #32
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_ADC_Init+0x1a8>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_Init+0x126>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d104      	bne.n	8000b8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_Init+0x1ac>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	f023 0303 	bic.w	r3, r3, #3
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc6:	e018      	b.n	8000bfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	f023 0312 	bic.w	r3, r3, #18
 8000bd0:	f043 0210 	orr.w	r2, r3, #16
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be8:	e007      	b.n	8000bfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	ffe1f7fd 	.word	0xffe1f7fd
 8000c08:	ff1f0efe 	.word	0xff1f0efe

08000c0c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c14:	2300      	movs	r3, #0
 8000c16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d101      	bne.n	8000c26 <HAL_ADC_Start_IT+0x1a>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e0a0      	b.n	8000d68 <HAL_ADC_Start_IT+0x15c>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f000 fa78 	bl	8001124 <ADC_Enable>
 8000c34:	4603      	mov	r3, r0
 8000c36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c38:	7bfb      	ldrb	r3, [r7, #15]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	f040 808f 	bne.w	8000d5e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c44:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c48:	f023 0301 	bic.w	r3, r3, #1
 8000c4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <HAL_ADC_Start_IT+0x164>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d105      	bne.n	8000c6a <HAL_ADC_Start_IT+0x5e>
 8000c5e:	4b45      	ldr	r3, [pc, #276]	; (8000d74 <HAL_ADC_Start_IT+0x168>)
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d115      	bne.n	8000c96 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d026      	beq.n	8000cd2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000c8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c94:	e01d      	b.n	8000cd2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a33      	ldr	r2, [pc, #204]	; (8000d74 <HAL_ADC_Start_IT+0x168>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d004      	beq.n	8000cb6 <HAL_ADC_Start_IT+0xaa>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2f      	ldr	r2, [pc, #188]	; (8000d70 <HAL_ADC_Start_IT+0x164>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d10d      	bne.n	8000cd2 <HAL_ADC_Start_IT+0xc6>
 8000cb6:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <HAL_ADC_Start_IT+0x168>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d007      	beq.n	8000cd2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	f023 0206 	bic.w	r2, r3, #6
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cea:	e002      	b.n	8000cf2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f06f 0202 	mvn.w	r2, #2
 8000d02:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f042 0220 	orr.w	r2, r2, #32
 8000d12:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d22:	d113      	bne.n	8000d4c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d28:	4a11      	ldr	r2, [pc, #68]	; (8000d70 <HAL_ADC_Start_IT+0x164>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d105      	bne.n	8000d3a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d2e:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <HAL_ADC_Start_IT+0x168>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	689a      	ldr	r2, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	e00c      	b.n	8000d66 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	e003      	b.n	8000d66 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40012800 	.word	0x40012800
 8000d74:	40012400 	.word	0x40012400

08000d78 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	f003 0320 	and.w	r3, r3, #32
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d03e      	beq.n	8000e30 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d039      	beq.n	8000e30 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f003 0310 	and.w	r3, r3, #16
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d105      	bne.n	8000dd4 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dcc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000dde:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000de2:	d11d      	bne.n	8000e20 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d119      	bne.n	8000e20 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0220 	bic.w	r2, r2, #32
 8000dfa:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e00:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d105      	bne.n	8000e20 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	f043 0201 	orr.w	r2, r3, #1
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000e20:	6878      	ldr	r0, [r7, #4]
 8000e22:	f000 f874 	bl	8000f0e <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f06f 0212 	mvn.w	r2, #18
 8000e2e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000e30:	68bb      	ldr	r3, [r7, #8]
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d04d      	beq.n	8000ed6 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d048      	beq.n	8000ed6 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e48:	f003 0310 	and.w	r3, r3, #16
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d105      	bne.n	8000e5c <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000e66:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000e6a:	d012      	beq.n	8000e92 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d125      	bne.n	8000ec6 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000e84:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e88:	d11d      	bne.n	8000ec6 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d119      	bne.n	8000ec6 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea0:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d105      	bne.n	8000ec6 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ebe:	f043 0201 	orr.w	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f9c7 	bl	800125a <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f06f 020c 	mvn.w	r2, #12
 8000ed4:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d012      	beq.n	8000f06 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d00d      	beq.n	8000f06 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f812 	bl	8000f20 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f06f 0201 	mvn.w	r2, #1
 8000f04:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bc80      	pop	{r7}
 8000f1e:	4770      	bx	lr

08000f20 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
	...

08000f34 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d101      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x20>
 8000f50:	2302      	movs	r3, #2
 8000f52:	e0dc      	b.n	800110e <HAL_ADC_ConfigChannel+0x1da>
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b06      	cmp	r3, #6
 8000f62:	d81c      	bhi.n	8000f9e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	4613      	mov	r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	3b05      	subs	r3, #5
 8000f76:	221f      	movs	r2, #31
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	4019      	ands	r1, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685a      	ldr	r2, [r3, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	4413      	add	r3, r2
 8000f8e:	3b05      	subs	r3, #5
 8000f90:	fa00 f203 	lsl.w	r2, r0, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f9c:	e03c      	b.n	8001018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	2b0c      	cmp	r3, #12
 8000fa4:	d81c      	bhi.n	8000fe0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	3b23      	subs	r3, #35	; 0x23
 8000fb8:	221f      	movs	r2, #31
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	4019      	ands	r1, r3
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	6818      	ldr	r0, [r3, #0]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	3b23      	subs	r3, #35	; 0x23
 8000fd2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	631a      	str	r2, [r3, #48]	; 0x30
 8000fde:	e01b      	b.n	8001018 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	3b41      	subs	r3, #65	; 0x41
 8000ff2:	221f      	movs	r2, #31
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	4019      	ands	r1, r3
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685a      	ldr	r2, [r3, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	3b41      	subs	r3, #65	; 0x41
 800100c:	fa00 f203 	lsl.w	r2, r0, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b09      	cmp	r3, #9
 800101e:	d91c      	bls.n	800105a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	68d9      	ldr	r1, [r3, #12]
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	4613      	mov	r3, r2
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	4413      	add	r3, r2
 8001030:	3b1e      	subs	r3, #30
 8001032:	2207      	movs	r2, #7
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	4019      	ands	r1, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	6898      	ldr	r0, [r3, #8]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	3b1e      	subs	r3, #30
 800104c:	fa00 f203 	lsl.w	r2, r0, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	e019      	b.n	800108e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	6919      	ldr	r1, [r3, #16]
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4613      	mov	r3, r2
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	4413      	add	r3, r2
 800106a:	2207      	movs	r2, #7
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	4019      	ands	r1, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	6898      	ldr	r0, [r3, #8]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	fa00 f203 	lsl.w	r2, r0, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b10      	cmp	r3, #16
 8001094:	d003      	beq.n	800109e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800109a:	2b11      	cmp	r3, #17
 800109c:	d132      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <HAL_ADC_ConfigChannel+0x1e4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d125      	bne.n	80010f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d126      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80010c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d11a      	bne.n	8001104 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <HAL_ADC_ConfigChannel+0x1e8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a13      	ldr	r2, [pc, #76]	; (8001120 <HAL_ADC_ConfigChannel+0x1ec>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	0c9a      	lsrs	r2, r3, #18
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010e4:	e002      	b.n	80010ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f9      	bne.n	80010e6 <HAL_ADC_ConfigChannel+0x1b2>
 80010f2:	e007      	b.n	8001104 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f8:	f043 0220 	orr.w	r2, r3, #32
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800110c:	7bfb      	ldrb	r3, [r7, #15]
}
 800110e:	4618      	mov	r0, r3
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr
 8001118:	40012400 	.word	0x40012400
 800111c:	20000000 	.word	0x20000000
 8001120:	431bde83 	.word	0x431bde83

08001124 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b01      	cmp	r3, #1
 8001140:	d040      	beq.n	80011c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f042 0201 	orr.w	r2, r2, #1
 8001150:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001152:	4b1f      	ldr	r3, [pc, #124]	; (80011d0 <ADC_Enable+0xac>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <ADC_Enable+0xb0>)
 8001158:	fba2 2303 	umull	r2, r3, r2, r3
 800115c:	0c9b      	lsrs	r3, r3, #18
 800115e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001160:	e002      	b.n	8001168 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800116e:	f7ff fc6b 	bl	8000a48 <HAL_GetTick>
 8001172:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001174:	e01f      	b.n	80011b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001176:	f7ff fc67 	bl	8000a48 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d918      	bls.n	80011b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b01      	cmp	r3, #1
 8001190:	d011      	beq.n	80011b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	f043 0201 	orr.w	r2, r3, #1
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e007      	b.n	80011c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f003 0301 	and.w	r3, r3, #1
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d1d8      	bne.n	8001176 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000000 	.word	0x20000000
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d12e      	bne.n	8001250 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001202:	f7ff fc21 	bl	8000a48 <HAL_GetTick>
 8001206:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001208:	e01b      	b.n	8001242 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800120a:	f7ff fc1d 	bl	8000a48 <HAL_GetTick>
 800120e:	4602      	mov	r2, r0
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d914      	bls.n	8001242 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10d      	bne.n	8001242 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122a:	f043 0210 	orr.w	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001236:	f043 0201 	orr.w	r2, r3, #1
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e007      	b.n	8001252 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b01      	cmp	r3, #1
 800124e:	d0dc      	beq.n	800120a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b480      	push	{r7}
 800126e:	b085      	sub	sp, #20
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001288:	4013      	ands	r3, r2
 800128a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001294:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800129c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800129e:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <__NVIC_SetPriorityGrouping+0x44>)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	60d3      	str	r3, [r2, #12]
}
 80012a4:	bf00      	nop
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012b8:	4b04      	ldr	r3, [pc, #16]	; (80012cc <__NVIC_GetPriorityGrouping+0x18>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	f003 0307 	and.w	r3, r3, #7
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000ed00 	.word	0xe000ed00

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4906      	ldr	r1, [pc, #24]	; (8001304 <__NVIC_EnableIRQ+0x34>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	bc80      	pop	{r7}
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100

08001308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	6039      	str	r1, [r7, #0]
 8001312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	2b00      	cmp	r3, #0
 800131a:	db0a      	blt.n	8001332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	b2da      	uxtb	r2, r3
 8001320:	490c      	ldr	r1, [pc, #48]	; (8001354 <__NVIC_SetPriority+0x4c>)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	0112      	lsls	r2, r2, #4
 8001328:	b2d2      	uxtb	r2, r2
 800132a:	440b      	add	r3, r1
 800132c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001330:	e00a      	b.n	8001348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4908      	ldr	r1, [pc, #32]	; (8001358 <__NVIC_SetPriority+0x50>)
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	3b04      	subs	r3, #4
 8001340:	0112      	lsls	r2, r2, #4
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	440b      	add	r3, r1
 8001346:	761a      	strb	r2, [r3, #24]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	e000e100 	.word	0xe000e100
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	f1c3 0307 	rsb	r3, r3, #7
 8001376:	2b04      	cmp	r3, #4
 8001378:	bf28      	it	cs
 800137a:	2304      	movcs	r3, #4
 800137c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	3304      	adds	r3, #4
 8001382:	2b06      	cmp	r3, #6
 8001384:	d902      	bls.n	800138c <NVIC_EncodePriority+0x30>
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3b03      	subs	r3, #3
 800138a:	e000      	b.n	800138e <NVIC_EncodePriority+0x32>
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fa02 f303 	lsl.w	r3, r2, r3
 800139a:	43da      	mvns	r2, r3
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	401a      	ands	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a4:	f04f 31ff 	mov.w	r1, #4294967295
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	43d9      	mvns	r1, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	4313      	orrs	r3, r2
         );
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3724      	adds	r7, #36	; 0x24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bc80      	pop	{r7}
 80013be:	4770      	bx	lr

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff90 	bl	8001308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff2d 	bl	800126c <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142c:	f7ff ff42 	bl	80012b4 <__NVIC_GetPriorityGrouping>
 8001430:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f7ff ff90 	bl	800135c <NVIC_EncodePriority>
 800143c:	4602      	mov	r2, r0
 800143e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff ff5f 	bl	8001308 <__NVIC_SetPriority>
}
 800144a:	bf00      	nop
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	4603      	mov	r3, r0
 800145a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff35 	bl	80012d0 <__NVIC_EnableIRQ>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffa2 	bl	80013c0 <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001488:	b480      	push	{r7}
 800148a:	b08b      	sub	sp, #44	; 0x2c
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001492:	2300      	movs	r3, #0
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001496:	2300      	movs	r3, #0
 8001498:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	e169      	b.n	8001770 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800149c:	2201      	movs	r2, #1
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8158 	bne.w	800176a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a9a      	ldr	r2, [pc, #616]	; (8001728 <HAL_GPIO_Init+0x2a0>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d05e      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
 80014c4:	4a98      	ldr	r2, [pc, #608]	; (8001728 <HAL_GPIO_Init+0x2a0>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d875      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 80014ca:	4a98      	ldr	r2, [pc, #608]	; (800172c <HAL_GPIO_Init+0x2a4>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d058      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
 80014d0:	4a96      	ldr	r2, [pc, #600]	; (800172c <HAL_GPIO_Init+0x2a4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d86f      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 80014d6:	4a96      	ldr	r2, [pc, #600]	; (8001730 <HAL_GPIO_Init+0x2a8>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d052      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
 80014dc:	4a94      	ldr	r2, [pc, #592]	; (8001730 <HAL_GPIO_Init+0x2a8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d869      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 80014e2:	4a94      	ldr	r2, [pc, #592]	; (8001734 <HAL_GPIO_Init+0x2ac>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d04c      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
 80014e8:	4a92      	ldr	r2, [pc, #584]	; (8001734 <HAL_GPIO_Init+0x2ac>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d863      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 80014ee:	4a92      	ldr	r2, [pc, #584]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d046      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
 80014f4:	4a90      	ldr	r2, [pc, #576]	; (8001738 <HAL_GPIO_Init+0x2b0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d85d      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 80014fa:	2b12      	cmp	r3, #18
 80014fc:	d82a      	bhi.n	8001554 <HAL_GPIO_Init+0xcc>
 80014fe:	2b12      	cmp	r3, #18
 8001500:	d859      	bhi.n	80015b6 <HAL_GPIO_Init+0x12e>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <HAL_GPIO_Init+0x80>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	08001583 	.word	0x08001583
 800150c:	0800155d 	.word	0x0800155d
 8001510:	0800156f 	.word	0x0800156f
 8001514:	080015b1 	.word	0x080015b1
 8001518:	080015b7 	.word	0x080015b7
 800151c:	080015b7 	.word	0x080015b7
 8001520:	080015b7 	.word	0x080015b7
 8001524:	080015b7 	.word	0x080015b7
 8001528:	080015b7 	.word	0x080015b7
 800152c:	080015b7 	.word	0x080015b7
 8001530:	080015b7 	.word	0x080015b7
 8001534:	080015b7 	.word	0x080015b7
 8001538:	080015b7 	.word	0x080015b7
 800153c:	080015b7 	.word	0x080015b7
 8001540:	080015b7 	.word	0x080015b7
 8001544:	080015b7 	.word	0x080015b7
 8001548:	080015b7 	.word	0x080015b7
 800154c:	08001565 	.word	0x08001565
 8001550:	08001579 	.word	0x08001579
 8001554:	4a79      	ldr	r2, [pc, #484]	; (800173c <HAL_GPIO_Init+0x2b4>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800155a:	e02c      	b.n	80015b6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	623b      	str	r3, [r7, #32]
          break;
 8001562:	e029      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	3304      	adds	r3, #4
 800156a:	623b      	str	r3, [r7, #32]
          break;
 800156c:	e024      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	3308      	adds	r3, #8
 8001574:	623b      	str	r3, [r7, #32]
          break;
 8001576:	e01f      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	330c      	adds	r3, #12
 800157e:	623b      	str	r3, [r7, #32]
          break;
 8001580:	e01a      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d102      	bne.n	8001590 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800158a:	2304      	movs	r3, #4
 800158c:	623b      	str	r3, [r7, #32]
          break;
 800158e:	e013      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	611a      	str	r2, [r3, #16]
          break;
 80015a2:	e009      	b.n	80015b8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a4:	2308      	movs	r3, #8
 80015a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69fa      	ldr	r2, [r7, #28]
 80015ac:	615a      	str	r2, [r3, #20]
          break;
 80015ae:	e003      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e000      	b.n	80015b8 <HAL_GPIO_Init+0x130>
          break;
 80015b6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2bff      	cmp	r3, #255	; 0xff
 80015bc:	d801      	bhi.n	80015c2 <HAL_GPIO_Init+0x13a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	e001      	b.n	80015c6 <HAL_GPIO_Init+0x13e>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	3304      	adds	r3, #4
 80015c6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	; 0xff
 80015cc:	d802      	bhi.n	80015d4 <HAL_GPIO_Init+0x14c>
 80015ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0x152>
 80015d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d6:	3b08      	subs	r3, #8
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	210f      	movs	r1, #15
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	401a      	ands	r2, r3
 80015ec:	6a39      	ldr	r1, [r7, #32]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	fa01 f303 	lsl.w	r3, r1, r3
 80015f4:	431a      	orrs	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80b1 	beq.w	800176a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001608:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <HAL_GPIO_Init+0x2b8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a4c      	ldr	r2, [pc, #304]	; (8001740 <HAL_GPIO_Init+0x2b8>)
 800160e:	f043 0301 	orr.w	r3, r3, #1
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <HAL_GPIO_Init+0x2b8>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0301 	and.w	r3, r3, #1
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001620:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_GPIO_Init+0x2bc>)
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3302      	adds	r3, #2
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	220f      	movs	r2, #15
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	43db      	mvns	r3, r3
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a40      	ldr	r2, [pc, #256]	; (8001748 <HAL_GPIO_Init+0x2c0>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d013      	beq.n	8001674 <HAL_GPIO_Init+0x1ec>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a3f      	ldr	r2, [pc, #252]	; (800174c <HAL_GPIO_Init+0x2c4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d00d      	beq.n	8001670 <HAL_GPIO_Init+0x1e8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a3e      	ldr	r2, [pc, #248]	; (8001750 <HAL_GPIO_Init+0x2c8>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d007      	beq.n	800166c <HAL_GPIO_Init+0x1e4>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3d      	ldr	r2, [pc, #244]	; (8001754 <HAL_GPIO_Init+0x2cc>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d101      	bne.n	8001668 <HAL_GPIO_Init+0x1e0>
 8001664:	2303      	movs	r3, #3
 8001666:	e006      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001668:	2304      	movs	r3, #4
 800166a:	e004      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 800166c:	2302      	movs	r3, #2
 800166e:	e002      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001670:	2301      	movs	r3, #1
 8001672:	e000      	b.n	8001676 <HAL_GPIO_Init+0x1ee>
 8001674:	2300      	movs	r3, #0
 8001676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001678:	f002 0203 	and.w	r2, r2, #3
 800167c:	0092      	lsls	r2, r2, #2
 800167e:	4093      	lsls	r3, r2
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001686:	492f      	ldr	r1, [pc, #188]	; (8001744 <HAL_GPIO_Init+0x2bc>)
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	089b      	lsrs	r3, r3, #2
 800168c:	3302      	adds	r3, #2
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016a2:	689a      	ldr	r2, [r3, #8]
 80016a4:	492c      	ldr	r1, [pc, #176]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	608b      	str	r3, [r1, #8]
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016ae:	4b2a      	ldr	r3, [pc, #168]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016b0:	689a      	ldr	r2, [r3, #8]
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	43db      	mvns	r3, r3
 80016b6:	4928      	ldr	r1, [pc, #160]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016ca:	68da      	ldr	r2, [r3, #12]
 80016cc:	4922      	ldr	r1, [pc, #136]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60cb      	str	r3, [r1, #12]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016d8:	68da      	ldr	r2, [r3, #12]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	491e      	ldr	r1, [pc, #120]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016f0:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4918      	ldr	r1, [pc, #96]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4914      	ldr	r1, [pc, #80]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d021      	beq.n	800175c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001718:	4b0f      	ldr	r3, [pc, #60]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	600b      	str	r3, [r1, #0]
 8001724:	e021      	b.n	800176a <HAL_GPIO_Init+0x2e2>
 8001726:	bf00      	nop
 8001728:	10320000 	.word	0x10320000
 800172c:	10310000 	.word	0x10310000
 8001730:	10220000 	.word	0x10220000
 8001734:	10210000 	.word	0x10210000
 8001738:	10120000 	.word	0x10120000
 800173c:	10110000 	.word	0x10110000
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	40010800 	.word	0x40010800
 800174c:	40010c00 	.word	0x40010c00
 8001750:	40011000 	.word	0x40011000
 8001754:	40011400 	.word	0x40011400
 8001758:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_GPIO_Init+0x304>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	43db      	mvns	r3, r3
 8001764:	4909      	ldr	r1, [pc, #36]	; (800178c <HAL_GPIO_Init+0x304>)
 8001766:	4013      	ands	r3, r2
 8001768:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	3301      	adds	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	fa22 f303 	lsr.w	r3, r2, r3
 800177a:	2b00      	cmp	r3, #0
 800177c:	f47f ae8e 	bne.w	800149c <HAL_GPIO_Init+0x14>
  }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	372c      	adds	r7, #44	; 0x2c
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40010400 	.word	0x40010400

08001790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]
 800179c:	4613      	mov	r3, r2
 800179e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017a0:	787b      	ldrb	r3, [r7, #1]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a6:	887a      	ldrh	r2, [r7, #2]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017ac:	e003      	b.n	80017b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	041a      	lsls	r2, r3, #16
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	611a      	str	r2, [r3, #16]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	460b      	mov	r3, r1
 80017ca:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017d2:	887a      	ldrh	r2, [r7, #2]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	4013      	ands	r3, r2
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	43d9      	mvns	r1, r3
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	400b      	ands	r3, r1
 80017e2:	431a      	orrs	r2, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	611a      	str	r2, [r3, #16]
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e272      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8087 	beq.w	8001922 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001814:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b04      	cmp	r3, #4
 800181e:	d00c      	beq.n	800183a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001820:	4b8f      	ldr	r3, [pc, #572]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 030c 	and.w	r3, r3, #12
 8001828:	2b08      	cmp	r3, #8
 800182a:	d112      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
 800182c:	4b8c      	ldr	r3, [pc, #560]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001838:	d10b      	bne.n	8001852 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800183a:	4b89      	ldr	r3, [pc, #548]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d06c      	beq.n	8001920 <HAL_RCC_OscConfig+0x12c>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d168      	bne.n	8001920 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e24c      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x76>
 800185c:	4b80      	ldr	r3, [pc, #512]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a7f      	ldr	r2, [pc, #508]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e02e      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b7b      	ldr	r3, [pc, #492]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a7a      	ldr	r2, [pc, #488]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a77      	ldr	r2, [pc, #476]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e01d      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001894:	d10c      	bne.n	80018b0 <HAL_RCC_OscConfig+0xbc>
 8001896:	4b72      	ldr	r3, [pc, #456]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a71      	ldr	r2, [pc, #452]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800189c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]
 80018a2:	4b6f      	ldr	r3, [pc, #444]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a6e      	ldr	r2, [pc, #440]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e00b      	b.n	80018c8 <HAL_RCC_OscConfig+0xd4>
 80018b0:	4b6b      	ldr	r3, [pc, #428]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6a      	ldr	r2, [pc, #424]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b68      	ldr	r3, [pc, #416]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a67      	ldr	r2, [pc, #412]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d013      	beq.n	80018f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f8ba 	bl	8000a48 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d8:	f7ff f8b6 	bl	8000a48 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e200      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ea:	4b5d      	ldr	r3, [pc, #372]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0f0      	beq.n	80018d8 <HAL_RCC_OscConfig+0xe4>
 80018f6:	e014      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8a6 	bl	8000a48 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff f8a2 	bl	8000a48 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e1ec      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001912:	4b53      	ldr	r3, [pc, #332]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x10c>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800192e:	4b4c      	ldr	r3, [pc, #304]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00b      	beq.n	8001952 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800193a:	4b49      	ldr	r3, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 030c 	and.w	r3, r3, #12
 8001942:	2b08      	cmp	r3, #8
 8001944:	d11c      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
 8001946:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001952:	4b43      	ldr	r3, [pc, #268]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d005      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	691b      	ldr	r3, [r3, #16]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d001      	beq.n	800196a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e1c0      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800196a:	4b3d      	ldr	r3, [pc, #244]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	4939      	ldr	r1, [pc, #228]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 800197a:	4313      	orrs	r3, r2
 800197c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800197e:	e03a      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d020      	beq.n	80019ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001988:	4b36      	ldr	r3, [pc, #216]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 800198a:	2201      	movs	r2, #1
 800198c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198e:	f7ff f85b 	bl	8000a48 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001996:	f7ff f857 	bl	8000a48 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1a1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b4:	4b2a      	ldr	r3, [pc, #168]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	695b      	ldr	r3, [r3, #20]
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	4927      	ldr	r1, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
 80019c8:	e015      	b.n	80019f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	4b26      	ldr	r3, [pc, #152]	; (8001a64 <HAL_RCC_OscConfig+0x270>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d0:	f7ff f83a 	bl	8000a48 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff f836 	bl	8000a48 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e180      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ea:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0308 	and.w	r3, r3, #8
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d03a      	beq.n	8001a78 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699b      	ldr	r3, [r3, #24]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d019      	beq.n	8001a3e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a0a:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a10:	f7ff f81a 	bl	8000a48 <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a18:	f7ff f816 	bl	8000a48 <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e160      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a2a:	4b0d      	ldr	r3, [pc, #52]	; (8001a60 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d0f0      	beq.n	8001a18 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a36:	2001      	movs	r0, #1
 8001a38:	f000 fa9c 	bl	8001f74 <RCC_Delay>
 8001a3c:	e01c      	b.n	8001a78 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_RCC_OscConfig+0x274>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a44:	f7ff f800 	bl	8000a48 <HAL_GetTick>
 8001a48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a4a:	e00f      	b.n	8001a6c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4c:	f7fe fffc 	bl	8000a48 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d908      	bls.n	8001a6c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e146      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	42420000 	.word	0x42420000
 8001a68:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a6c:	4b92      	ldr	r3, [pc, #584]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1e9      	bne.n	8001a4c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80a6 	beq.w	8001bd2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a86:	2300      	movs	r3, #0
 8001a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a8a:	4b8b      	ldr	r3, [pc, #556]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d10d      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b88      	ldr	r3, [pc, #544]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	4a87      	ldr	r2, [pc, #540]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	61d3      	str	r3, [r2, #28]
 8001aa2:	4b85      	ldr	r3, [pc, #532]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab2:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d118      	bne.n	8001af0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abe:	4b7f      	ldr	r3, [pc, #508]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a7e      	ldr	r2, [pc, #504]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7fe ffbd 	bl	8000a48 <HAL_GetTick>
 8001ace:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad0:	e008      	b.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad2:	f7fe ffb9 	bl	8000a48 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b64      	cmp	r3, #100	; 0x64
 8001ade:	d901      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e103      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae4:	4b75      	ldr	r3, [pc, #468]	; (8001cbc <HAL_RCC_OscConfig+0x4c8>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f0      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d106      	bne.n	8001b06 <HAL_RCC_OscConfig+0x312>
 8001af8:	4b6f      	ldr	r3, [pc, #444]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afa:	6a1b      	ldr	r3, [r3, #32]
 8001afc:	4a6e      	ldr	r2, [pc, #440]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6213      	str	r3, [r2, #32]
 8001b04:	e02d      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10c      	bne.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b0e:	4b6a      	ldr	r3, [pc, #424]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4a69      	ldr	r2, [pc, #420]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	6213      	str	r3, [r2, #32]
 8001b1a:	4b67      	ldr	r3, [pc, #412]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	4a66      	ldr	r2, [pc, #408]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	f023 0304 	bic.w	r3, r3, #4
 8001b24:	6213      	str	r3, [r2, #32]
 8001b26:	e01c      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b05      	cmp	r3, #5
 8001b2e:	d10c      	bne.n	8001b4a <HAL_RCC_OscConfig+0x356>
 8001b30:	4b61      	ldr	r3, [pc, #388]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4a60      	ldr	r2, [pc, #384]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b36:	f043 0304 	orr.w	r3, r3, #4
 8001b3a:	6213      	str	r3, [r2, #32]
 8001b3c:	4b5e      	ldr	r3, [pc, #376]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a5d      	ldr	r2, [pc, #372]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	f043 0301 	orr.w	r3, r3, #1
 8001b46:	6213      	str	r3, [r2, #32]
 8001b48:	e00b      	b.n	8001b62 <HAL_RCC_OscConfig+0x36e>
 8001b4a:	4b5b      	ldr	r3, [pc, #364]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4a5a      	ldr	r2, [pc, #360]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	f023 0301 	bic.w	r3, r3, #1
 8001b54:	6213      	str	r3, [r2, #32]
 8001b56:	4b58      	ldr	r3, [pc, #352]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a57      	ldr	r2, [pc, #348]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	f023 0304 	bic.w	r3, r3, #4
 8001b60:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d015      	beq.n	8001b96 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe ff6d 	bl	8000a48 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b70:	e00a      	b.n	8001b88 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe ff69 	bl	8000a48 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e0b1      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b88:	4b4b      	ldr	r3, [pc, #300]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0ee      	beq.n	8001b72 <HAL_RCC_OscConfig+0x37e>
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b96:	f7fe ff57 	bl	8000a48 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7fe ff53 	bl	8000a48 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e09b      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb4:	4b40      	ldr	r3, [pc, #256]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ee      	bne.n	8001b9e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bc0:	7dfb      	ldrb	r3, [r7, #23]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bc6:	4b3c      	ldr	r3, [pc, #240]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc8:	69db      	ldr	r3, [r3, #28]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b08      	cmp	r3, #8
 8001be6:	d061      	beq.n	8001cac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d146      	bne.n	8001c7e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ff27 	bl	8000a48 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bfe:	f7fe ff23 	bl	8000a48 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e06d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c24:	d108      	bne.n	8001c38 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c26:	4b24      	ldr	r3, [pc, #144]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	4921      	ldr	r1, [pc, #132]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a19      	ldr	r1, [r3, #32]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	491b      	ldr	r1, [pc, #108]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c56:	f7fe fef7 	bl	8000a48 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fef3 	bl	8000a48 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e03d      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46a>
 8001c7c:	e035      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_OscConfig+0x4cc>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7fe fee0 	bl	8000a48 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe fedc 	bl	8000a48 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e026      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x498>
 8001caa:	e01e      	b.n	8001cea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e019      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	40007000 	.word	0x40007000
 8001cc0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_RCC_OscConfig+0x500>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d106      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d001      	beq.n	8001cea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e000      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e0d0      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0c:	4b6a      	ldr	r3, [pc, #424]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d910      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1a:	4b67      	ldr	r3, [pc, #412]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f023 0207 	bic.w	r2, r3, #7
 8001d22:	4965      	ldr	r1, [pc, #404]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001d76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d040      	beq.n	8001e18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d115      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d107      	bne.n	8001dc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	4b41      	ldr	r3, [pc, #260]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d109      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e073      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc6:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e06b      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dd6:	4b39      	ldr	r3, [pc, #228]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f023 0203 	bic.w	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	4936      	ldr	r1, [pc, #216]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de8:	f7fe fe2e 	bl	8000a48 <HAL_GetTick>
 8001dec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dee:	e00a      	b.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df0:	f7fe fe2a 	bl	8000a48 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e053      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e06:	4b2d      	ldr	r3, [pc, #180]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 020c 	and.w	r2, r3, #12
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d1eb      	bne.n	8001df0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e18:	4b27      	ldr	r3, [pc, #156]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0307 	and.w	r3, r3, #7
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d210      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e26:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f023 0207 	bic.w	r2, r3, #7
 8001e2e:	4922      	ldr	r1, [pc, #136]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	; (8001eb8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_RCC_ClockConfig+0x1c4>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	; (8001ec0 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	; (8001ec4 <HAL_RCC_ClockConfig+0x1cc>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <HAL_RCC_ClockConfig+0x1d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fd8c 	bl	80009c4 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40022000 	.word	0x40022000
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	080038d0 	.word	0x080038d0
 8001ec4:	20000000 	.word	0x20000000
 8001ec8:	20000004 	.word	0x20000004

08001ecc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	d002      	beq.n	8001efc <HAL_RCC_GetSysClockFreq+0x30>
 8001ef6:	2b08      	cmp	r3, #8
 8001ef8:	d003      	beq.n	8001f02 <HAL_RCC_GetSysClockFreq+0x36>
 8001efa:	e027      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001efe:	613b      	str	r3, [r7, #16]
      break;
 8001f00:	e027      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	0c9b      	lsrs	r3, r3, #18
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	4a17      	ldr	r2, [pc, #92]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f0c:	5cd3      	ldrb	r3, [r2, r3]
 8001f0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d010      	beq.n	8001f3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	0c5b      	lsrs	r3, r3, #17
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	4a11      	ldr	r2, [pc, #68]	; (8001f6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f26:	5cd3      	ldrb	r3, [r2, r3]
 8001f28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e004      	b.n	8001f46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0c      	ldr	r2, [pc, #48]	; (8001f70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f40:	fb02 f303 	mul.w	r3, r2, r3
 8001f44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	613b      	str	r3, [r7, #16]
      break;
 8001f4a:	e002      	b.n	8001f52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f4e:	613b      	str	r3, [r7, #16]
      break;
 8001f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f52:	693b      	ldr	r3, [r7, #16]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	371c      	adds	r7, #28
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bc80      	pop	{r7}
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
 8001f64:	007a1200 	.word	0x007a1200
 8001f68:	080038e0 	.word	0x080038e0
 8001f6c:	080038f0 	.word	0x080038f0
 8001f70:	003d0900 	.word	0x003d0900

08001f74 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b085      	sub	sp, #20
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <RCC_Delay+0x34>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a0a      	ldr	r2, [pc, #40]	; (8001fac <RCC_Delay+0x38>)
 8001f82:	fba2 2303 	umull	r2, r3, r2, r3
 8001f86:	0a5b      	lsrs	r3, r3, #9
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	fb02 f303 	mul.w	r3, r2, r3
 8001f8e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001f90:	bf00      	nop
  }
  while (Delay --);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	1e5a      	subs	r2, r3, #1
 8001f96:	60fa      	str	r2, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f9      	bne.n	8001f90 <RCC_Delay+0x1c>
}
 8001f9c:	bf00      	nop
 8001f9e:	bf00      	nop
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	20000000 	.word	0x20000000
 8001fac:	10624dd3 	.word	0x10624dd3

08001fb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d07d      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fd0:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d10d      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fdc:	4b4c      	ldr	r3, [pc, #304]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a4b      	ldr	r2, [pc, #300]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d118      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a42      	ldr	r2, [pc, #264]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002010:	f7fe fd1a 	bl	8000a48 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002016:	e008      	b.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fd16 	bl	8000a48 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b64      	cmp	r3, #100	; 0x64
 8002024:	d901      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e06d      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800202a:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002036:	4b36      	ldr	r3, [pc, #216]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002038:	6a1b      	ldr	r3, [r3, #32]
 800203a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800203e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d02e      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	429a      	cmp	r2, r3
 8002052:	d027      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002054:	4b2e      	ldr	r3, [pc, #184]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002056:	6a1b      	ldr	r3, [r3, #32]
 8002058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800205c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800205e:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002060:	2201      	movs	r2, #1
 8002062:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800206a:	4a29      	ldr	r2, [pc, #164]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d014      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7fe fce5 	bl	8000a48 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7fe fce1 	bl	8000a48 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e036      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a4:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4917      	ldr	r1, [pc, #92]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020b6:	7dfb      	ldrb	r3, [r7, #23]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020bc:	4b14      	ldr	r3, [pc, #80]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	4a13      	ldr	r2, [pc, #76]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020d4:	4b0e      	ldr	r3, [pc, #56]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	490b      	ldr	r1, [pc, #44]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0310 	and.w	r3, r3, #16
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d008      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020f2:	4b07      	ldr	r3, [pc, #28]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	4904      	ldr	r1, [pc, #16]	; (8002110 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	42420440 	.word	0x42420440

0800211c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d101      	bne.n	800212e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e041      	b.n	80021b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002134:	b2db      	uxtb	r3, r3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d106      	bne.n	8002148 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f7fe fad6 	bl	80006f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2202      	movs	r2, #2
 800214c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3304      	adds	r3, #4
 8002158:	4619      	mov	r1, r3
 800215a:	4610      	mov	r0, r2
 800215c:	f000 fa74 	bl	8002648 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d001      	beq.n	80021d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e03a      	b.n	800224a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2202      	movs	r2, #2
 80021d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	68da      	ldr	r2, [r3, #12]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0201 	orr.w	r2, r2, #1
 80021ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a18      	ldr	r2, [pc, #96]	; (8002254 <HAL_TIM_Base_Start_IT+0x98>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00e      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x58>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021fe:	d009      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x58>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a14      	ldr	r2, [pc, #80]	; (8002258 <HAL_TIM_Base_Start_IT+0x9c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d004      	beq.n	8002214 <HAL_TIM_Base_Start_IT+0x58>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a13      	ldr	r2, [pc, #76]	; (800225c <HAL_TIM_Base_Start_IT+0xa0>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d111      	bne.n	8002238 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2b06      	cmp	r3, #6
 8002224:	d010      	beq.n	8002248 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f042 0201 	orr.w	r2, r2, #1
 8002234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002236:	e007      	b.n	8002248 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f042 0201 	orr.w	r2, r2, #1
 8002246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40000800 	.word	0x40000800

08002260 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b02      	cmp	r3, #2
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b02      	cmp	r3, #2
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0202 	mvn.w	r2, #2
 800228c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f9b4 	bl	8002610 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f9a7 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f9b6 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d122      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d11b      	bne.n	8002310 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0204 	mvn.w	r2, #4
 80022e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2202      	movs	r2, #2
 80022e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f000 f98a 	bl	8002610 <HAL_TIM_IC_CaptureCallback>
 80022fc:	e005      	b.n	800230a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f97d 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 f98c 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	2b08      	cmp	r3, #8
 800231c:	d122      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f003 0308 	and.w	r3, r3, #8
 8002328:	2b08      	cmp	r3, #8
 800232a:	d11b      	bne.n	8002364 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f06f 0208 	mvn.w	r2, #8
 8002334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2204      	movs	r2, #4
 800233a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f960 	bl	8002610 <HAL_TIM_IC_CaptureCallback>
 8002350:	e005      	b.n	800235e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f953 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f962 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	f003 0310 	and.w	r3, r3, #16
 800236e:	2b10      	cmp	r3, #16
 8002370:	d122      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b10      	cmp	r3, #16
 800237e:	d11b      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0210 	mvn.w	r2, #16
 8002388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2208      	movs	r2, #8
 800238e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800239a:	2b00      	cmp	r3, #0
 800239c:	d003      	beq.n	80023a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f000 f936 	bl	8002610 <HAL_TIM_IC_CaptureCallback>
 80023a4:	e005      	b.n	80023b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f929 	bl	80025fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f938 	bl	8002622 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10e      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f06f 0201 	mvn.w	r2, #1
 80023dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7fe f8cc 	bl	800057c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	2b80      	cmp	r3, #128	; 0x80
 80023f0:	d10e      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d107      	bne.n	8002410 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 fa7b 	bl	8002906 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d10e      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002428:	2b40      	cmp	r3, #64	; 0x40
 800242a:	d107      	bne.n	800243c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 f8fc 	bl	8002634 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b20      	cmp	r3, #32
 8002448:	d10e      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b20      	cmp	r3, #32
 8002456:	d107      	bne.n	8002468 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0220 	mvn.w	r2, #32
 8002460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fa46 	bl	80028f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002484:	2b01      	cmp	r3, #1
 8002486:	d101      	bne.n	800248c <HAL_TIM_ConfigClockSource+0x1c>
 8002488:	2302      	movs	r3, #2
 800248a:	e0b4      	b.n	80025f6 <HAL_TIM_ConfigClockSource+0x186>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024c4:	d03e      	beq.n	8002544 <HAL_TIM_ConfigClockSource+0xd4>
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ca:	f200 8087 	bhi.w	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d2:	f000 8086 	beq.w	80025e2 <HAL_TIM_ConfigClockSource+0x172>
 80024d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024da:	d87f      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b70      	cmp	r3, #112	; 0x70
 80024de:	d01a      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xa6>
 80024e0:	2b70      	cmp	r3, #112	; 0x70
 80024e2:	d87b      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b60      	cmp	r3, #96	; 0x60
 80024e6:	d050      	beq.n	800258a <HAL_TIM_ConfigClockSource+0x11a>
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d877      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b50      	cmp	r3, #80	; 0x50
 80024ee:	d03c      	beq.n	800256a <HAL_TIM_ConfigClockSource+0xfa>
 80024f0:	2b50      	cmp	r3, #80	; 0x50
 80024f2:	d873      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d058      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0x13a>
 80024f8:	2b40      	cmp	r3, #64	; 0x40
 80024fa:	d86f      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b30      	cmp	r3, #48	; 0x30
 80024fe:	d064      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	2b30      	cmp	r3, #48	; 0x30
 8002502:	d86b      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 8002504:	2b20      	cmp	r3, #32
 8002506:	d060      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15a>
 8002508:	2b20      	cmp	r3, #32
 800250a:	d867      	bhi.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
 800250c:	2b00      	cmp	r3, #0
 800250e:	d05c      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15a>
 8002510:	2b10      	cmp	r3, #16
 8002512:	d05a      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x15a>
 8002514:	e062      	b.n	80025dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6899      	ldr	r1, [r3, #8]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	f000 f968 	bl	80027fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002538:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	609a      	str	r2, [r3, #8]
      break;
 8002542:	e04f      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6818      	ldr	r0, [r3, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6899      	ldr	r1, [r3, #8]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f000 f951 	bl	80027fa <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002566:	609a      	str	r2, [r3, #8]
      break;
 8002568:	e03c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6859      	ldr	r1, [r3, #4]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	461a      	mov	r2, r3
 8002578:	f000 f8c8 	bl	800270c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2150      	movs	r1, #80	; 0x50
 8002582:	4618      	mov	r0, r3
 8002584:	f000 f91f 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 8002588:	e02c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6818      	ldr	r0, [r3, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 f8e6 	bl	8002768 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2160      	movs	r1, #96	; 0x60
 80025a2:	4618      	mov	r0, r3
 80025a4:	f000 f90f 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025a8:	e01c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 f8a8 	bl	800270c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2140      	movs	r1, #64	; 0x40
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f8ff 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e00c      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4619      	mov	r1, r3
 80025d4:	4610      	mov	r0, r2
 80025d6:	f000 f8f6 	bl	80027c6 <TIM_ITRx_SetConfig>
      break;
 80025da:	e003      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	73fb      	strb	r3, [r7, #15]
      break;
 80025e0:	e000      	b.n	80025e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}

080025fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fe:	b480      	push	{r7}
 8002600:	b083      	sub	sp, #12
 8002602:	af00      	add	r7, sp, #0
 8002604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr

08002610 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002618:	bf00      	nop
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	bc80      	pop	{r7}
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr
	...

08002648 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	4a29      	ldr	r2, [pc, #164]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d00b      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d007      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <TIM_Base_SetConfig+0xbc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d003      	beq.n	8002678 <TIM_Base_SetConfig+0x30>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4a25      	ldr	r2, [pc, #148]	; (8002708 <TIM_Base_SetConfig+0xc0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d108      	bne.n	800268a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	68fa      	ldr	r2, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a1c      	ldr	r2, [pc, #112]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a19      	ldr	r2, [pc, #100]	; (8002704 <TIM_Base_SetConfig+0xbc>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0x62>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a18      	ldr	r2, [pc, #96]	; (8002708 <TIM_Base_SetConfig+0xc0>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a07      	ldr	r2, [pc, #28]	; (8002700 <TIM_Base_SetConfig+0xb8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]
}
 80026f6:	bf00      	nop
 80026f8:	3714      	adds	r7, #20
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr
 8002700:	40012c00 	.word	0x40012c00
 8002704:	40000400 	.word	0x40000400
 8002708:	40000800 	.word	0x40000800

0800270c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800270c:	b480      	push	{r7}
 800270e:	b087      	sub	sp, #28
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	f023 0201 	bic.w	r2, r3, #1
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f023 030a 	bic.w	r3, r3, #10
 8002748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4313      	orrs	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	693a      	ldr	r2, [r7, #16]
 8002756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	621a      	str	r2, [r3, #32]
}
 800275e:	bf00      	nop
 8002760:	371c      	adds	r7, #28
 8002762:	46bd      	mov	sp, r7
 8002764:	bc80      	pop	{r7}
 8002766:	4770      	bx	lr

08002768 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002768:	b480      	push	{r7}
 800276a:	b087      	sub	sp, #28
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	f023 0210 	bic.w	r2, r3, #16
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002792:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	031b      	lsls	r3, r3, #12
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	4313      	orrs	r3, r2
 800279c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	697a      	ldr	r2, [r7, #20]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	621a      	str	r2, [r3, #32]
}
 80027bc:	bf00      	nop
 80027be:	371c      	adds	r7, #28
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bc80      	pop	{r7}
 80027c4:	4770      	bx	lr

080027c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027c6:	b480      	push	{r7}
 80027c8:	b085      	sub	sp, #20
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	f043 0307 	orr.w	r3, r3, #7
 80027e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr

080027fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b087      	sub	sp, #28
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002814:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	021a      	lsls	r2, r3, #8
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	431a      	orrs	r2, r3
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	4313      	orrs	r3, r2
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	4313      	orrs	r3, r2
 8002826:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	371c      	adds	r7, #28
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e046      	b.n	80028de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00e      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800289c:	d009      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d004      	beq.n	80028b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a10      	ldr	r2, [pc, #64]	; (80028f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10c      	bne.n	80028cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr
 80028e8:	40012c00 	.word	0x40012c00
 80028ec:	40000400 	.word	0x40000400
 80028f0:	40000800 	.word	0x40000800

080028f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <__errno>:
 8002918:	4b01      	ldr	r3, [pc, #4]	; (8002920 <__errno+0x8>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	2000000c 	.word	0x2000000c

08002924 <__libc_init_array>:
 8002924:	b570      	push	{r4, r5, r6, lr}
 8002926:	2600      	movs	r6, #0
 8002928:	4d0c      	ldr	r5, [pc, #48]	; (800295c <__libc_init_array+0x38>)
 800292a:	4c0d      	ldr	r4, [pc, #52]	; (8002960 <__libc_init_array+0x3c>)
 800292c:	1b64      	subs	r4, r4, r5
 800292e:	10a4      	asrs	r4, r4, #2
 8002930:	42a6      	cmp	r6, r4
 8002932:	d109      	bne.n	8002948 <__libc_init_array+0x24>
 8002934:	f000 ffb6 	bl	80038a4 <_init>
 8002938:	2600      	movs	r6, #0
 800293a:	4d0a      	ldr	r5, [pc, #40]	; (8002964 <__libc_init_array+0x40>)
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <__libc_init_array+0x44>)
 800293e:	1b64      	subs	r4, r4, r5
 8002940:	10a4      	asrs	r4, r4, #2
 8002942:	42a6      	cmp	r6, r4
 8002944:	d105      	bne.n	8002952 <__libc_init_array+0x2e>
 8002946:	bd70      	pop	{r4, r5, r6, pc}
 8002948:	f855 3b04 	ldr.w	r3, [r5], #4
 800294c:	4798      	blx	r3
 800294e:	3601      	adds	r6, #1
 8002950:	e7ee      	b.n	8002930 <__libc_init_array+0xc>
 8002952:	f855 3b04 	ldr.w	r3, [r5], #4
 8002956:	4798      	blx	r3
 8002958:	3601      	adds	r6, #1
 800295a:	e7f2      	b.n	8002942 <__libc_init_array+0x1e>
 800295c:	0800398c 	.word	0x0800398c
 8002960:	0800398c 	.word	0x0800398c
 8002964:	0800398c 	.word	0x0800398c
 8002968:	08003990 	.word	0x08003990

0800296c <memset>:
 800296c:	4603      	mov	r3, r0
 800296e:	4402      	add	r2, r0
 8002970:	4293      	cmp	r3, r2
 8002972:	d100      	bne.n	8002976 <memset+0xa>
 8002974:	4770      	bx	lr
 8002976:	f803 1b01 	strb.w	r1, [r3], #1
 800297a:	e7f9      	b.n	8002970 <memset+0x4>

0800297c <iprintf>:
 800297c:	b40f      	push	{r0, r1, r2, r3}
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <iprintf+0x2c>)
 8002980:	b513      	push	{r0, r1, r4, lr}
 8002982:	681c      	ldr	r4, [r3, #0]
 8002984:	b124      	cbz	r4, 8002990 <iprintf+0x14>
 8002986:	69a3      	ldr	r3, [r4, #24]
 8002988:	b913      	cbnz	r3, 8002990 <iprintf+0x14>
 800298a:	4620      	mov	r0, r4
 800298c:	f000 f866 	bl	8002a5c <__sinit>
 8002990:	ab05      	add	r3, sp, #20
 8002992:	4620      	mov	r0, r4
 8002994:	9a04      	ldr	r2, [sp, #16]
 8002996:	68a1      	ldr	r1, [r4, #8]
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	f000 f9bb 	bl	8002d14 <_vfiprintf_r>
 800299e:	b002      	add	sp, #8
 80029a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029a4:	b004      	add	sp, #16
 80029a6:	4770      	bx	lr
 80029a8:	2000000c 	.word	0x2000000c

080029ac <std>:
 80029ac:	2300      	movs	r3, #0
 80029ae:	b510      	push	{r4, lr}
 80029b0:	4604      	mov	r4, r0
 80029b2:	e9c0 3300 	strd	r3, r3, [r0]
 80029b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029ba:	6083      	str	r3, [r0, #8]
 80029bc:	8181      	strh	r1, [r0, #12]
 80029be:	6643      	str	r3, [r0, #100]	; 0x64
 80029c0:	81c2      	strh	r2, [r0, #14]
 80029c2:	6183      	str	r3, [r0, #24]
 80029c4:	4619      	mov	r1, r3
 80029c6:	2208      	movs	r2, #8
 80029c8:	305c      	adds	r0, #92	; 0x5c
 80029ca:	f7ff ffcf 	bl	800296c <memset>
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <std+0x38>)
 80029d0:	6224      	str	r4, [r4, #32]
 80029d2:	6263      	str	r3, [r4, #36]	; 0x24
 80029d4:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <std+0x3c>)
 80029d6:	62a3      	str	r3, [r4, #40]	; 0x28
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <std+0x40>)
 80029da:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <std+0x44>)
 80029de:	6323      	str	r3, [r4, #48]	; 0x30
 80029e0:	bd10      	pop	{r4, pc}
 80029e2:	bf00      	nop
 80029e4:	080032c1 	.word	0x080032c1
 80029e8:	080032e3 	.word	0x080032e3
 80029ec:	0800331b 	.word	0x0800331b
 80029f0:	0800333f 	.word	0x0800333f

080029f4 <_cleanup_r>:
 80029f4:	4901      	ldr	r1, [pc, #4]	; (80029fc <_cleanup_r+0x8>)
 80029f6:	f000 b8af 	b.w	8002b58 <_fwalk_reent>
 80029fa:	bf00      	nop
 80029fc:	08003611 	.word	0x08003611

08002a00 <__sfmoreglue>:
 8002a00:	2268      	movs	r2, #104	; 0x68
 8002a02:	b570      	push	{r4, r5, r6, lr}
 8002a04:	1e4d      	subs	r5, r1, #1
 8002a06:	4355      	muls	r5, r2
 8002a08:	460e      	mov	r6, r1
 8002a0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002a0e:	f000 f8e5 	bl	8002bdc <_malloc_r>
 8002a12:	4604      	mov	r4, r0
 8002a14:	b140      	cbz	r0, 8002a28 <__sfmoreglue+0x28>
 8002a16:	2100      	movs	r1, #0
 8002a18:	e9c0 1600 	strd	r1, r6, [r0]
 8002a1c:	300c      	adds	r0, #12
 8002a1e:	60a0      	str	r0, [r4, #8]
 8002a20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002a24:	f7ff ffa2 	bl	800296c <memset>
 8002a28:	4620      	mov	r0, r4
 8002a2a:	bd70      	pop	{r4, r5, r6, pc}

08002a2c <__sfp_lock_acquire>:
 8002a2c:	4801      	ldr	r0, [pc, #4]	; (8002a34 <__sfp_lock_acquire+0x8>)
 8002a2e:	f000 b8b3 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 8002a32:	bf00      	nop
 8002a34:	20000175 	.word	0x20000175

08002a38 <__sfp_lock_release>:
 8002a38:	4801      	ldr	r0, [pc, #4]	; (8002a40 <__sfp_lock_release+0x8>)
 8002a3a:	f000 b8ae 	b.w	8002b9a <__retarget_lock_release_recursive>
 8002a3e:	bf00      	nop
 8002a40:	20000175 	.word	0x20000175

08002a44 <__sinit_lock_acquire>:
 8002a44:	4801      	ldr	r0, [pc, #4]	; (8002a4c <__sinit_lock_acquire+0x8>)
 8002a46:	f000 b8a7 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 8002a4a:	bf00      	nop
 8002a4c:	20000176 	.word	0x20000176

08002a50 <__sinit_lock_release>:
 8002a50:	4801      	ldr	r0, [pc, #4]	; (8002a58 <__sinit_lock_release+0x8>)
 8002a52:	f000 b8a2 	b.w	8002b9a <__retarget_lock_release_recursive>
 8002a56:	bf00      	nop
 8002a58:	20000176 	.word	0x20000176

08002a5c <__sinit>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4604      	mov	r4, r0
 8002a60:	f7ff fff0 	bl	8002a44 <__sinit_lock_acquire>
 8002a64:	69a3      	ldr	r3, [r4, #24]
 8002a66:	b11b      	cbz	r3, 8002a70 <__sinit+0x14>
 8002a68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a6c:	f7ff bff0 	b.w	8002a50 <__sinit_lock_release>
 8002a70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002a74:	6523      	str	r3, [r4, #80]	; 0x50
 8002a76:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <__sinit+0x68>)
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <__sinit+0x6c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8002a7e:	42a3      	cmp	r3, r4
 8002a80:	bf08      	it	eq
 8002a82:	2301      	moveq	r3, #1
 8002a84:	4620      	mov	r0, r4
 8002a86:	bf08      	it	eq
 8002a88:	61a3      	streq	r3, [r4, #24]
 8002a8a:	f000 f81f 	bl	8002acc <__sfp>
 8002a8e:	6060      	str	r0, [r4, #4]
 8002a90:	4620      	mov	r0, r4
 8002a92:	f000 f81b 	bl	8002acc <__sfp>
 8002a96:	60a0      	str	r0, [r4, #8]
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 f817 	bl	8002acc <__sfp>
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	2104      	movs	r1, #4
 8002aa2:	60e0      	str	r0, [r4, #12]
 8002aa4:	6860      	ldr	r0, [r4, #4]
 8002aa6:	f7ff ff81 	bl	80029ac <std>
 8002aaa:	2201      	movs	r2, #1
 8002aac:	2109      	movs	r1, #9
 8002aae:	68a0      	ldr	r0, [r4, #8]
 8002ab0:	f7ff ff7c 	bl	80029ac <std>
 8002ab4:	2202      	movs	r2, #2
 8002ab6:	2112      	movs	r1, #18
 8002ab8:	68e0      	ldr	r0, [r4, #12]
 8002aba:	f7ff ff77 	bl	80029ac <std>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61a3      	str	r3, [r4, #24]
 8002ac2:	e7d1      	b.n	8002a68 <__sinit+0xc>
 8002ac4:	080038f4 	.word	0x080038f4
 8002ac8:	080029f5 	.word	0x080029f5

08002acc <__sfp>:
 8002acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ace:	4607      	mov	r7, r0
 8002ad0:	f7ff ffac 	bl	8002a2c <__sfp_lock_acquire>
 8002ad4:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <__sfp+0x84>)
 8002ad6:	681e      	ldr	r6, [r3, #0]
 8002ad8:	69b3      	ldr	r3, [r6, #24]
 8002ada:	b913      	cbnz	r3, 8002ae2 <__sfp+0x16>
 8002adc:	4630      	mov	r0, r6
 8002ade:	f7ff ffbd 	bl	8002a5c <__sinit>
 8002ae2:	3648      	adds	r6, #72	; 0x48
 8002ae4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	d503      	bpl.n	8002af4 <__sfp+0x28>
 8002aec:	6833      	ldr	r3, [r6, #0]
 8002aee:	b30b      	cbz	r3, 8002b34 <__sfp+0x68>
 8002af0:	6836      	ldr	r6, [r6, #0]
 8002af2:	e7f7      	b.n	8002ae4 <__sfp+0x18>
 8002af4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002af8:	b9d5      	cbnz	r5, 8002b30 <__sfp+0x64>
 8002afa:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <__sfp+0x88>)
 8002afc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002b00:	60e3      	str	r3, [r4, #12]
 8002b02:	6665      	str	r5, [r4, #100]	; 0x64
 8002b04:	f000 f847 	bl	8002b96 <__retarget_lock_init_recursive>
 8002b08:	f7ff ff96 	bl	8002a38 <__sfp_lock_release>
 8002b0c:	2208      	movs	r2, #8
 8002b0e:	4629      	mov	r1, r5
 8002b10:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002b14:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002b18:	6025      	str	r5, [r4, #0]
 8002b1a:	61a5      	str	r5, [r4, #24]
 8002b1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002b20:	f7ff ff24 	bl	800296c <memset>
 8002b24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002b28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b30:	3468      	adds	r4, #104	; 0x68
 8002b32:	e7d9      	b.n	8002ae8 <__sfp+0x1c>
 8002b34:	2104      	movs	r1, #4
 8002b36:	4638      	mov	r0, r7
 8002b38:	f7ff ff62 	bl	8002a00 <__sfmoreglue>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	6030      	str	r0, [r6, #0]
 8002b40:	2800      	cmp	r0, #0
 8002b42:	d1d5      	bne.n	8002af0 <__sfp+0x24>
 8002b44:	f7ff ff78 	bl	8002a38 <__sfp_lock_release>
 8002b48:	230c      	movs	r3, #12
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	e7ee      	b.n	8002b2c <__sfp+0x60>
 8002b4e:	bf00      	nop
 8002b50:	080038f4 	.word	0x080038f4
 8002b54:	ffff0001 	.word	0xffff0001

08002b58 <_fwalk_reent>:
 8002b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b5c:	4606      	mov	r6, r0
 8002b5e:	4688      	mov	r8, r1
 8002b60:	2700      	movs	r7, #0
 8002b62:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002b66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002b6a:	f1b9 0901 	subs.w	r9, r9, #1
 8002b6e:	d505      	bpl.n	8002b7c <_fwalk_reent+0x24>
 8002b70:	6824      	ldr	r4, [r4, #0]
 8002b72:	2c00      	cmp	r4, #0
 8002b74:	d1f7      	bne.n	8002b66 <_fwalk_reent+0xe>
 8002b76:	4638      	mov	r0, r7
 8002b78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b7c:	89ab      	ldrh	r3, [r5, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d907      	bls.n	8002b92 <_fwalk_reent+0x3a>
 8002b82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b86:	3301      	adds	r3, #1
 8002b88:	d003      	beq.n	8002b92 <_fwalk_reent+0x3a>
 8002b8a:	4629      	mov	r1, r5
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	47c0      	blx	r8
 8002b90:	4307      	orrs	r7, r0
 8002b92:	3568      	adds	r5, #104	; 0x68
 8002b94:	e7e9      	b.n	8002b6a <_fwalk_reent+0x12>

08002b96 <__retarget_lock_init_recursive>:
 8002b96:	4770      	bx	lr

08002b98 <__retarget_lock_acquire_recursive>:
 8002b98:	4770      	bx	lr

08002b9a <__retarget_lock_release_recursive>:
 8002b9a:	4770      	bx	lr

08002b9c <sbrk_aligned>:
 8002b9c:	b570      	push	{r4, r5, r6, lr}
 8002b9e:	4e0e      	ldr	r6, [pc, #56]	; (8002bd8 <sbrk_aligned+0x3c>)
 8002ba0:	460c      	mov	r4, r1
 8002ba2:	6831      	ldr	r1, [r6, #0]
 8002ba4:	4605      	mov	r5, r0
 8002ba6:	b911      	cbnz	r1, 8002bae <sbrk_aligned+0x12>
 8002ba8:	f000 fb7a 	bl	80032a0 <_sbrk_r>
 8002bac:	6030      	str	r0, [r6, #0]
 8002bae:	4621      	mov	r1, r4
 8002bb0:	4628      	mov	r0, r5
 8002bb2:	f000 fb75 	bl	80032a0 <_sbrk_r>
 8002bb6:	1c43      	adds	r3, r0, #1
 8002bb8:	d00a      	beq.n	8002bd0 <sbrk_aligned+0x34>
 8002bba:	1cc4      	adds	r4, r0, #3
 8002bbc:	f024 0403 	bic.w	r4, r4, #3
 8002bc0:	42a0      	cmp	r0, r4
 8002bc2:	d007      	beq.n	8002bd4 <sbrk_aligned+0x38>
 8002bc4:	1a21      	subs	r1, r4, r0
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f000 fb6a 	bl	80032a0 <_sbrk_r>
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d101      	bne.n	8002bd4 <sbrk_aligned+0x38>
 8002bd0:	f04f 34ff 	mov.w	r4, #4294967295
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
 8002bd8:	2000017c 	.word	0x2000017c

08002bdc <_malloc_r>:
 8002bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002be0:	1ccd      	adds	r5, r1, #3
 8002be2:	f025 0503 	bic.w	r5, r5, #3
 8002be6:	3508      	adds	r5, #8
 8002be8:	2d0c      	cmp	r5, #12
 8002bea:	bf38      	it	cc
 8002bec:	250c      	movcc	r5, #12
 8002bee:	2d00      	cmp	r5, #0
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	db01      	blt.n	8002bf8 <_malloc_r+0x1c>
 8002bf4:	42a9      	cmp	r1, r5
 8002bf6:	d905      	bls.n	8002c04 <_malloc_r+0x28>
 8002bf8:	230c      	movs	r3, #12
 8002bfa:	2600      	movs	r6, #0
 8002bfc:	603b      	str	r3, [r7, #0]
 8002bfe:	4630      	mov	r0, r6
 8002c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002c04:	4e2e      	ldr	r6, [pc, #184]	; (8002cc0 <_malloc_r+0xe4>)
 8002c06:	f000 fdc5 	bl	8003794 <__malloc_lock>
 8002c0a:	6833      	ldr	r3, [r6, #0]
 8002c0c:	461c      	mov	r4, r3
 8002c0e:	bb34      	cbnz	r4, 8002c5e <_malloc_r+0x82>
 8002c10:	4629      	mov	r1, r5
 8002c12:	4638      	mov	r0, r7
 8002c14:	f7ff ffc2 	bl	8002b9c <sbrk_aligned>
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	d14d      	bne.n	8002cba <_malloc_r+0xde>
 8002c1e:	6834      	ldr	r4, [r6, #0]
 8002c20:	4626      	mov	r6, r4
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	d140      	bne.n	8002ca8 <_malloc_r+0xcc>
 8002c26:	6823      	ldr	r3, [r4, #0]
 8002c28:	4631      	mov	r1, r6
 8002c2a:	4638      	mov	r0, r7
 8002c2c:	eb04 0803 	add.w	r8, r4, r3
 8002c30:	f000 fb36 	bl	80032a0 <_sbrk_r>
 8002c34:	4580      	cmp	r8, r0
 8002c36:	d13a      	bne.n	8002cae <_malloc_r+0xd2>
 8002c38:	6821      	ldr	r1, [r4, #0]
 8002c3a:	3503      	adds	r5, #3
 8002c3c:	1a6d      	subs	r5, r5, r1
 8002c3e:	f025 0503 	bic.w	r5, r5, #3
 8002c42:	3508      	adds	r5, #8
 8002c44:	2d0c      	cmp	r5, #12
 8002c46:	bf38      	it	cc
 8002c48:	250c      	movcc	r5, #12
 8002c4a:	4638      	mov	r0, r7
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f7ff ffa5 	bl	8002b9c <sbrk_aligned>
 8002c52:	3001      	adds	r0, #1
 8002c54:	d02b      	beq.n	8002cae <_malloc_r+0xd2>
 8002c56:	6823      	ldr	r3, [r4, #0]
 8002c58:	442b      	add	r3, r5
 8002c5a:	6023      	str	r3, [r4, #0]
 8002c5c:	e00e      	b.n	8002c7c <_malloc_r+0xa0>
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	1b52      	subs	r2, r2, r5
 8002c62:	d41e      	bmi.n	8002ca2 <_malloc_r+0xc6>
 8002c64:	2a0b      	cmp	r2, #11
 8002c66:	d916      	bls.n	8002c96 <_malloc_r+0xba>
 8002c68:	1961      	adds	r1, r4, r5
 8002c6a:	42a3      	cmp	r3, r4
 8002c6c:	6025      	str	r5, [r4, #0]
 8002c6e:	bf18      	it	ne
 8002c70:	6059      	strne	r1, [r3, #4]
 8002c72:	6863      	ldr	r3, [r4, #4]
 8002c74:	bf08      	it	eq
 8002c76:	6031      	streq	r1, [r6, #0]
 8002c78:	5162      	str	r2, [r4, r5]
 8002c7a:	604b      	str	r3, [r1, #4]
 8002c7c:	4638      	mov	r0, r7
 8002c7e:	f104 060b 	add.w	r6, r4, #11
 8002c82:	f000 fd8d 	bl	80037a0 <__malloc_unlock>
 8002c86:	f026 0607 	bic.w	r6, r6, #7
 8002c8a:	1d23      	adds	r3, r4, #4
 8002c8c:	1af2      	subs	r2, r6, r3
 8002c8e:	d0b6      	beq.n	8002bfe <_malloc_r+0x22>
 8002c90:	1b9b      	subs	r3, r3, r6
 8002c92:	50a3      	str	r3, [r4, r2]
 8002c94:	e7b3      	b.n	8002bfe <_malloc_r+0x22>
 8002c96:	6862      	ldr	r2, [r4, #4]
 8002c98:	42a3      	cmp	r3, r4
 8002c9a:	bf0c      	ite	eq
 8002c9c:	6032      	streq	r2, [r6, #0]
 8002c9e:	605a      	strne	r2, [r3, #4]
 8002ca0:	e7ec      	b.n	8002c7c <_malloc_r+0xa0>
 8002ca2:	4623      	mov	r3, r4
 8002ca4:	6864      	ldr	r4, [r4, #4]
 8002ca6:	e7b2      	b.n	8002c0e <_malloc_r+0x32>
 8002ca8:	4634      	mov	r4, r6
 8002caa:	6876      	ldr	r6, [r6, #4]
 8002cac:	e7b9      	b.n	8002c22 <_malloc_r+0x46>
 8002cae:	230c      	movs	r3, #12
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	603b      	str	r3, [r7, #0]
 8002cb4:	f000 fd74 	bl	80037a0 <__malloc_unlock>
 8002cb8:	e7a1      	b.n	8002bfe <_malloc_r+0x22>
 8002cba:	6025      	str	r5, [r4, #0]
 8002cbc:	e7de      	b.n	8002c7c <_malloc_r+0xa0>
 8002cbe:	bf00      	nop
 8002cc0:	20000178 	.word	0x20000178

08002cc4 <__sfputc_r>:
 8002cc4:	6893      	ldr	r3, [r2, #8]
 8002cc6:	b410      	push	{r4}
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	6093      	str	r3, [r2, #8]
 8002cce:	da07      	bge.n	8002ce0 <__sfputc_r+0x1c>
 8002cd0:	6994      	ldr	r4, [r2, #24]
 8002cd2:	42a3      	cmp	r3, r4
 8002cd4:	db01      	blt.n	8002cda <__sfputc_r+0x16>
 8002cd6:	290a      	cmp	r1, #10
 8002cd8:	d102      	bne.n	8002ce0 <__sfputc_r+0x1c>
 8002cda:	bc10      	pop	{r4}
 8002cdc:	f000 bb34 	b.w	8003348 <__swbuf_r>
 8002ce0:	6813      	ldr	r3, [r2, #0]
 8002ce2:	1c58      	adds	r0, r3, #1
 8002ce4:	6010      	str	r0, [r2, #0]
 8002ce6:	7019      	strb	r1, [r3, #0]
 8002ce8:	4608      	mov	r0, r1
 8002cea:	bc10      	pop	{r4}
 8002cec:	4770      	bx	lr

08002cee <__sfputs_r>:
 8002cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cf0:	4606      	mov	r6, r0
 8002cf2:	460f      	mov	r7, r1
 8002cf4:	4614      	mov	r4, r2
 8002cf6:	18d5      	adds	r5, r2, r3
 8002cf8:	42ac      	cmp	r4, r5
 8002cfa:	d101      	bne.n	8002d00 <__sfputs_r+0x12>
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e007      	b.n	8002d10 <__sfputs_r+0x22>
 8002d00:	463a      	mov	r2, r7
 8002d02:	4630      	mov	r0, r6
 8002d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d08:	f7ff ffdc 	bl	8002cc4 <__sfputc_r>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d1f3      	bne.n	8002cf8 <__sfputs_r+0xa>
 8002d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d14 <_vfiprintf_r>:
 8002d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	4698      	mov	r8, r3
 8002d1e:	4606      	mov	r6, r0
 8002d20:	b09d      	sub	sp, #116	; 0x74
 8002d22:	b118      	cbz	r0, 8002d2c <_vfiprintf_r+0x18>
 8002d24:	6983      	ldr	r3, [r0, #24]
 8002d26:	b90b      	cbnz	r3, 8002d2c <_vfiprintf_r+0x18>
 8002d28:	f7ff fe98 	bl	8002a5c <__sinit>
 8002d2c:	4b89      	ldr	r3, [pc, #548]	; (8002f54 <_vfiprintf_r+0x240>)
 8002d2e:	429d      	cmp	r5, r3
 8002d30:	d11b      	bne.n	8002d6a <_vfiprintf_r+0x56>
 8002d32:	6875      	ldr	r5, [r6, #4]
 8002d34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d36:	07d9      	lsls	r1, r3, #31
 8002d38:	d405      	bmi.n	8002d46 <_vfiprintf_r+0x32>
 8002d3a:	89ab      	ldrh	r3, [r5, #12]
 8002d3c:	059a      	lsls	r2, r3, #22
 8002d3e:	d402      	bmi.n	8002d46 <_vfiprintf_r+0x32>
 8002d40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d42:	f7ff ff29 	bl	8002b98 <__retarget_lock_acquire_recursive>
 8002d46:	89ab      	ldrh	r3, [r5, #12]
 8002d48:	071b      	lsls	r3, r3, #28
 8002d4a:	d501      	bpl.n	8002d50 <_vfiprintf_r+0x3c>
 8002d4c:	692b      	ldr	r3, [r5, #16]
 8002d4e:	b9eb      	cbnz	r3, 8002d8c <_vfiprintf_r+0x78>
 8002d50:	4629      	mov	r1, r5
 8002d52:	4630      	mov	r0, r6
 8002d54:	f000 fb5c 	bl	8003410 <__swsetup_r>
 8002d58:	b1c0      	cbz	r0, 8002d8c <_vfiprintf_r+0x78>
 8002d5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d5c:	07dc      	lsls	r4, r3, #31
 8002d5e:	d50e      	bpl.n	8002d7e <_vfiprintf_r+0x6a>
 8002d60:	f04f 30ff 	mov.w	r0, #4294967295
 8002d64:	b01d      	add	sp, #116	; 0x74
 8002d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6a:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <_vfiprintf_r+0x244>)
 8002d6c:	429d      	cmp	r5, r3
 8002d6e:	d101      	bne.n	8002d74 <_vfiprintf_r+0x60>
 8002d70:	68b5      	ldr	r5, [r6, #8]
 8002d72:	e7df      	b.n	8002d34 <_vfiprintf_r+0x20>
 8002d74:	4b79      	ldr	r3, [pc, #484]	; (8002f5c <_vfiprintf_r+0x248>)
 8002d76:	429d      	cmp	r5, r3
 8002d78:	bf08      	it	eq
 8002d7a:	68f5      	ldreq	r5, [r6, #12]
 8002d7c:	e7da      	b.n	8002d34 <_vfiprintf_r+0x20>
 8002d7e:	89ab      	ldrh	r3, [r5, #12]
 8002d80:	0598      	lsls	r0, r3, #22
 8002d82:	d4ed      	bmi.n	8002d60 <_vfiprintf_r+0x4c>
 8002d84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d86:	f7ff ff08 	bl	8002b9a <__retarget_lock_release_recursive>
 8002d8a:	e7e9      	b.n	8002d60 <_vfiprintf_r+0x4c>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d90:	2320      	movs	r3, #32
 8002d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d96:	2330      	movs	r3, #48	; 0x30
 8002d98:	f04f 0901 	mov.w	r9, #1
 8002d9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8002da0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002f60 <_vfiprintf_r+0x24c>
 8002da4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da8:	4623      	mov	r3, r4
 8002daa:	469a      	mov	sl, r3
 8002dac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002db0:	b10a      	cbz	r2, 8002db6 <_vfiprintf_r+0xa2>
 8002db2:	2a25      	cmp	r2, #37	; 0x25
 8002db4:	d1f9      	bne.n	8002daa <_vfiprintf_r+0x96>
 8002db6:	ebba 0b04 	subs.w	fp, sl, r4
 8002dba:	d00b      	beq.n	8002dd4 <_vfiprintf_r+0xc0>
 8002dbc:	465b      	mov	r3, fp
 8002dbe:	4622      	mov	r2, r4
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4630      	mov	r0, r6
 8002dc4:	f7ff ff93 	bl	8002cee <__sfputs_r>
 8002dc8:	3001      	adds	r0, #1
 8002dca:	f000 80aa 	beq.w	8002f22 <_vfiprintf_r+0x20e>
 8002dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002dd0:	445a      	add	r2, fp
 8002dd2:	9209      	str	r2, [sp, #36]	; 0x24
 8002dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 80a2 	beq.w	8002f22 <_vfiprintf_r+0x20e>
 8002dde:	2300      	movs	r3, #0
 8002de0:	f04f 32ff 	mov.w	r2, #4294967295
 8002de4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de8:	f10a 0a01 	add.w	sl, sl, #1
 8002dec:	9304      	str	r3, [sp, #16]
 8002dee:	9307      	str	r3, [sp, #28]
 8002df0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002df4:	931a      	str	r3, [sp, #104]	; 0x68
 8002df6:	4654      	mov	r4, sl
 8002df8:	2205      	movs	r2, #5
 8002dfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002dfe:	4858      	ldr	r0, [pc, #352]	; (8002f60 <_vfiprintf_r+0x24c>)
 8002e00:	f000 fcba 	bl	8003778 <memchr>
 8002e04:	9a04      	ldr	r2, [sp, #16]
 8002e06:	b9d8      	cbnz	r0, 8002e40 <_vfiprintf_r+0x12c>
 8002e08:	06d1      	lsls	r1, r2, #27
 8002e0a:	bf44      	itt	mi
 8002e0c:	2320      	movmi	r3, #32
 8002e0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e12:	0713      	lsls	r3, r2, #28
 8002e14:	bf44      	itt	mi
 8002e16:	232b      	movmi	r3, #43	; 0x2b
 8002e18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002e1c:	f89a 3000 	ldrb.w	r3, [sl]
 8002e20:	2b2a      	cmp	r3, #42	; 0x2a
 8002e22:	d015      	beq.n	8002e50 <_vfiprintf_r+0x13c>
 8002e24:	4654      	mov	r4, sl
 8002e26:	2000      	movs	r0, #0
 8002e28:	f04f 0c0a 	mov.w	ip, #10
 8002e2c:	9a07      	ldr	r2, [sp, #28]
 8002e2e:	4621      	mov	r1, r4
 8002e30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e34:	3b30      	subs	r3, #48	; 0x30
 8002e36:	2b09      	cmp	r3, #9
 8002e38:	d94e      	bls.n	8002ed8 <_vfiprintf_r+0x1c4>
 8002e3a:	b1b0      	cbz	r0, 8002e6a <_vfiprintf_r+0x156>
 8002e3c:	9207      	str	r2, [sp, #28]
 8002e3e:	e014      	b.n	8002e6a <_vfiprintf_r+0x156>
 8002e40:	eba0 0308 	sub.w	r3, r0, r8
 8002e44:	fa09 f303 	lsl.w	r3, r9, r3
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	46a2      	mov	sl, r4
 8002e4c:	9304      	str	r3, [sp, #16]
 8002e4e:	e7d2      	b.n	8002df6 <_vfiprintf_r+0xe2>
 8002e50:	9b03      	ldr	r3, [sp, #12]
 8002e52:	1d19      	adds	r1, r3, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	9103      	str	r1, [sp, #12]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	bfbb      	ittet	lt
 8002e5c:	425b      	neglt	r3, r3
 8002e5e:	f042 0202 	orrlt.w	r2, r2, #2
 8002e62:	9307      	strge	r3, [sp, #28]
 8002e64:	9307      	strlt	r3, [sp, #28]
 8002e66:	bfb8      	it	lt
 8002e68:	9204      	strlt	r2, [sp, #16]
 8002e6a:	7823      	ldrb	r3, [r4, #0]
 8002e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e6e:	d10c      	bne.n	8002e8a <_vfiprintf_r+0x176>
 8002e70:	7863      	ldrb	r3, [r4, #1]
 8002e72:	2b2a      	cmp	r3, #42	; 0x2a
 8002e74:	d135      	bne.n	8002ee2 <_vfiprintf_r+0x1ce>
 8002e76:	9b03      	ldr	r3, [sp, #12]
 8002e78:	3402      	adds	r4, #2
 8002e7a:	1d1a      	adds	r2, r3, #4
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	9203      	str	r2, [sp, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bfb8      	it	lt
 8002e84:	f04f 33ff 	movlt.w	r3, #4294967295
 8002e88:	9305      	str	r3, [sp, #20]
 8002e8a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002f64 <_vfiprintf_r+0x250>
 8002e8e:	2203      	movs	r2, #3
 8002e90:	4650      	mov	r0, sl
 8002e92:	7821      	ldrb	r1, [r4, #0]
 8002e94:	f000 fc70 	bl	8003778 <memchr>
 8002e98:	b140      	cbz	r0, 8002eac <_vfiprintf_r+0x198>
 8002e9a:	2340      	movs	r3, #64	; 0x40
 8002e9c:	eba0 000a 	sub.w	r0, r0, sl
 8002ea0:	fa03 f000 	lsl.w	r0, r3, r0
 8002ea4:	9b04      	ldr	r3, [sp, #16]
 8002ea6:	3401      	adds	r4, #1
 8002ea8:	4303      	orrs	r3, r0
 8002eaa:	9304      	str	r3, [sp, #16]
 8002eac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002eb0:	2206      	movs	r2, #6
 8002eb2:	482d      	ldr	r0, [pc, #180]	; (8002f68 <_vfiprintf_r+0x254>)
 8002eb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eb8:	f000 fc5e 	bl	8003778 <memchr>
 8002ebc:	2800      	cmp	r0, #0
 8002ebe:	d03f      	beq.n	8002f40 <_vfiprintf_r+0x22c>
 8002ec0:	4b2a      	ldr	r3, [pc, #168]	; (8002f6c <_vfiprintf_r+0x258>)
 8002ec2:	bb1b      	cbnz	r3, 8002f0c <_vfiprintf_r+0x1f8>
 8002ec4:	9b03      	ldr	r3, [sp, #12]
 8002ec6:	3307      	adds	r3, #7
 8002ec8:	f023 0307 	bic.w	r3, r3, #7
 8002ecc:	3308      	adds	r3, #8
 8002ece:	9303      	str	r3, [sp, #12]
 8002ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ed2:	443b      	add	r3, r7
 8002ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed6:	e767      	b.n	8002da8 <_vfiprintf_r+0x94>
 8002ed8:	460c      	mov	r4, r1
 8002eda:	2001      	movs	r0, #1
 8002edc:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ee0:	e7a5      	b.n	8002e2e <_vfiprintf_r+0x11a>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f04f 0c0a 	mov.w	ip, #10
 8002ee8:	4619      	mov	r1, r3
 8002eea:	3401      	adds	r4, #1
 8002eec:	9305      	str	r3, [sp, #20]
 8002eee:	4620      	mov	r0, r4
 8002ef0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ef4:	3a30      	subs	r2, #48	; 0x30
 8002ef6:	2a09      	cmp	r2, #9
 8002ef8:	d903      	bls.n	8002f02 <_vfiprintf_r+0x1ee>
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0c5      	beq.n	8002e8a <_vfiprintf_r+0x176>
 8002efe:	9105      	str	r1, [sp, #20]
 8002f00:	e7c3      	b.n	8002e8a <_vfiprintf_r+0x176>
 8002f02:	4604      	mov	r4, r0
 8002f04:	2301      	movs	r3, #1
 8002f06:	fb0c 2101 	mla	r1, ip, r1, r2
 8002f0a:	e7f0      	b.n	8002eee <_vfiprintf_r+0x1da>
 8002f0c:	ab03      	add	r3, sp, #12
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	462a      	mov	r2, r5
 8002f12:	4630      	mov	r0, r6
 8002f14:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <_vfiprintf_r+0x25c>)
 8002f16:	a904      	add	r1, sp, #16
 8002f18:	f3af 8000 	nop.w
 8002f1c:	4607      	mov	r7, r0
 8002f1e:	1c78      	adds	r0, r7, #1
 8002f20:	d1d6      	bne.n	8002ed0 <_vfiprintf_r+0x1bc>
 8002f22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002f24:	07d9      	lsls	r1, r3, #31
 8002f26:	d405      	bmi.n	8002f34 <_vfiprintf_r+0x220>
 8002f28:	89ab      	ldrh	r3, [r5, #12]
 8002f2a:	059a      	lsls	r2, r3, #22
 8002f2c:	d402      	bmi.n	8002f34 <_vfiprintf_r+0x220>
 8002f2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002f30:	f7ff fe33 	bl	8002b9a <__retarget_lock_release_recursive>
 8002f34:	89ab      	ldrh	r3, [r5, #12]
 8002f36:	065b      	lsls	r3, r3, #25
 8002f38:	f53f af12 	bmi.w	8002d60 <_vfiprintf_r+0x4c>
 8002f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f3e:	e711      	b.n	8002d64 <_vfiprintf_r+0x50>
 8002f40:	ab03      	add	r3, sp, #12
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	462a      	mov	r2, r5
 8002f46:	4630      	mov	r0, r6
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <_vfiprintf_r+0x25c>)
 8002f4a:	a904      	add	r1, sp, #16
 8002f4c:	f000 f882 	bl	8003054 <_printf_i>
 8002f50:	e7e4      	b.n	8002f1c <_vfiprintf_r+0x208>
 8002f52:	bf00      	nop
 8002f54:	08003918 	.word	0x08003918
 8002f58:	08003938 	.word	0x08003938
 8002f5c:	080038f8 	.word	0x080038f8
 8002f60:	08003958 	.word	0x08003958
 8002f64:	0800395e 	.word	0x0800395e
 8002f68:	08003962 	.word	0x08003962
 8002f6c:	00000000 	.word	0x00000000
 8002f70:	08002cef 	.word	0x08002cef

08002f74 <_printf_common>:
 8002f74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f78:	4616      	mov	r6, r2
 8002f7a:	4699      	mov	r9, r3
 8002f7c:	688a      	ldr	r2, [r1, #8]
 8002f7e:	690b      	ldr	r3, [r1, #16]
 8002f80:	4607      	mov	r7, r0
 8002f82:	4293      	cmp	r3, r2
 8002f84:	bfb8      	it	lt
 8002f86:	4613      	movlt	r3, r2
 8002f88:	6033      	str	r3, [r6, #0]
 8002f8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002f8e:	460c      	mov	r4, r1
 8002f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f94:	b10a      	cbz	r2, 8002f9a <_printf_common+0x26>
 8002f96:	3301      	adds	r3, #1
 8002f98:	6033      	str	r3, [r6, #0]
 8002f9a:	6823      	ldr	r3, [r4, #0]
 8002f9c:	0699      	lsls	r1, r3, #26
 8002f9e:	bf42      	ittt	mi
 8002fa0:	6833      	ldrmi	r3, [r6, #0]
 8002fa2:	3302      	addmi	r3, #2
 8002fa4:	6033      	strmi	r3, [r6, #0]
 8002fa6:	6825      	ldr	r5, [r4, #0]
 8002fa8:	f015 0506 	ands.w	r5, r5, #6
 8002fac:	d106      	bne.n	8002fbc <_printf_common+0x48>
 8002fae:	f104 0a19 	add.w	sl, r4, #25
 8002fb2:	68e3      	ldr	r3, [r4, #12]
 8002fb4:	6832      	ldr	r2, [r6, #0]
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	42ab      	cmp	r3, r5
 8002fba:	dc28      	bgt.n	800300e <_printf_common+0x9a>
 8002fbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002fc0:	1e13      	subs	r3, r2, #0
 8002fc2:	6822      	ldr	r2, [r4, #0]
 8002fc4:	bf18      	it	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	0692      	lsls	r2, r2, #26
 8002fca:	d42d      	bmi.n	8003028 <_printf_common+0xb4>
 8002fcc:	4649      	mov	r1, r9
 8002fce:	4638      	mov	r0, r7
 8002fd0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fd4:	47c0      	blx	r8
 8002fd6:	3001      	adds	r0, #1
 8002fd8:	d020      	beq.n	800301c <_printf_common+0xa8>
 8002fda:	6823      	ldr	r3, [r4, #0]
 8002fdc:	68e5      	ldr	r5, [r4, #12]
 8002fde:	f003 0306 	and.w	r3, r3, #6
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	bf18      	it	ne
 8002fe6:	2500      	movne	r5, #0
 8002fe8:	6832      	ldr	r2, [r6, #0]
 8002fea:	f04f 0600 	mov.w	r6, #0
 8002fee:	68a3      	ldr	r3, [r4, #8]
 8002ff0:	bf08      	it	eq
 8002ff2:	1aad      	subeq	r5, r5, r2
 8002ff4:	6922      	ldr	r2, [r4, #16]
 8002ff6:	bf08      	it	eq
 8002ff8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	bfc4      	itt	gt
 8003000:	1a9b      	subgt	r3, r3, r2
 8003002:	18ed      	addgt	r5, r5, r3
 8003004:	341a      	adds	r4, #26
 8003006:	42b5      	cmp	r5, r6
 8003008:	d11a      	bne.n	8003040 <_printf_common+0xcc>
 800300a:	2000      	movs	r0, #0
 800300c:	e008      	b.n	8003020 <_printf_common+0xac>
 800300e:	2301      	movs	r3, #1
 8003010:	4652      	mov	r2, sl
 8003012:	4649      	mov	r1, r9
 8003014:	4638      	mov	r0, r7
 8003016:	47c0      	blx	r8
 8003018:	3001      	adds	r0, #1
 800301a:	d103      	bne.n	8003024 <_printf_common+0xb0>
 800301c:	f04f 30ff 	mov.w	r0, #4294967295
 8003020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003024:	3501      	adds	r5, #1
 8003026:	e7c4      	b.n	8002fb2 <_printf_common+0x3e>
 8003028:	2030      	movs	r0, #48	; 0x30
 800302a:	18e1      	adds	r1, r4, r3
 800302c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003036:	4422      	add	r2, r4
 8003038:	3302      	adds	r3, #2
 800303a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800303e:	e7c5      	b.n	8002fcc <_printf_common+0x58>
 8003040:	2301      	movs	r3, #1
 8003042:	4622      	mov	r2, r4
 8003044:	4649      	mov	r1, r9
 8003046:	4638      	mov	r0, r7
 8003048:	47c0      	blx	r8
 800304a:	3001      	adds	r0, #1
 800304c:	d0e6      	beq.n	800301c <_printf_common+0xa8>
 800304e:	3601      	adds	r6, #1
 8003050:	e7d9      	b.n	8003006 <_printf_common+0x92>
	...

08003054 <_printf_i>:
 8003054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003058:	7e0f      	ldrb	r7, [r1, #24]
 800305a:	4691      	mov	r9, r2
 800305c:	2f78      	cmp	r7, #120	; 0x78
 800305e:	4680      	mov	r8, r0
 8003060:	460c      	mov	r4, r1
 8003062:	469a      	mov	sl, r3
 8003064:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003066:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800306a:	d807      	bhi.n	800307c <_printf_i+0x28>
 800306c:	2f62      	cmp	r7, #98	; 0x62
 800306e:	d80a      	bhi.n	8003086 <_printf_i+0x32>
 8003070:	2f00      	cmp	r7, #0
 8003072:	f000 80d9 	beq.w	8003228 <_printf_i+0x1d4>
 8003076:	2f58      	cmp	r7, #88	; 0x58
 8003078:	f000 80a4 	beq.w	80031c4 <_printf_i+0x170>
 800307c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003080:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003084:	e03a      	b.n	80030fc <_printf_i+0xa8>
 8003086:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800308a:	2b15      	cmp	r3, #21
 800308c:	d8f6      	bhi.n	800307c <_printf_i+0x28>
 800308e:	a101      	add	r1, pc, #4	; (adr r1, 8003094 <_printf_i+0x40>)
 8003090:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003094:	080030ed 	.word	0x080030ed
 8003098:	08003101 	.word	0x08003101
 800309c:	0800307d 	.word	0x0800307d
 80030a0:	0800307d 	.word	0x0800307d
 80030a4:	0800307d 	.word	0x0800307d
 80030a8:	0800307d 	.word	0x0800307d
 80030ac:	08003101 	.word	0x08003101
 80030b0:	0800307d 	.word	0x0800307d
 80030b4:	0800307d 	.word	0x0800307d
 80030b8:	0800307d 	.word	0x0800307d
 80030bc:	0800307d 	.word	0x0800307d
 80030c0:	0800320f 	.word	0x0800320f
 80030c4:	08003131 	.word	0x08003131
 80030c8:	080031f1 	.word	0x080031f1
 80030cc:	0800307d 	.word	0x0800307d
 80030d0:	0800307d 	.word	0x0800307d
 80030d4:	08003231 	.word	0x08003231
 80030d8:	0800307d 	.word	0x0800307d
 80030dc:	08003131 	.word	0x08003131
 80030e0:	0800307d 	.word	0x0800307d
 80030e4:	0800307d 	.word	0x0800307d
 80030e8:	080031f9 	.word	0x080031f9
 80030ec:	682b      	ldr	r3, [r5, #0]
 80030ee:	1d1a      	adds	r2, r3, #4
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	602a      	str	r2, [r5, #0]
 80030f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0a4      	b.n	800324a <_printf_i+0x1f6>
 8003100:	6820      	ldr	r0, [r4, #0]
 8003102:	6829      	ldr	r1, [r5, #0]
 8003104:	0606      	lsls	r6, r0, #24
 8003106:	f101 0304 	add.w	r3, r1, #4
 800310a:	d50a      	bpl.n	8003122 <_printf_i+0xce>
 800310c:	680e      	ldr	r6, [r1, #0]
 800310e:	602b      	str	r3, [r5, #0]
 8003110:	2e00      	cmp	r6, #0
 8003112:	da03      	bge.n	800311c <_printf_i+0xc8>
 8003114:	232d      	movs	r3, #45	; 0x2d
 8003116:	4276      	negs	r6, r6
 8003118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800311c:	230a      	movs	r3, #10
 800311e:	485e      	ldr	r0, [pc, #376]	; (8003298 <_printf_i+0x244>)
 8003120:	e019      	b.n	8003156 <_printf_i+0x102>
 8003122:	680e      	ldr	r6, [r1, #0]
 8003124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003128:	602b      	str	r3, [r5, #0]
 800312a:	bf18      	it	ne
 800312c:	b236      	sxthne	r6, r6
 800312e:	e7ef      	b.n	8003110 <_printf_i+0xbc>
 8003130:	682b      	ldr	r3, [r5, #0]
 8003132:	6820      	ldr	r0, [r4, #0]
 8003134:	1d19      	adds	r1, r3, #4
 8003136:	6029      	str	r1, [r5, #0]
 8003138:	0601      	lsls	r1, r0, #24
 800313a:	d501      	bpl.n	8003140 <_printf_i+0xec>
 800313c:	681e      	ldr	r6, [r3, #0]
 800313e:	e002      	b.n	8003146 <_printf_i+0xf2>
 8003140:	0646      	lsls	r6, r0, #25
 8003142:	d5fb      	bpl.n	800313c <_printf_i+0xe8>
 8003144:	881e      	ldrh	r6, [r3, #0]
 8003146:	2f6f      	cmp	r7, #111	; 0x6f
 8003148:	bf0c      	ite	eq
 800314a:	2308      	moveq	r3, #8
 800314c:	230a      	movne	r3, #10
 800314e:	4852      	ldr	r0, [pc, #328]	; (8003298 <_printf_i+0x244>)
 8003150:	2100      	movs	r1, #0
 8003152:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003156:	6865      	ldr	r5, [r4, #4]
 8003158:	2d00      	cmp	r5, #0
 800315a:	bfa8      	it	ge
 800315c:	6821      	ldrge	r1, [r4, #0]
 800315e:	60a5      	str	r5, [r4, #8]
 8003160:	bfa4      	itt	ge
 8003162:	f021 0104 	bicge.w	r1, r1, #4
 8003166:	6021      	strge	r1, [r4, #0]
 8003168:	b90e      	cbnz	r6, 800316e <_printf_i+0x11a>
 800316a:	2d00      	cmp	r5, #0
 800316c:	d04d      	beq.n	800320a <_printf_i+0x1b6>
 800316e:	4615      	mov	r5, r2
 8003170:	fbb6 f1f3 	udiv	r1, r6, r3
 8003174:	fb03 6711 	mls	r7, r3, r1, r6
 8003178:	5dc7      	ldrb	r7, [r0, r7]
 800317a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800317e:	4637      	mov	r7, r6
 8003180:	42bb      	cmp	r3, r7
 8003182:	460e      	mov	r6, r1
 8003184:	d9f4      	bls.n	8003170 <_printf_i+0x11c>
 8003186:	2b08      	cmp	r3, #8
 8003188:	d10b      	bne.n	80031a2 <_printf_i+0x14e>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	07de      	lsls	r6, r3, #31
 800318e:	d508      	bpl.n	80031a2 <_printf_i+0x14e>
 8003190:	6923      	ldr	r3, [r4, #16]
 8003192:	6861      	ldr	r1, [r4, #4]
 8003194:	4299      	cmp	r1, r3
 8003196:	bfde      	ittt	le
 8003198:	2330      	movle	r3, #48	; 0x30
 800319a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800319e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80031a2:	1b52      	subs	r2, r2, r5
 80031a4:	6122      	str	r2, [r4, #16]
 80031a6:	464b      	mov	r3, r9
 80031a8:	4621      	mov	r1, r4
 80031aa:	4640      	mov	r0, r8
 80031ac:	f8cd a000 	str.w	sl, [sp]
 80031b0:	aa03      	add	r2, sp, #12
 80031b2:	f7ff fedf 	bl	8002f74 <_printf_common>
 80031b6:	3001      	adds	r0, #1
 80031b8:	d14c      	bne.n	8003254 <_printf_i+0x200>
 80031ba:	f04f 30ff 	mov.w	r0, #4294967295
 80031be:	b004      	add	sp, #16
 80031c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c4:	4834      	ldr	r0, [pc, #208]	; (8003298 <_printf_i+0x244>)
 80031c6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80031ca:	6829      	ldr	r1, [r5, #0]
 80031cc:	6823      	ldr	r3, [r4, #0]
 80031ce:	f851 6b04 	ldr.w	r6, [r1], #4
 80031d2:	6029      	str	r1, [r5, #0]
 80031d4:	061d      	lsls	r5, r3, #24
 80031d6:	d514      	bpl.n	8003202 <_printf_i+0x1ae>
 80031d8:	07df      	lsls	r7, r3, #31
 80031da:	bf44      	itt	mi
 80031dc:	f043 0320 	orrmi.w	r3, r3, #32
 80031e0:	6023      	strmi	r3, [r4, #0]
 80031e2:	b91e      	cbnz	r6, 80031ec <_printf_i+0x198>
 80031e4:	6823      	ldr	r3, [r4, #0]
 80031e6:	f023 0320 	bic.w	r3, r3, #32
 80031ea:	6023      	str	r3, [r4, #0]
 80031ec:	2310      	movs	r3, #16
 80031ee:	e7af      	b.n	8003150 <_printf_i+0xfc>
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	2378      	movs	r3, #120	; 0x78
 80031fa:	4828      	ldr	r0, [pc, #160]	; (800329c <_printf_i+0x248>)
 80031fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003200:	e7e3      	b.n	80031ca <_printf_i+0x176>
 8003202:	0659      	lsls	r1, r3, #25
 8003204:	bf48      	it	mi
 8003206:	b2b6      	uxthmi	r6, r6
 8003208:	e7e6      	b.n	80031d8 <_printf_i+0x184>
 800320a:	4615      	mov	r5, r2
 800320c:	e7bb      	b.n	8003186 <_printf_i+0x132>
 800320e:	682b      	ldr	r3, [r5, #0]
 8003210:	6826      	ldr	r6, [r4, #0]
 8003212:	1d18      	adds	r0, r3, #4
 8003214:	6961      	ldr	r1, [r4, #20]
 8003216:	6028      	str	r0, [r5, #0]
 8003218:	0635      	lsls	r5, r6, #24
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	d501      	bpl.n	8003222 <_printf_i+0x1ce>
 800321e:	6019      	str	r1, [r3, #0]
 8003220:	e002      	b.n	8003228 <_printf_i+0x1d4>
 8003222:	0670      	lsls	r0, r6, #25
 8003224:	d5fb      	bpl.n	800321e <_printf_i+0x1ca>
 8003226:	8019      	strh	r1, [r3, #0]
 8003228:	2300      	movs	r3, #0
 800322a:	4615      	mov	r5, r2
 800322c:	6123      	str	r3, [r4, #16]
 800322e:	e7ba      	b.n	80031a6 <_printf_i+0x152>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	1d1a      	adds	r2, r3, #4
 8003236:	602a      	str	r2, [r5, #0]
 8003238:	681d      	ldr	r5, [r3, #0]
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	4628      	mov	r0, r5
 800323e:	f000 fa9b 	bl	8003778 <memchr>
 8003242:	b108      	cbz	r0, 8003248 <_printf_i+0x1f4>
 8003244:	1b40      	subs	r0, r0, r5
 8003246:	6060      	str	r0, [r4, #4]
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	6123      	str	r3, [r4, #16]
 800324c:	2300      	movs	r3, #0
 800324e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003252:	e7a8      	b.n	80031a6 <_printf_i+0x152>
 8003254:	462a      	mov	r2, r5
 8003256:	4649      	mov	r1, r9
 8003258:	4640      	mov	r0, r8
 800325a:	6923      	ldr	r3, [r4, #16]
 800325c:	47d0      	blx	sl
 800325e:	3001      	adds	r0, #1
 8003260:	d0ab      	beq.n	80031ba <_printf_i+0x166>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	079b      	lsls	r3, r3, #30
 8003266:	d413      	bmi.n	8003290 <_printf_i+0x23c>
 8003268:	68e0      	ldr	r0, [r4, #12]
 800326a:	9b03      	ldr	r3, [sp, #12]
 800326c:	4298      	cmp	r0, r3
 800326e:	bfb8      	it	lt
 8003270:	4618      	movlt	r0, r3
 8003272:	e7a4      	b.n	80031be <_printf_i+0x16a>
 8003274:	2301      	movs	r3, #1
 8003276:	4632      	mov	r2, r6
 8003278:	4649      	mov	r1, r9
 800327a:	4640      	mov	r0, r8
 800327c:	47d0      	blx	sl
 800327e:	3001      	adds	r0, #1
 8003280:	d09b      	beq.n	80031ba <_printf_i+0x166>
 8003282:	3501      	adds	r5, #1
 8003284:	68e3      	ldr	r3, [r4, #12]
 8003286:	9903      	ldr	r1, [sp, #12]
 8003288:	1a5b      	subs	r3, r3, r1
 800328a:	42ab      	cmp	r3, r5
 800328c:	dcf2      	bgt.n	8003274 <_printf_i+0x220>
 800328e:	e7eb      	b.n	8003268 <_printf_i+0x214>
 8003290:	2500      	movs	r5, #0
 8003292:	f104 0619 	add.w	r6, r4, #25
 8003296:	e7f5      	b.n	8003284 <_printf_i+0x230>
 8003298:	08003969 	.word	0x08003969
 800329c:	0800397a 	.word	0x0800397a

080032a0 <_sbrk_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	2300      	movs	r3, #0
 80032a4:	4d05      	ldr	r5, [pc, #20]	; (80032bc <_sbrk_r+0x1c>)
 80032a6:	4604      	mov	r4, r0
 80032a8:	4608      	mov	r0, r1
 80032aa:	602b      	str	r3, [r5, #0]
 80032ac:	f7fd fb12 	bl	80008d4 <_sbrk>
 80032b0:	1c43      	adds	r3, r0, #1
 80032b2:	d102      	bne.n	80032ba <_sbrk_r+0x1a>
 80032b4:	682b      	ldr	r3, [r5, #0]
 80032b6:	b103      	cbz	r3, 80032ba <_sbrk_r+0x1a>
 80032b8:	6023      	str	r3, [r4, #0]
 80032ba:	bd38      	pop	{r3, r4, r5, pc}
 80032bc:	20000180 	.word	0x20000180

080032c0 <__sread>:
 80032c0:	b510      	push	{r4, lr}
 80032c2:	460c      	mov	r4, r1
 80032c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c8:	f000 fab8 	bl	800383c <_read_r>
 80032cc:	2800      	cmp	r0, #0
 80032ce:	bfab      	itete	ge
 80032d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032d2:	89a3      	ldrhlt	r3, [r4, #12]
 80032d4:	181b      	addge	r3, r3, r0
 80032d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032da:	bfac      	ite	ge
 80032dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80032de:	81a3      	strhlt	r3, [r4, #12]
 80032e0:	bd10      	pop	{r4, pc}

080032e2 <__swrite>:
 80032e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e6:	461f      	mov	r7, r3
 80032e8:	898b      	ldrh	r3, [r1, #12]
 80032ea:	4605      	mov	r5, r0
 80032ec:	05db      	lsls	r3, r3, #23
 80032ee:	460c      	mov	r4, r1
 80032f0:	4616      	mov	r6, r2
 80032f2:	d505      	bpl.n	8003300 <__swrite+0x1e>
 80032f4:	2302      	movs	r3, #2
 80032f6:	2200      	movs	r2, #0
 80032f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032fc:	f000 f9c4 	bl	8003688 <_lseek_r>
 8003300:	89a3      	ldrh	r3, [r4, #12]
 8003302:	4632      	mov	r2, r6
 8003304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003308:	81a3      	strh	r3, [r4, #12]
 800330a:	4628      	mov	r0, r5
 800330c:	463b      	mov	r3, r7
 800330e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003316:	f000 b869 	b.w	80033ec <_write_r>

0800331a <__sseek>:
 800331a:	b510      	push	{r4, lr}
 800331c:	460c      	mov	r4, r1
 800331e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003322:	f000 f9b1 	bl	8003688 <_lseek_r>
 8003326:	1c43      	adds	r3, r0, #1
 8003328:	89a3      	ldrh	r3, [r4, #12]
 800332a:	bf15      	itete	ne
 800332c:	6560      	strne	r0, [r4, #84]	; 0x54
 800332e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003336:	81a3      	strheq	r3, [r4, #12]
 8003338:	bf18      	it	ne
 800333a:	81a3      	strhne	r3, [r4, #12]
 800333c:	bd10      	pop	{r4, pc}

0800333e <__sclose>:
 800333e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003342:	f000 b8d3 	b.w	80034ec <_close_r>
	...

08003348 <__swbuf_r>:
 8003348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800334a:	460e      	mov	r6, r1
 800334c:	4614      	mov	r4, r2
 800334e:	4605      	mov	r5, r0
 8003350:	b118      	cbz	r0, 800335a <__swbuf_r+0x12>
 8003352:	6983      	ldr	r3, [r0, #24]
 8003354:	b90b      	cbnz	r3, 800335a <__swbuf_r+0x12>
 8003356:	f7ff fb81 	bl	8002a5c <__sinit>
 800335a:	4b21      	ldr	r3, [pc, #132]	; (80033e0 <__swbuf_r+0x98>)
 800335c:	429c      	cmp	r4, r3
 800335e:	d12b      	bne.n	80033b8 <__swbuf_r+0x70>
 8003360:	686c      	ldr	r4, [r5, #4]
 8003362:	69a3      	ldr	r3, [r4, #24]
 8003364:	60a3      	str	r3, [r4, #8]
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	071a      	lsls	r2, r3, #28
 800336a:	d52f      	bpl.n	80033cc <__swbuf_r+0x84>
 800336c:	6923      	ldr	r3, [r4, #16]
 800336e:	b36b      	cbz	r3, 80033cc <__swbuf_r+0x84>
 8003370:	6923      	ldr	r3, [r4, #16]
 8003372:	6820      	ldr	r0, [r4, #0]
 8003374:	b2f6      	uxtb	r6, r6
 8003376:	1ac0      	subs	r0, r0, r3
 8003378:	6963      	ldr	r3, [r4, #20]
 800337a:	4637      	mov	r7, r6
 800337c:	4283      	cmp	r3, r0
 800337e:	dc04      	bgt.n	800338a <__swbuf_r+0x42>
 8003380:	4621      	mov	r1, r4
 8003382:	4628      	mov	r0, r5
 8003384:	f000 f944 	bl	8003610 <_fflush_r>
 8003388:	bb30      	cbnz	r0, 80033d8 <__swbuf_r+0x90>
 800338a:	68a3      	ldr	r3, [r4, #8]
 800338c:	3001      	adds	r0, #1
 800338e:	3b01      	subs	r3, #1
 8003390:	60a3      	str	r3, [r4, #8]
 8003392:	6823      	ldr	r3, [r4, #0]
 8003394:	1c5a      	adds	r2, r3, #1
 8003396:	6022      	str	r2, [r4, #0]
 8003398:	701e      	strb	r6, [r3, #0]
 800339a:	6963      	ldr	r3, [r4, #20]
 800339c:	4283      	cmp	r3, r0
 800339e:	d004      	beq.n	80033aa <__swbuf_r+0x62>
 80033a0:	89a3      	ldrh	r3, [r4, #12]
 80033a2:	07db      	lsls	r3, r3, #31
 80033a4:	d506      	bpl.n	80033b4 <__swbuf_r+0x6c>
 80033a6:	2e0a      	cmp	r6, #10
 80033a8:	d104      	bne.n	80033b4 <__swbuf_r+0x6c>
 80033aa:	4621      	mov	r1, r4
 80033ac:	4628      	mov	r0, r5
 80033ae:	f000 f92f 	bl	8003610 <_fflush_r>
 80033b2:	b988      	cbnz	r0, 80033d8 <__swbuf_r+0x90>
 80033b4:	4638      	mov	r0, r7
 80033b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033b8:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <__swbuf_r+0x9c>)
 80033ba:	429c      	cmp	r4, r3
 80033bc:	d101      	bne.n	80033c2 <__swbuf_r+0x7a>
 80033be:	68ac      	ldr	r4, [r5, #8]
 80033c0:	e7cf      	b.n	8003362 <__swbuf_r+0x1a>
 80033c2:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <__swbuf_r+0xa0>)
 80033c4:	429c      	cmp	r4, r3
 80033c6:	bf08      	it	eq
 80033c8:	68ec      	ldreq	r4, [r5, #12]
 80033ca:	e7ca      	b.n	8003362 <__swbuf_r+0x1a>
 80033cc:	4621      	mov	r1, r4
 80033ce:	4628      	mov	r0, r5
 80033d0:	f000 f81e 	bl	8003410 <__swsetup_r>
 80033d4:	2800      	cmp	r0, #0
 80033d6:	d0cb      	beq.n	8003370 <__swbuf_r+0x28>
 80033d8:	f04f 37ff 	mov.w	r7, #4294967295
 80033dc:	e7ea      	b.n	80033b4 <__swbuf_r+0x6c>
 80033de:	bf00      	nop
 80033e0:	08003918 	.word	0x08003918
 80033e4:	08003938 	.word	0x08003938
 80033e8:	080038f8 	.word	0x080038f8

080033ec <_write_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	4604      	mov	r4, r0
 80033f0:	4608      	mov	r0, r1
 80033f2:	4611      	mov	r1, r2
 80033f4:	2200      	movs	r2, #0
 80033f6:	4d05      	ldr	r5, [pc, #20]	; (800340c <_write_r+0x20>)
 80033f8:	602a      	str	r2, [r5, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f7fd fa1d 	bl	800083a <_write>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_write_r+0x1e>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_write_r+0x1e>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000180 	.word	0x20000180

08003410 <__swsetup_r>:
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <__swsetup_r+0xcc>)
 8003412:	b570      	push	{r4, r5, r6, lr}
 8003414:	681d      	ldr	r5, [r3, #0]
 8003416:	4606      	mov	r6, r0
 8003418:	460c      	mov	r4, r1
 800341a:	b125      	cbz	r5, 8003426 <__swsetup_r+0x16>
 800341c:	69ab      	ldr	r3, [r5, #24]
 800341e:	b913      	cbnz	r3, 8003426 <__swsetup_r+0x16>
 8003420:	4628      	mov	r0, r5
 8003422:	f7ff fb1b 	bl	8002a5c <__sinit>
 8003426:	4b2e      	ldr	r3, [pc, #184]	; (80034e0 <__swsetup_r+0xd0>)
 8003428:	429c      	cmp	r4, r3
 800342a:	d10f      	bne.n	800344c <__swsetup_r+0x3c>
 800342c:	686c      	ldr	r4, [r5, #4]
 800342e:	89a3      	ldrh	r3, [r4, #12]
 8003430:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003434:	0719      	lsls	r1, r3, #28
 8003436:	d42c      	bmi.n	8003492 <__swsetup_r+0x82>
 8003438:	06dd      	lsls	r5, r3, #27
 800343a:	d411      	bmi.n	8003460 <__swsetup_r+0x50>
 800343c:	2309      	movs	r3, #9
 800343e:	6033      	str	r3, [r6, #0]
 8003440:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003444:	f04f 30ff 	mov.w	r0, #4294967295
 8003448:	81a3      	strh	r3, [r4, #12]
 800344a:	e03e      	b.n	80034ca <__swsetup_r+0xba>
 800344c:	4b25      	ldr	r3, [pc, #148]	; (80034e4 <__swsetup_r+0xd4>)
 800344e:	429c      	cmp	r4, r3
 8003450:	d101      	bne.n	8003456 <__swsetup_r+0x46>
 8003452:	68ac      	ldr	r4, [r5, #8]
 8003454:	e7eb      	b.n	800342e <__swsetup_r+0x1e>
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <__swsetup_r+0xd8>)
 8003458:	429c      	cmp	r4, r3
 800345a:	bf08      	it	eq
 800345c:	68ec      	ldreq	r4, [r5, #12]
 800345e:	e7e6      	b.n	800342e <__swsetup_r+0x1e>
 8003460:	0758      	lsls	r0, r3, #29
 8003462:	d512      	bpl.n	800348a <__swsetup_r+0x7a>
 8003464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003466:	b141      	cbz	r1, 800347a <__swsetup_r+0x6a>
 8003468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800346c:	4299      	cmp	r1, r3
 800346e:	d002      	beq.n	8003476 <__swsetup_r+0x66>
 8003470:	4630      	mov	r0, r6
 8003472:	f000 f99b 	bl	80037ac <_free_r>
 8003476:	2300      	movs	r3, #0
 8003478:	6363      	str	r3, [r4, #52]	; 0x34
 800347a:	89a3      	ldrh	r3, [r4, #12]
 800347c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003480:	81a3      	strh	r3, [r4, #12]
 8003482:	2300      	movs	r3, #0
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6923      	ldr	r3, [r4, #16]
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	89a3      	ldrh	r3, [r4, #12]
 800348c:	f043 0308 	orr.w	r3, r3, #8
 8003490:	81a3      	strh	r3, [r4, #12]
 8003492:	6923      	ldr	r3, [r4, #16]
 8003494:	b94b      	cbnz	r3, 80034aa <__swsetup_r+0x9a>
 8003496:	89a3      	ldrh	r3, [r4, #12]
 8003498:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800349c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034a0:	d003      	beq.n	80034aa <__swsetup_r+0x9a>
 80034a2:	4621      	mov	r1, r4
 80034a4:	4630      	mov	r0, r6
 80034a6:	f000 f927 	bl	80036f8 <__smakebuf_r>
 80034aa:	89a0      	ldrh	r0, [r4, #12]
 80034ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80034b0:	f010 0301 	ands.w	r3, r0, #1
 80034b4:	d00a      	beq.n	80034cc <__swsetup_r+0xbc>
 80034b6:	2300      	movs	r3, #0
 80034b8:	60a3      	str	r3, [r4, #8]
 80034ba:	6963      	ldr	r3, [r4, #20]
 80034bc:	425b      	negs	r3, r3
 80034be:	61a3      	str	r3, [r4, #24]
 80034c0:	6923      	ldr	r3, [r4, #16]
 80034c2:	b943      	cbnz	r3, 80034d6 <__swsetup_r+0xc6>
 80034c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80034c8:	d1ba      	bne.n	8003440 <__swsetup_r+0x30>
 80034ca:	bd70      	pop	{r4, r5, r6, pc}
 80034cc:	0781      	lsls	r1, r0, #30
 80034ce:	bf58      	it	pl
 80034d0:	6963      	ldrpl	r3, [r4, #20]
 80034d2:	60a3      	str	r3, [r4, #8]
 80034d4:	e7f4      	b.n	80034c0 <__swsetup_r+0xb0>
 80034d6:	2000      	movs	r0, #0
 80034d8:	e7f7      	b.n	80034ca <__swsetup_r+0xba>
 80034da:	bf00      	nop
 80034dc:	2000000c 	.word	0x2000000c
 80034e0:	08003918 	.word	0x08003918
 80034e4:	08003938 	.word	0x08003938
 80034e8:	080038f8 	.word	0x080038f8

080034ec <_close_r>:
 80034ec:	b538      	push	{r3, r4, r5, lr}
 80034ee:	2300      	movs	r3, #0
 80034f0:	4d05      	ldr	r5, [pc, #20]	; (8003508 <_close_r+0x1c>)
 80034f2:	4604      	mov	r4, r0
 80034f4:	4608      	mov	r0, r1
 80034f6:	602b      	str	r3, [r5, #0]
 80034f8:	f7fd f9bb 	bl	8000872 <_close>
 80034fc:	1c43      	adds	r3, r0, #1
 80034fe:	d102      	bne.n	8003506 <_close_r+0x1a>
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	b103      	cbz	r3, 8003506 <_close_r+0x1a>
 8003504:	6023      	str	r3, [r4, #0]
 8003506:	bd38      	pop	{r3, r4, r5, pc}
 8003508:	20000180 	.word	0x20000180

0800350c <__sflush_r>:
 800350c:	898a      	ldrh	r2, [r1, #12]
 800350e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003510:	4605      	mov	r5, r0
 8003512:	0710      	lsls	r0, r2, #28
 8003514:	460c      	mov	r4, r1
 8003516:	d457      	bmi.n	80035c8 <__sflush_r+0xbc>
 8003518:	684b      	ldr	r3, [r1, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	dc04      	bgt.n	8003528 <__sflush_r+0x1c>
 800351e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003520:	2b00      	cmp	r3, #0
 8003522:	dc01      	bgt.n	8003528 <__sflush_r+0x1c>
 8003524:	2000      	movs	r0, #0
 8003526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800352a:	2e00      	cmp	r6, #0
 800352c:	d0fa      	beq.n	8003524 <__sflush_r+0x18>
 800352e:	2300      	movs	r3, #0
 8003530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003534:	682f      	ldr	r7, [r5, #0]
 8003536:	602b      	str	r3, [r5, #0]
 8003538:	d032      	beq.n	80035a0 <__sflush_r+0x94>
 800353a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800353c:	89a3      	ldrh	r3, [r4, #12]
 800353e:	075a      	lsls	r2, r3, #29
 8003540:	d505      	bpl.n	800354e <__sflush_r+0x42>
 8003542:	6863      	ldr	r3, [r4, #4]
 8003544:	1ac0      	subs	r0, r0, r3
 8003546:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003548:	b10b      	cbz	r3, 800354e <__sflush_r+0x42>
 800354a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800354c:	1ac0      	subs	r0, r0, r3
 800354e:	2300      	movs	r3, #0
 8003550:	4602      	mov	r2, r0
 8003552:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003554:	4628      	mov	r0, r5
 8003556:	6a21      	ldr	r1, [r4, #32]
 8003558:	47b0      	blx	r6
 800355a:	1c43      	adds	r3, r0, #1
 800355c:	89a3      	ldrh	r3, [r4, #12]
 800355e:	d106      	bne.n	800356e <__sflush_r+0x62>
 8003560:	6829      	ldr	r1, [r5, #0]
 8003562:	291d      	cmp	r1, #29
 8003564:	d82c      	bhi.n	80035c0 <__sflush_r+0xb4>
 8003566:	4a29      	ldr	r2, [pc, #164]	; (800360c <__sflush_r+0x100>)
 8003568:	40ca      	lsrs	r2, r1
 800356a:	07d6      	lsls	r6, r2, #31
 800356c:	d528      	bpl.n	80035c0 <__sflush_r+0xb4>
 800356e:	2200      	movs	r2, #0
 8003570:	6062      	str	r2, [r4, #4]
 8003572:	6922      	ldr	r2, [r4, #16]
 8003574:	04d9      	lsls	r1, r3, #19
 8003576:	6022      	str	r2, [r4, #0]
 8003578:	d504      	bpl.n	8003584 <__sflush_r+0x78>
 800357a:	1c42      	adds	r2, r0, #1
 800357c:	d101      	bne.n	8003582 <__sflush_r+0x76>
 800357e:	682b      	ldr	r3, [r5, #0]
 8003580:	b903      	cbnz	r3, 8003584 <__sflush_r+0x78>
 8003582:	6560      	str	r0, [r4, #84]	; 0x54
 8003584:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003586:	602f      	str	r7, [r5, #0]
 8003588:	2900      	cmp	r1, #0
 800358a:	d0cb      	beq.n	8003524 <__sflush_r+0x18>
 800358c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003590:	4299      	cmp	r1, r3
 8003592:	d002      	beq.n	800359a <__sflush_r+0x8e>
 8003594:	4628      	mov	r0, r5
 8003596:	f000 f909 	bl	80037ac <_free_r>
 800359a:	2000      	movs	r0, #0
 800359c:	6360      	str	r0, [r4, #52]	; 0x34
 800359e:	e7c2      	b.n	8003526 <__sflush_r+0x1a>
 80035a0:	6a21      	ldr	r1, [r4, #32]
 80035a2:	2301      	movs	r3, #1
 80035a4:	4628      	mov	r0, r5
 80035a6:	47b0      	blx	r6
 80035a8:	1c41      	adds	r1, r0, #1
 80035aa:	d1c7      	bne.n	800353c <__sflush_r+0x30>
 80035ac:	682b      	ldr	r3, [r5, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0c4      	beq.n	800353c <__sflush_r+0x30>
 80035b2:	2b1d      	cmp	r3, #29
 80035b4:	d001      	beq.n	80035ba <__sflush_r+0xae>
 80035b6:	2b16      	cmp	r3, #22
 80035b8:	d101      	bne.n	80035be <__sflush_r+0xb2>
 80035ba:	602f      	str	r7, [r5, #0]
 80035bc:	e7b2      	b.n	8003524 <__sflush_r+0x18>
 80035be:	89a3      	ldrh	r3, [r4, #12]
 80035c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035c4:	81a3      	strh	r3, [r4, #12]
 80035c6:	e7ae      	b.n	8003526 <__sflush_r+0x1a>
 80035c8:	690f      	ldr	r7, [r1, #16]
 80035ca:	2f00      	cmp	r7, #0
 80035cc:	d0aa      	beq.n	8003524 <__sflush_r+0x18>
 80035ce:	0793      	lsls	r3, r2, #30
 80035d0:	bf18      	it	ne
 80035d2:	2300      	movne	r3, #0
 80035d4:	680e      	ldr	r6, [r1, #0]
 80035d6:	bf08      	it	eq
 80035d8:	694b      	ldreq	r3, [r1, #20]
 80035da:	1bf6      	subs	r6, r6, r7
 80035dc:	600f      	str	r7, [r1, #0]
 80035de:	608b      	str	r3, [r1, #8]
 80035e0:	2e00      	cmp	r6, #0
 80035e2:	dd9f      	ble.n	8003524 <__sflush_r+0x18>
 80035e4:	4633      	mov	r3, r6
 80035e6:	463a      	mov	r2, r7
 80035e8:	4628      	mov	r0, r5
 80035ea:	6a21      	ldr	r1, [r4, #32]
 80035ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80035f0:	47e0      	blx	ip
 80035f2:	2800      	cmp	r0, #0
 80035f4:	dc06      	bgt.n	8003604 <__sflush_r+0xf8>
 80035f6:	89a3      	ldrh	r3, [r4, #12]
 80035f8:	f04f 30ff 	mov.w	r0, #4294967295
 80035fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003600:	81a3      	strh	r3, [r4, #12]
 8003602:	e790      	b.n	8003526 <__sflush_r+0x1a>
 8003604:	4407      	add	r7, r0
 8003606:	1a36      	subs	r6, r6, r0
 8003608:	e7ea      	b.n	80035e0 <__sflush_r+0xd4>
 800360a:	bf00      	nop
 800360c:	20400001 	.word	0x20400001

08003610 <_fflush_r>:
 8003610:	b538      	push	{r3, r4, r5, lr}
 8003612:	690b      	ldr	r3, [r1, #16]
 8003614:	4605      	mov	r5, r0
 8003616:	460c      	mov	r4, r1
 8003618:	b913      	cbnz	r3, 8003620 <_fflush_r+0x10>
 800361a:	2500      	movs	r5, #0
 800361c:	4628      	mov	r0, r5
 800361e:	bd38      	pop	{r3, r4, r5, pc}
 8003620:	b118      	cbz	r0, 800362a <_fflush_r+0x1a>
 8003622:	6983      	ldr	r3, [r0, #24]
 8003624:	b90b      	cbnz	r3, 800362a <_fflush_r+0x1a>
 8003626:	f7ff fa19 	bl	8002a5c <__sinit>
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <_fflush_r+0x6c>)
 800362c:	429c      	cmp	r4, r3
 800362e:	d11b      	bne.n	8003668 <_fflush_r+0x58>
 8003630:	686c      	ldr	r4, [r5, #4]
 8003632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0ef      	beq.n	800361a <_fflush_r+0xa>
 800363a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800363c:	07d0      	lsls	r0, r2, #31
 800363e:	d404      	bmi.n	800364a <_fflush_r+0x3a>
 8003640:	0599      	lsls	r1, r3, #22
 8003642:	d402      	bmi.n	800364a <_fflush_r+0x3a>
 8003644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003646:	f7ff faa7 	bl	8002b98 <__retarget_lock_acquire_recursive>
 800364a:	4628      	mov	r0, r5
 800364c:	4621      	mov	r1, r4
 800364e:	f7ff ff5d 	bl	800350c <__sflush_r>
 8003652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003654:	4605      	mov	r5, r0
 8003656:	07da      	lsls	r2, r3, #31
 8003658:	d4e0      	bmi.n	800361c <_fflush_r+0xc>
 800365a:	89a3      	ldrh	r3, [r4, #12]
 800365c:	059b      	lsls	r3, r3, #22
 800365e:	d4dd      	bmi.n	800361c <_fflush_r+0xc>
 8003660:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003662:	f7ff fa9a 	bl	8002b9a <__retarget_lock_release_recursive>
 8003666:	e7d9      	b.n	800361c <_fflush_r+0xc>
 8003668:	4b05      	ldr	r3, [pc, #20]	; (8003680 <_fflush_r+0x70>)
 800366a:	429c      	cmp	r4, r3
 800366c:	d101      	bne.n	8003672 <_fflush_r+0x62>
 800366e:	68ac      	ldr	r4, [r5, #8]
 8003670:	e7df      	b.n	8003632 <_fflush_r+0x22>
 8003672:	4b04      	ldr	r3, [pc, #16]	; (8003684 <_fflush_r+0x74>)
 8003674:	429c      	cmp	r4, r3
 8003676:	bf08      	it	eq
 8003678:	68ec      	ldreq	r4, [r5, #12]
 800367a:	e7da      	b.n	8003632 <_fflush_r+0x22>
 800367c:	08003918 	.word	0x08003918
 8003680:	08003938 	.word	0x08003938
 8003684:	080038f8 	.word	0x080038f8

08003688 <_lseek_r>:
 8003688:	b538      	push	{r3, r4, r5, lr}
 800368a:	4604      	mov	r4, r0
 800368c:	4608      	mov	r0, r1
 800368e:	4611      	mov	r1, r2
 8003690:	2200      	movs	r2, #0
 8003692:	4d05      	ldr	r5, [pc, #20]	; (80036a8 <_lseek_r+0x20>)
 8003694:	602a      	str	r2, [r5, #0]
 8003696:	461a      	mov	r2, r3
 8003698:	f7fd f90f 	bl	80008ba <_lseek>
 800369c:	1c43      	adds	r3, r0, #1
 800369e:	d102      	bne.n	80036a6 <_lseek_r+0x1e>
 80036a0:	682b      	ldr	r3, [r5, #0]
 80036a2:	b103      	cbz	r3, 80036a6 <_lseek_r+0x1e>
 80036a4:	6023      	str	r3, [r4, #0]
 80036a6:	bd38      	pop	{r3, r4, r5, pc}
 80036a8:	20000180 	.word	0x20000180

080036ac <__swhatbuf_r>:
 80036ac:	b570      	push	{r4, r5, r6, lr}
 80036ae:	460e      	mov	r6, r1
 80036b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036b4:	4614      	mov	r4, r2
 80036b6:	2900      	cmp	r1, #0
 80036b8:	461d      	mov	r5, r3
 80036ba:	b096      	sub	sp, #88	; 0x58
 80036bc:	da08      	bge.n	80036d0 <__swhatbuf_r+0x24>
 80036be:	2200      	movs	r2, #0
 80036c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80036c4:	602a      	str	r2, [r5, #0]
 80036c6:	061a      	lsls	r2, r3, #24
 80036c8:	d410      	bmi.n	80036ec <__swhatbuf_r+0x40>
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	e00e      	b.n	80036ee <__swhatbuf_r+0x42>
 80036d0:	466a      	mov	r2, sp
 80036d2:	f000 f8c5 	bl	8003860 <_fstat_r>
 80036d6:	2800      	cmp	r0, #0
 80036d8:	dbf1      	blt.n	80036be <__swhatbuf_r+0x12>
 80036da:	9a01      	ldr	r2, [sp, #4]
 80036dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80036e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80036e4:	425a      	negs	r2, r3
 80036e6:	415a      	adcs	r2, r3
 80036e8:	602a      	str	r2, [r5, #0]
 80036ea:	e7ee      	b.n	80036ca <__swhatbuf_r+0x1e>
 80036ec:	2340      	movs	r3, #64	; 0x40
 80036ee:	2000      	movs	r0, #0
 80036f0:	6023      	str	r3, [r4, #0]
 80036f2:	b016      	add	sp, #88	; 0x58
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
	...

080036f8 <__smakebuf_r>:
 80036f8:	898b      	ldrh	r3, [r1, #12]
 80036fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036fc:	079d      	lsls	r5, r3, #30
 80036fe:	4606      	mov	r6, r0
 8003700:	460c      	mov	r4, r1
 8003702:	d507      	bpl.n	8003714 <__smakebuf_r+0x1c>
 8003704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003708:	6023      	str	r3, [r4, #0]
 800370a:	6123      	str	r3, [r4, #16]
 800370c:	2301      	movs	r3, #1
 800370e:	6163      	str	r3, [r4, #20]
 8003710:	b002      	add	sp, #8
 8003712:	bd70      	pop	{r4, r5, r6, pc}
 8003714:	466a      	mov	r2, sp
 8003716:	ab01      	add	r3, sp, #4
 8003718:	f7ff ffc8 	bl	80036ac <__swhatbuf_r>
 800371c:	9900      	ldr	r1, [sp, #0]
 800371e:	4605      	mov	r5, r0
 8003720:	4630      	mov	r0, r6
 8003722:	f7ff fa5b 	bl	8002bdc <_malloc_r>
 8003726:	b948      	cbnz	r0, 800373c <__smakebuf_r+0x44>
 8003728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800372c:	059a      	lsls	r2, r3, #22
 800372e:	d4ef      	bmi.n	8003710 <__smakebuf_r+0x18>
 8003730:	f023 0303 	bic.w	r3, r3, #3
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	81a3      	strh	r3, [r4, #12]
 800373a:	e7e3      	b.n	8003704 <__smakebuf_r+0xc>
 800373c:	4b0d      	ldr	r3, [pc, #52]	; (8003774 <__smakebuf_r+0x7c>)
 800373e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003740:	89a3      	ldrh	r3, [r4, #12]
 8003742:	6020      	str	r0, [r4, #0]
 8003744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003748:	81a3      	strh	r3, [r4, #12]
 800374a:	9b00      	ldr	r3, [sp, #0]
 800374c:	6120      	str	r0, [r4, #16]
 800374e:	6163      	str	r3, [r4, #20]
 8003750:	9b01      	ldr	r3, [sp, #4]
 8003752:	b15b      	cbz	r3, 800376c <__smakebuf_r+0x74>
 8003754:	4630      	mov	r0, r6
 8003756:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800375a:	f000 f893 	bl	8003884 <_isatty_r>
 800375e:	b128      	cbz	r0, 800376c <__smakebuf_r+0x74>
 8003760:	89a3      	ldrh	r3, [r4, #12]
 8003762:	f023 0303 	bic.w	r3, r3, #3
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	81a3      	strh	r3, [r4, #12]
 800376c:	89a0      	ldrh	r0, [r4, #12]
 800376e:	4305      	orrs	r5, r0
 8003770:	81a5      	strh	r5, [r4, #12]
 8003772:	e7cd      	b.n	8003710 <__smakebuf_r+0x18>
 8003774:	080029f5 	.word	0x080029f5

08003778 <memchr>:
 8003778:	4603      	mov	r3, r0
 800377a:	b510      	push	{r4, lr}
 800377c:	b2c9      	uxtb	r1, r1
 800377e:	4402      	add	r2, r0
 8003780:	4293      	cmp	r3, r2
 8003782:	4618      	mov	r0, r3
 8003784:	d101      	bne.n	800378a <memchr+0x12>
 8003786:	2000      	movs	r0, #0
 8003788:	e003      	b.n	8003792 <memchr+0x1a>
 800378a:	7804      	ldrb	r4, [r0, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	428c      	cmp	r4, r1
 8003790:	d1f6      	bne.n	8003780 <memchr+0x8>
 8003792:	bd10      	pop	{r4, pc}

08003794 <__malloc_lock>:
 8003794:	4801      	ldr	r0, [pc, #4]	; (800379c <__malloc_lock+0x8>)
 8003796:	f7ff b9ff 	b.w	8002b98 <__retarget_lock_acquire_recursive>
 800379a:	bf00      	nop
 800379c:	20000174 	.word	0x20000174

080037a0 <__malloc_unlock>:
 80037a0:	4801      	ldr	r0, [pc, #4]	; (80037a8 <__malloc_unlock+0x8>)
 80037a2:	f7ff b9fa 	b.w	8002b9a <__retarget_lock_release_recursive>
 80037a6:	bf00      	nop
 80037a8:	20000174 	.word	0x20000174

080037ac <_free_r>:
 80037ac:	b538      	push	{r3, r4, r5, lr}
 80037ae:	4605      	mov	r5, r0
 80037b0:	2900      	cmp	r1, #0
 80037b2:	d040      	beq.n	8003836 <_free_r+0x8a>
 80037b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80037b8:	1f0c      	subs	r4, r1, #4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	bfb8      	it	lt
 80037be:	18e4      	addlt	r4, r4, r3
 80037c0:	f7ff ffe8 	bl	8003794 <__malloc_lock>
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <_free_r+0x8c>)
 80037c6:	6813      	ldr	r3, [r2, #0]
 80037c8:	b933      	cbnz	r3, 80037d8 <_free_r+0x2c>
 80037ca:	6063      	str	r3, [r4, #4]
 80037cc:	6014      	str	r4, [r2, #0]
 80037ce:	4628      	mov	r0, r5
 80037d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037d4:	f7ff bfe4 	b.w	80037a0 <__malloc_unlock>
 80037d8:	42a3      	cmp	r3, r4
 80037da:	d908      	bls.n	80037ee <_free_r+0x42>
 80037dc:	6820      	ldr	r0, [r4, #0]
 80037de:	1821      	adds	r1, r4, r0
 80037e0:	428b      	cmp	r3, r1
 80037e2:	bf01      	itttt	eq
 80037e4:	6819      	ldreq	r1, [r3, #0]
 80037e6:	685b      	ldreq	r3, [r3, #4]
 80037e8:	1809      	addeq	r1, r1, r0
 80037ea:	6021      	streq	r1, [r4, #0]
 80037ec:	e7ed      	b.n	80037ca <_free_r+0x1e>
 80037ee:	461a      	mov	r2, r3
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	b10b      	cbz	r3, 80037f8 <_free_r+0x4c>
 80037f4:	42a3      	cmp	r3, r4
 80037f6:	d9fa      	bls.n	80037ee <_free_r+0x42>
 80037f8:	6811      	ldr	r1, [r2, #0]
 80037fa:	1850      	adds	r0, r2, r1
 80037fc:	42a0      	cmp	r0, r4
 80037fe:	d10b      	bne.n	8003818 <_free_r+0x6c>
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	4401      	add	r1, r0
 8003804:	1850      	adds	r0, r2, r1
 8003806:	4283      	cmp	r3, r0
 8003808:	6011      	str	r1, [r2, #0]
 800380a:	d1e0      	bne.n	80037ce <_free_r+0x22>
 800380c:	6818      	ldr	r0, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	4401      	add	r1, r0
 8003812:	6011      	str	r1, [r2, #0]
 8003814:	6053      	str	r3, [r2, #4]
 8003816:	e7da      	b.n	80037ce <_free_r+0x22>
 8003818:	d902      	bls.n	8003820 <_free_r+0x74>
 800381a:	230c      	movs	r3, #12
 800381c:	602b      	str	r3, [r5, #0]
 800381e:	e7d6      	b.n	80037ce <_free_r+0x22>
 8003820:	6820      	ldr	r0, [r4, #0]
 8003822:	1821      	adds	r1, r4, r0
 8003824:	428b      	cmp	r3, r1
 8003826:	bf01      	itttt	eq
 8003828:	6819      	ldreq	r1, [r3, #0]
 800382a:	685b      	ldreq	r3, [r3, #4]
 800382c:	1809      	addeq	r1, r1, r0
 800382e:	6021      	streq	r1, [r4, #0]
 8003830:	6063      	str	r3, [r4, #4]
 8003832:	6054      	str	r4, [r2, #4]
 8003834:	e7cb      	b.n	80037ce <_free_r+0x22>
 8003836:	bd38      	pop	{r3, r4, r5, pc}
 8003838:	20000178 	.word	0x20000178

0800383c <_read_r>:
 800383c:	b538      	push	{r3, r4, r5, lr}
 800383e:	4604      	mov	r4, r0
 8003840:	4608      	mov	r0, r1
 8003842:	4611      	mov	r1, r2
 8003844:	2200      	movs	r2, #0
 8003846:	4d05      	ldr	r5, [pc, #20]	; (800385c <_read_r+0x20>)
 8003848:	602a      	str	r2, [r5, #0]
 800384a:	461a      	mov	r2, r3
 800384c:	f7fc ffd8 	bl	8000800 <_read>
 8003850:	1c43      	adds	r3, r0, #1
 8003852:	d102      	bne.n	800385a <_read_r+0x1e>
 8003854:	682b      	ldr	r3, [r5, #0]
 8003856:	b103      	cbz	r3, 800385a <_read_r+0x1e>
 8003858:	6023      	str	r3, [r4, #0]
 800385a:	bd38      	pop	{r3, r4, r5, pc}
 800385c:	20000180 	.word	0x20000180

08003860 <_fstat_r>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	2300      	movs	r3, #0
 8003864:	4d06      	ldr	r5, [pc, #24]	; (8003880 <_fstat_r+0x20>)
 8003866:	4604      	mov	r4, r0
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	602b      	str	r3, [r5, #0]
 800386e:	f7fd f80b 	bl	8000888 <_fstat>
 8003872:	1c43      	adds	r3, r0, #1
 8003874:	d102      	bne.n	800387c <_fstat_r+0x1c>
 8003876:	682b      	ldr	r3, [r5, #0]
 8003878:	b103      	cbz	r3, 800387c <_fstat_r+0x1c>
 800387a:	6023      	str	r3, [r4, #0]
 800387c:	bd38      	pop	{r3, r4, r5, pc}
 800387e:	bf00      	nop
 8003880:	20000180 	.word	0x20000180

08003884 <_isatty_r>:
 8003884:	b538      	push	{r3, r4, r5, lr}
 8003886:	2300      	movs	r3, #0
 8003888:	4d05      	ldr	r5, [pc, #20]	; (80038a0 <_isatty_r+0x1c>)
 800388a:	4604      	mov	r4, r0
 800388c:	4608      	mov	r0, r1
 800388e:	602b      	str	r3, [r5, #0]
 8003890:	f7fd f809 	bl	80008a6 <_isatty>
 8003894:	1c43      	adds	r3, r0, #1
 8003896:	d102      	bne.n	800389e <_isatty_r+0x1a>
 8003898:	682b      	ldr	r3, [r5, #0]
 800389a:	b103      	cbz	r3, 800389e <_isatty_r+0x1a>
 800389c:	6023      	str	r3, [r4, #0]
 800389e:	bd38      	pop	{r3, r4, r5, pc}
 80038a0:	20000180 	.word	0x20000180

080038a4 <_init>:
 80038a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038a6:	bf00      	nop
 80038a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038aa:	bc08      	pop	{r3}
 80038ac:	469e      	mov	lr, r3
 80038ae:	4770      	bx	lr

080038b0 <_fini>:
 80038b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b2:	bf00      	nop
 80038b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038b6:	bc08      	pop	{r3}
 80038b8:	469e      	mov	lr, r3
 80038ba:	4770      	bx	lr
