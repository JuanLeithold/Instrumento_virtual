
adc_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003890  08003890  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003890  08003890  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003890  08003890  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003890  08003890  00013890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003894  08003894  00013894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003908  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003908  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afa5  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dc6  00000000  00000000  0002b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002ce08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002d9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a5b  00000000  00000000  0002e4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9c6  00000000  00000000  00046efb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e78c  00000000  00000000  000538c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e204d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003804  00000000  00000000  000e20a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080037a8 	.word	0x080037a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080037a8 	.word	0x080037a8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fba4 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f82c 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f960 	bl	800041c <MX_GPIO_Init>
  MX_ADC1_Init();
 800015c:	f000 f884 	bl	8000268 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000160:	f000 f8c0 	bl	80002e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 8000164:	f000 f90c 	bl	8000380 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <main+0x4c>)
 800016a:	f000 fcd1 	bl	8000b10 <HAL_ADC_Start_IT>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d001      	beq.n	8000178 <main+0x2c>
 	  Error_Handler();
 8000174:	f000 f9c4 	bl	8000500 <Error_Handler>

  HAL_TIM_Base_Start_IT(&htim4);
 8000178:	4808      	ldr	r0, [pc, #32]	; (800019c <main+0x50>)
 800017a:	f001 ffa1 	bl	80020c0 <HAL_TIM_Base_Start_IT>
   HAL_TIM_Base_Start_IT(&htim2);
 800017e:	4808      	ldr	r0, [pc, #32]	; (80001a0 <main+0x54>)
 8000180:	f001 ff9e 	bl	80020c0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 adc_val1=adc_val;
 8000184:	4a07      	ldr	r2, [pc, #28]	; (80001a4 <main+0x58>)
 8000186:	4b08      	ldr	r3, [pc, #32]	; (80001a8 <main+0x5c>)
 8000188:	601a      	str	r2, [r3, #0]
	  printf("Valor del ADC: %d\n", adc_val1);
 800018a:	4b07      	ldr	r3, [pc, #28]	; (80001a8 <main+0x5c>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4619      	mov	r1, r3
 8000190:	4806      	ldr	r0, [pc, #24]	; (80001ac <main+0x60>)
 8000192:	f002 fb75 	bl	8002880 <iprintf>
  {
 8000196:	e7f5      	b.n	8000184 <main+0x38>
 8000198:	2000008c 	.word	0x2000008c
 800019c:	20000104 	.word	0x20000104
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	2000014c 	.word	0x2000014c
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	080037c0 	.word	0x080037c0

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b094      	sub	sp, #80	; 0x50
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001ba:	2228      	movs	r2, #40	; 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fb56 	bl	8002870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	f107 0314 	add.w	r3, r7, #20
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	609a      	str	r2, [r3, #8]
 80001d0:	60da      	str	r2, [r3, #12]
 80001d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d4:	1d3b      	adds	r3, r7, #4
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001e0:	2301      	movs	r3, #1
 80001e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ee:	2301      	movs	r3, #1
 80001f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f2:	2302      	movs	r3, #2
 80001f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001fc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000206:	4618      	mov	r0, r3
 8000208:	f001 fa76 	bl	80016f8 <HAL_RCC_OscConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000212:	f000 f975 	bl	8000500 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000216:	230f      	movs	r3, #15
 8000218:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800021a:	2302      	movs	r3, #2
 800021c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000226:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000228:	2300      	movs	r3, #0
 800022a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800022c:	f107 0314 	add.w	r3, r7, #20
 8000230:	2102      	movs	r1, #2
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fce2 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800023e:	f000 f95f 	bl	8000500 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000242:	2302      	movs	r3, #2
 8000244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800024a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800024c:	1d3b      	adds	r3, r7, #4
 800024e:	4618      	mov	r0, r3
 8000250:	f001 fe30 	bl	8001eb4 <HAL_RCCEx_PeriphCLKConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800025a:	f000 f951 	bl	8000500 <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3750      	adds	r7, #80	; 0x50
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000278:	4b18      	ldr	r3, [pc, #96]	; (80002dc <MX_ADC1_Init+0x74>)
 800027a:	4a19      	ldr	r2, [pc, #100]	; (80002e0 <MX_ADC1_Init+0x78>)
 800027c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800027e:	4b17      	ldr	r3, [pc, #92]	; (80002dc <MX_ADC1_Init+0x74>)
 8000280:	2200      	movs	r2, #0
 8000282:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000284:	4b15      	ldr	r3, [pc, #84]	; (80002dc <MX_ADC1_Init+0x74>)
 8000286:	2201      	movs	r2, #1
 8000288:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800028a:	4b14      	ldr	r3, [pc, #80]	; (80002dc <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000290:	4b12      	ldr	r3, [pc, #72]	; (80002dc <MX_ADC1_Init+0x74>)
 8000292:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000296:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_ADC1_Init+0x74>)
 800029a:	2200      	movs	r2, #0
 800029c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800029e:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a0:	2201      	movs	r2, #1
 80002a2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a4:	480d      	ldr	r0, [pc, #52]	; (80002dc <MX_ADC1_Init+0x74>)
 80002a6:	f000 fb5b 	bl	8000960 <HAL_ADC_Init>
 80002aa:	4603      	mov	r3, r0
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d001      	beq.n	80002b4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002b0:	f000 f926 	bl	8000500 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80002b4:	2306      	movs	r3, #6
 80002b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b8:	2301      	movs	r3, #1
 80002ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002bc:	2300      	movs	r3, #0
 80002be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	4619      	mov	r1, r3
 80002c4:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_ADC1_Init+0x74>)
 80002c6:	f000 fdb7 	bl	8000e38 <HAL_ADC_ConfigChannel>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f916 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002d4:	bf00      	nop
 80002d6:	3710      	adds	r7, #16
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	2000008c 	.word	0x2000008c
 80002e0:	40012400 	.word	0x40012400

080002e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b086      	sub	sp, #24
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ea:	f107 0308 	add.w	r3, r7, #8
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002f8:	463b      	mov	r3, r7
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000300:	4b1e      	ldr	r3, [pc, #120]	; (800037c <MX_TIM2_Init+0x98>)
 8000302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000306:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8000308:	4b1c      	ldr	r3, [pc, #112]	; (800037c <MX_TIM2_Init+0x98>)
 800030a:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800030e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000310:	4b1a      	ldr	r3, [pc, #104]	; (800037c <MX_TIM2_Init+0x98>)
 8000312:	2200      	movs	r2, #0
 8000314:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8000316:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_TIM2_Init+0x98>)
 8000318:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800031c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800031e:	4b17      	ldr	r3, [pc, #92]	; (800037c <MX_TIM2_Init+0x98>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000324:	4b15      	ldr	r3, [pc, #84]	; (800037c <MX_TIM2_Init+0x98>)
 8000326:	2200      	movs	r2, #0
 8000328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800032a:	4814      	ldr	r0, [pc, #80]	; (800037c <MX_TIM2_Init+0x98>)
 800032c:	f001 fe78 	bl	8002020 <HAL_TIM_Base_Init>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000336:	f000 f8e3 	bl	8000500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800033a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800033e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000340:	f107 0308 	add.w	r3, r7, #8
 8000344:	4619      	mov	r1, r3
 8000346:	480d      	ldr	r0, [pc, #52]	; (800037c <MX_TIM2_Init+0x98>)
 8000348:	f002 f814 	bl	8002374 <HAL_TIM_ConfigClockSource>
 800034c:	4603      	mov	r3, r0
 800034e:	2b00      	cmp	r3, #0
 8000350:	d001      	beq.n	8000356 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000352:	f000 f8d5 	bl	8000500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000356:	2300      	movs	r3, #0
 8000358:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800035a:	2300      	movs	r3, #0
 800035c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800035e:	463b      	mov	r3, r7
 8000360:	4619      	mov	r1, r3
 8000362:	4806      	ldr	r0, [pc, #24]	; (800037c <MX_TIM2_Init+0x98>)
 8000364:	f002 f9ea 	bl	800273c <HAL_TIMEx_MasterConfigSynchronization>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800036e:	f000 f8c7 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000372:	bf00      	nop
 8000374:	3718      	adds	r7, #24
 8000376:	46bd      	mov	sp, r7
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	200000bc 	.word	0x200000bc

08000380 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000386:	f107 0308 	add.w	r3, r7, #8
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000394:	463b      	mov	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	601a      	str	r2, [r3, #0]
 800039a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800039c:	4b1d      	ldr	r3, [pc, #116]	; (8000414 <MX_TIM4_Init+0x94>)
 800039e:	4a1e      	ldr	r2, [pc, #120]	; (8000418 <MX_TIM4_Init+0x98>)
 80003a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7200 -1;
 80003a2:	4b1c      	ldr	r3, [pc, #112]	; (8000414 <MX_TIM4_Init+0x94>)
 80003a4:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80003a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <MX_TIM4_Init+0x94>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3000;
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <MX_TIM4_Init+0x94>)
 80003b2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80003b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003b8:	4b16      	ldr	r3, [pc, #88]	; (8000414 <MX_TIM4_Init+0x94>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003be:	4b15      	ldr	r3, [pc, #84]	; (8000414 <MX_TIM4_Init+0x94>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80003c4:	4813      	ldr	r0, [pc, #76]	; (8000414 <MX_TIM4_Init+0x94>)
 80003c6:	f001 fe2b 	bl	8002020 <HAL_TIM_Base_Init>
 80003ca:	4603      	mov	r3, r0
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d001      	beq.n	80003d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80003d0:	f000 f896 	bl	8000500 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80003da:	f107 0308 	add.w	r3, r7, #8
 80003de:	4619      	mov	r1, r3
 80003e0:	480c      	ldr	r0, [pc, #48]	; (8000414 <MX_TIM4_Init+0x94>)
 80003e2:	f001 ffc7 	bl	8002374 <HAL_TIM_ConfigClockSource>
 80003e6:	4603      	mov	r3, r0
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d001      	beq.n	80003f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80003ec:	f000 f888 	bl	8000500 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003f0:	2300      	movs	r3, #0
 80003f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <MX_TIM4_Init+0x94>)
 80003fe:	f002 f99d 	bl	800273c <HAL_TIMEx_MasterConfigSynchronization>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d001      	beq.n	800040c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000408:	f000 f87a 	bl	8000500 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800040c:	bf00      	nop
 800040e:	3718      	adds	r7, #24
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000104 	.word	0x20000104
 8000418:	40000800 	.word	0x40000800

0800041c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b086      	sub	sp, #24
 8000420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000422:	f107 0308 	add.w	r3, r7, #8
 8000426:	2200      	movs	r2, #0
 8000428:	601a      	str	r2, [r3, #0]
 800042a:	605a      	str	r2, [r3, #4]
 800042c:	609a      	str	r2, [r3, #8]
 800042e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000430:	4b17      	ldr	r3, [pc, #92]	; (8000490 <MX_GPIO_Init+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a16      	ldr	r2, [pc, #88]	; (8000490 <MX_GPIO_Init+0x74>)
 8000436:	f043 0320 	orr.w	r3, r3, #32
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b14      	ldr	r3, [pc, #80]	; (8000490 <MX_GPIO_Init+0x74>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0320 	and.w	r3, r3, #32
 8000444:	607b      	str	r3, [r7, #4]
 8000446:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <MX_GPIO_Init+0x74>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <MX_GPIO_Init+0x74>)
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	6193      	str	r3, [r2, #24]
 8000454:	4b0e      	ldr	r3, [pc, #56]	; (8000490 <MX_GPIO_Init+0x74>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	f003 0304 	and.w	r3, r3, #4
 800045c:	603b      	str	r3, [r7, #0]
 800045e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2102      	movs	r1, #2
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <MX_GPIO_Init+0x78>)
 8000466:	f001 f915 	bl	8001694 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800046a:	2302      	movs	r3, #2
 800046c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800046e:	2301      	movs	r3, #1
 8000470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000476:	2302      	movs	r3, #2
 8000478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	4804      	ldr	r0, [pc, #16]	; (8000494 <MX_GPIO_Init+0x78>)
 8000482:	f000 ff83 	bl	800138c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000486:	bf00      	nop
 8000488:	3718      	adds	r7, #24
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40021000 	.word	0x40021000
 8000494:	40010800 	.word	0x40010800

08000498 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]


	if (htim->Instance == TIM4) {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a11      	ldr	r2, [pc, #68]	; (80004ec <HAL_TIM_PeriodElapsedCallback+0x54>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d11c      	bne.n	80004e4 <HAL_TIM_PeriodElapsedCallback+0x4c>
		 HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004aa:	2102      	movs	r1, #2
 80004ac:	4810      	ldr	r0, [pc, #64]	; (80004f0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80004ae:	f001 f909 	bl	80016c4 <HAL_GPIO_TogglePin>
		 for(int i=0;i<8;i++)
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
 80004b6:	e012      	b.n	80004de <HAL_TIM_PeriodElapsedCallback+0x46>
		 {
		adc_val[i]= HAL_ADC_GetValue(&hadc1);
 80004b8:	480e      	ldr	r0, [pc, #56]	; (80004f4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80004ba:	f000 fbdf 	bl	8000c7c <HAL_ADC_GetValue>
 80004be:	4602      	mov	r2, r0
 80004c0:	490d      	ldr	r1, [pc, #52]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		  printf("Valor del ADC: %d\n", adc_val[i]);
 80004c8:	4a0b      	ldr	r2, [pc, #44]	; (80004f8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	4619      	mov	r1, r3
 80004d2:	480a      	ldr	r0, [pc, #40]	; (80004fc <HAL_TIM_PeriodElapsedCallback+0x64>)
 80004d4:	f002 f9d4 	bl	8002880 <iprintf>
		 for(int i=0;i<8;i++)
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	3301      	adds	r3, #1
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2b07      	cmp	r3, #7
 80004e2:	dde9      	ble.n	80004b8 <HAL_TIM_PeriodElapsedCallback+0x20>

				  //}


    }
}
 80004e4:	bf00      	nop
 80004e6:	3710      	adds	r7, #16
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	40000800 	.word	0x40000800
 80004f0:	40010800 	.word	0x40010800
 80004f4:	2000008c 	.word	0x2000008c
 80004f8:	2000014c 	.word	0x2000014c
 80004fc:	080037c0 	.word	0x080037c0

08000500 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000504:	b672      	cpsid	i
}
 8000506:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000508:	e7fe      	b.n	8000508 <Error_Handler+0x8>
	...

0800050c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000512:	4b15      	ldr	r3, [pc, #84]	; (8000568 <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a14      	ldr	r2, [pc, #80]	; (8000568 <HAL_MspInit+0x5c>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6193      	str	r3, [r2, #24]
 800051e:	4b12      	ldr	r3, [pc, #72]	; (8000568 <HAL_MspInit+0x5c>)
 8000520:	699b      	ldr	r3, [r3, #24]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800052a:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <HAL_MspInit+0x5c>)
 8000530:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <HAL_MspInit+0x5c>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000542:	4b0a      	ldr	r3, [pc, #40]	; (800056c <HAL_MspInit+0x60>)
 8000544:	685b      	ldr	r3, [r3, #4]
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <HAL_MspInit+0x60>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	40021000 	.word	0x40021000
 800056c:	40010000 	.word	0x40010000

08000570 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0310 	add.w	r3, r7, #16
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a18      	ldr	r2, [pc, #96]	; (80005ec <HAL_ADC_MspInit+0x7c>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d129      	bne.n	80005e4 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	4a16      	ldr	r2, [pc, #88]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 8000596:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059a:	6193      	str	r3, [r2, #24]
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	4a10      	ldr	r2, [pc, #64]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	6193      	str	r3, [r2, #24]
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <HAL_ADC_MspInit+0x80>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005c0:	2340      	movs	r3, #64	; 0x40
 80005c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c4:	2303      	movs	r3, #3
 80005c6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HAL_ADC_MspInit+0x84>)
 80005d0:	f000 fedc 	bl	800138c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2100      	movs	r1, #0
 80005d8:	2012      	movs	r0, #18
 80005da:	f000 fea0 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80005de:	2012      	movs	r0, #18
 80005e0:	f000 feb9 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005e4:	bf00      	nop
 80005e6:	3720      	adds	r7, #32
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40012400 	.word	0x40012400
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010800 	.word	0x40010800

080005f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000608:	d114      	bne.n	8000634 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800060a:	4b19      	ldr	r3, [pc, #100]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4a18      	ldr	r2, [pc, #96]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 8000610:	f043 0301 	orr.w	r3, r3, #1
 8000614:	61d3      	str	r3, [r2, #28]
 8000616:	4b16      	ldr	r3, [pc, #88]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 8000618:	69db      	ldr	r3, [r3, #28]
 800061a:	f003 0301 	and.w	r3, r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	201c      	movs	r0, #28
 8000628:	f000 fe79 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800062c:	201c      	movs	r0, #28
 800062e:	f000 fe92 	bl	8001356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000632:	e018      	b.n	8000666 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM4)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a0e      	ldr	r2, [pc, #56]	; (8000674 <HAL_TIM_Base_MspInit+0x7c>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d113      	bne.n	8000666 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800063e:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 8000640:	69db      	ldr	r3, [r3, #28]
 8000642:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 8000644:	f043 0304 	orr.w	r3, r3, #4
 8000648:	61d3      	str	r3, [r2, #28]
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <HAL_TIM_Base_MspInit+0x78>)
 800064c:	69db      	ldr	r3, [r3, #28]
 800064e:	f003 0304 	and.w	r3, r3, #4
 8000652:	60bb      	str	r3, [r7, #8]
 8000654:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000656:	2200      	movs	r2, #0
 8000658:	2100      	movs	r1, #0
 800065a:	201e      	movs	r0, #30
 800065c:	f000 fe5f 	bl	800131e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000660:	201e      	movs	r0, #30
 8000662:	f000 fe78 	bl	8001356 <HAL_NVIC_EnableIRQ>
}
 8000666:	bf00      	nop
 8000668:	3710      	adds	r7, #16
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40021000 	.word	0x40021000
 8000674:	40000800 	.word	0x40000800

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800067c:	e7fe      	b.n	800067c <NMI_Handler+0x4>

0800067e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000682:	e7fe      	b.n	8000682 <HardFault_Handler+0x4>

08000684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <MemManage_Handler+0x4>

0800068a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <BusFault_Handler+0x4>

08000690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <UsageFault_Handler+0x4>

08000696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800069a:	bf00      	nop
 800069c:	46bd      	mov	sp, r7
 800069e:	bc80      	pop	{r7}
 80006a0:	4770      	bx	lr

080006a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a2:	b480      	push	{r7}
 80006a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr

080006ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ae:	b480      	push	{r7}
 80006b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006be:	f000 f933 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <ADC1_2_IRQHandler+0x10>)
 80006ce:	f000 fae1 	bl	8000c94 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	2000008c 	.word	0x2000008c

080006dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <TIM2_IRQHandler+0x10>)
 80006e2:	f001 fd3f 	bl	8002164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000bc 	.word	0x200000bc

080006f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80006f4:	4802      	ldr	r0, [pc, #8]	; (8000700 <TIM4_IRQHandler+0x10>)
 80006f6:	f001 fd35 	bl	8002164 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000104 	.word	0x20000104

08000704 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b086      	sub	sp, #24
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e00a      	b.n	800072c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000716:	f3af 8000 	nop.w
 800071a:	4601      	mov	r1, r0
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	60ba      	str	r2, [r7, #8]
 8000722:	b2ca      	uxtb	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	3301      	adds	r3, #1
 800072a:	617b      	str	r3, [r7, #20]
 800072c:	697a      	ldr	r2, [r7, #20]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	429a      	cmp	r2, r3
 8000732:	dbf0      	blt.n	8000716 <_read+0x12>
  }

  return len;
 8000734:	687b      	ldr	r3, [r7, #4]
}
 8000736:	4618      	mov	r0, r3
 8000738:	3718      	adds	r7, #24
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800073e:	b580      	push	{r7, lr}
 8000740:	b086      	sub	sp, #24
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
 800074e:	e009      	b.n	8000764 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	1c5a      	adds	r2, r3, #1
 8000754:	60ba      	str	r2, [r7, #8]
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	3301      	adds	r3, #1
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697a      	ldr	r2, [r7, #20]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	429a      	cmp	r2, r3
 800076a:	dbf1      	blt.n	8000750 <_write+0x12>
  }
  return len;
 800076c:	687b      	ldr	r3, [r7, #4]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_close>:

int _close(int file)
{
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800077e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000782:	4618      	mov	r0, r3
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr

0800078c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
 8000794:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800079c:	605a      	str	r2, [r3, #4]
  return 0;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr

080007aa <_isatty>:

int _isatty(int file)
{
 80007aa:	b480      	push	{r7}
 80007ac:	b083      	sub	sp, #12
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bc80      	pop	{r7}
 80007bc:	4770      	bx	lr

080007be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007be:	b480      	push	{r7}
 80007c0:	b085      	sub	sp, #20
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007ca:	2300      	movs	r3, #0
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	3714      	adds	r7, #20
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
	...

080007d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b086      	sub	sp, #24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <_sbrk+0x5c>)
 80007e2:	4b15      	ldr	r3, [pc, #84]	; (8000838 <_sbrk+0x60>)
 80007e4:	1ad3      	subs	r3, r2, r3
 80007e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <_sbrk+0x64>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d102      	bne.n	80007fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x64>)
 80007f6:	4a12      	ldr	r2, [pc, #72]	; (8000840 <_sbrk+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <_sbrk+0x64>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	693a      	ldr	r2, [r7, #16]
 8000804:	429a      	cmp	r2, r3
 8000806:	d207      	bcs.n	8000818 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000808:	f002 f808 	bl	800281c <__errno>
 800080c:	4603      	mov	r3, r0
 800080e:	220c      	movs	r2, #12
 8000810:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295
 8000816:	e009      	b.n	800082c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000818:	4b08      	ldr	r3, [pc, #32]	; (800083c <_sbrk+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800081e:	4b07      	ldr	r3, [pc, #28]	; (800083c <_sbrk+0x64>)
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4413      	add	r3, r2
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <_sbrk+0x64>)
 8000828:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800082a:	68fb      	ldr	r3, [r7, #12]
}
 800082c:	4618      	mov	r0, r3
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20005000 	.word	0x20005000
 8000838:	00000400 	.word	0x00000400
 800083c:	20000170 	.word	0x20000170
 8000840:	20000188 	.word	0x20000188

08000844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000850:	f7ff fff8 	bl	8000844 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480b      	ldr	r0, [pc, #44]	; (8000884 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000856:	490c      	ldr	r1, [pc, #48]	; (8000888 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000858:	4a0c      	ldr	r2, [pc, #48]	; (800088c <LoopFillZerobss+0x16>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a09      	ldr	r2, [pc, #36]	; (8000890 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800086c:	4c09      	ldr	r4, [pc, #36]	; (8000894 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800087a:	f001 ffd5 	bl	8002828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087e:	f7ff fc65 	bl	800014c <main>
  bx lr
 8000882:	4770      	bx	lr
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800088c:	08003898 	.word	0x08003898
  ldr r2, =_sbss
 8000890:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000894:	20000188 	.word	0x20000188

08000898 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <CAN1_RX1_IRQHandler>
	...

0800089c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 fd2b 	bl	8001308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	200f      	movs	r0, #15
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff fe28 	bl	800050c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fd43 	bl	8001372 <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 fd0b 	bl	800131e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	20000008 	.word	0x20000008
 8000924:	20000004 	.word	0x20000004

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b05      	ldr	r3, [pc, #20]	; (8000944 <HAL_IncTick+0x1c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b05      	ldr	r3, [pc, #20]	; (8000948 <HAL_IncTick+0x20>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a03      	ldr	r2, [pc, #12]	; (8000948 <HAL_IncTick+0x20>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr
 8000944:	20000008 	.word	0x20000008
 8000948:	20000174 	.word	0x20000174

0800094c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  return uwTick;
 8000950:	4b02      	ldr	r3, [pc, #8]	; (800095c <HAL_GetTick+0x10>)
 8000952:	681b      	ldr	r3, [r3, #0]
}
 8000954:	4618      	mov	r0, r3
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	20000174 	.word	0x20000174

08000960 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000970:	2300      	movs	r3, #0
 8000972:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000974:	2300      	movs	r3, #0
 8000976:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d101      	bne.n	8000982 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e0be      	b.n	8000b00 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800098c:	2b00      	cmp	r3, #0
 800098e:	d109      	bne.n	80009a4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff fde6 	bl	8000570 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 fb99 	bl	80010dc <ADC_ConversionStop_Disable>
 80009aa:	4603      	mov	r3, r0
 80009ac:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	f040 8099 	bne.w	8000aee <HAL_ADC_Init+0x18e>
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f040 8095 	bne.w	8000aee <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009cc:	f023 0302 	bic.w	r3, r3, #2
 80009d0:	f043 0202 	orr.w	r2, r3, #2
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009e0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	7b1b      	ldrb	r3, [r3, #12]
 80009e6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80009e8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	689b      	ldr	r3, [r3, #8]
 80009f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80009f8:	d003      	beq.n	8000a02 <HAL_ADC_Init+0xa2>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	689b      	ldr	r3, [r3, #8]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d102      	bne.n	8000a08 <HAL_ADC_Init+0xa8>
 8000a02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a06:	e000      	b.n	8000a0a <HAL_ADC_Init+0xaa>
 8000a08:	2300      	movs	r3, #0
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	7d1b      	ldrb	r3, [r3, #20]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d119      	bne.n	8000a4c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7b1b      	ldrb	r3, [r3, #12]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d109      	bne.n	8000a34 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	035a      	lsls	r2, r3, #13
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	e00b      	b.n	8000a4c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a38:	f043 0220 	orr.w	r2, r3, #32
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a44:	f043 0201 	orr.w	r2, r3, #1
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <HAL_ADC_Init+0x1a8>)
 8000a68:	4013      	ands	r3, r2
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	68b9      	ldr	r1, [r7, #8]
 8000a70:	430b      	orrs	r3, r1
 8000a72:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	689b      	ldr	r3, [r3, #8]
 8000a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a7c:	d003      	beq.n	8000a86 <HAL_ADC_Init+0x126>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d104      	bne.n	8000a90 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	3b01      	subs	r3, #1
 8000a8c:	051b      	lsls	r3, r3, #20
 8000a8e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a96:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	68fa      	ldr	r2, [r7, #12]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	689a      	ldr	r2, [r3, #8]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_ADC_Init+0x1ac>)
 8000aac:	4013      	ands	r3, r2
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	d10b      	bne.n	8000acc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	f023 0303 	bic.w	r3, r3, #3
 8000ac2:	f043 0201 	orr.w	r2, r3, #1
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aca:	e018      	b.n	8000afe <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	f023 0312 	bic.w	r3, r3, #18
 8000ad4:	f043 0210 	orr.w	r2, r3, #16
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae0:	f043 0201 	orr.w	r2, r3, #1
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000aec:	e007      	b.n	8000afe <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000af2:	f043 0210 	orr.w	r2, r3, #16
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000afe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	ffe1f7fd 	.word	0xffe1f7fd
 8000b0c:	ff1f0efe 	.word	0xff1f0efe

08000b10 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000b22:	2b01      	cmp	r3, #1
 8000b24:	d101      	bne.n	8000b2a <HAL_ADC_Start_IT+0x1a>
 8000b26:	2302      	movs	r3, #2
 8000b28:	e0a0      	b.n	8000c6c <HAL_ADC_Start_IT+0x15c>
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 fa78 	bl	8001028 <ADC_Enable>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	f040 808f 	bne.w	8000c62 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b4c:	f023 0301 	bic.w	r3, r3, #1
 8000b50:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a45      	ldr	r2, [pc, #276]	; (8000c74 <HAL_ADC_Start_IT+0x164>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d105      	bne.n	8000b6e <HAL_ADC_Start_IT+0x5e>
 8000b62:	4b45      	ldr	r3, [pc, #276]	; (8000c78 <HAL_ADC_Start_IT+0x168>)
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d115      	bne.n	8000b9a <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b72:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d026      	beq.n	8000bd6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b98:	e01d      	b.n	8000bd6 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4a33      	ldr	r2, [pc, #204]	; (8000c78 <HAL_ADC_Start_IT+0x168>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d004      	beq.n	8000bba <HAL_ADC_Start_IT+0xaa>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a2f      	ldr	r2, [pc, #188]	; (8000c74 <HAL_ADC_Start_IT+0x164>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d10d      	bne.n	8000bd6 <HAL_ADC_Start_IT+0xc6>
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <HAL_ADC_Start_IT+0x168>)
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d007      	beq.n	8000bd6 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000bce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d006      	beq.n	8000bf0 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	f023 0206 	bic.w	r2, r3, #6
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	e002      	b.n	8000bf6 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f06f 0202 	mvn.w	r2, #2
 8000c06:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0220 	orr.w	r2, r2, #32
 8000c16:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c22:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c26:	d113      	bne.n	8000c50 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c2c:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <HAL_ADC_Start_IT+0x164>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d105      	bne.n	8000c3e <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_ADC_Start_IT+0x168>)
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d108      	bne.n	8000c50 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689a      	ldr	r2, [r3, #8]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	e00c      	b.n	8000c6a <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	689a      	ldr	r2, [r3, #8]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	e003      	b.n	8000c6a <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2200      	movs	r2, #0
 8000c66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012800 	.word	0x40012800
 8000c78:	40012400 	.word	0x40012400

08000c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d03e      	beq.n	8000d34 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f003 0302 	and.w	r3, r3, #2
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d039      	beq.n	8000d34 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d105      	bne.n	8000cd8 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cd0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	689b      	ldr	r3, [r3, #8]
 8000cde:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000ce2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000ce6:	d11d      	bne.n	8000d24 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d119      	bne.n	8000d24 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	685a      	ldr	r2, [r3, #4]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0220 	bic.w	r2, r2, #32
 8000cfe:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f043 0201 	orr.w	r2, r3, #1
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 f874 	bl	8000e12 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f06f 0212 	mvn.w	r2, #18
 8000d32:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d04d      	beq.n	8000dda <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f003 0304 	and.w	r3, r3, #4
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d048      	beq.n	8000dda <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f003 0310 	and.w	r3, r3, #16
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d105      	bne.n	8000d60 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d58:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8000d6a:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8000d6e:	d012      	beq.n	8000d96 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d125      	bne.n	8000dca <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8000d88:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d8c:	d11d      	bne.n	8000dca <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d119      	bne.n	8000dca <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000da4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000daa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d105      	bne.n	8000dca <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc2:	f043 0201 	orr.w	r2, r3, #1
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 f9c7 	bl	800115e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f06f 020c 	mvn.w	r2, #12
 8000dd8:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d012      	beq.n	8000e0a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d00d      	beq.n	8000e0a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 f812 	bl	8000e24 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f06f 0201 	mvn.w	r2, #1
 8000e08:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8000e0a:	bf00      	nop
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000e12:	b480      	push	{r7}
 8000e14:	b083      	sub	sp, #12
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
	...

08000e38 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d101      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x20>
 8000e54:	2302      	movs	r3, #2
 8000e56:	e0dc      	b.n	8001012 <HAL_ADC_ConfigChannel+0x1da>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	2b06      	cmp	r3, #6
 8000e66:	d81c      	bhi.n	8000ea2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685a      	ldr	r2, [r3, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	4413      	add	r3, r2
 8000e78:	3b05      	subs	r3, #5
 8000e7a:	221f      	movs	r2, #31
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	4019      	ands	r1, r3
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	4413      	add	r3, r2
 8000e92:	3b05      	subs	r3, #5
 8000e94:	fa00 f203 	lsl.w	r2, r0, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea0:	e03c      	b.n	8000f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b0c      	cmp	r3, #12
 8000ea8:	d81c      	bhi.n	8000ee4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b23      	subs	r3, #35	; 0x23
 8000ebc:	221f      	movs	r2, #31
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	4019      	ands	r1, r3
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	6818      	ldr	r0, [r3, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b23      	subs	r3, #35	; 0x23
 8000ed6:	fa00 f203 	lsl.w	r2, r0, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	631a      	str	r2, [r3, #48]	; 0x30
 8000ee2:	e01b      	b.n	8000f1c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b41      	subs	r3, #65	; 0x41
 8000ef6:	221f      	movs	r2, #31
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	4019      	ands	r1, r3
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685a      	ldr	r2, [r3, #4]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4413      	add	r3, r2
 8000f0e:	3b41      	subs	r3, #65	; 0x41
 8000f10:	fa00 f203 	lsl.w	r2, r0, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b09      	cmp	r3, #9
 8000f22:	d91c      	bls.n	8000f5e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68d9      	ldr	r1, [r3, #12]
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	4613      	mov	r3, r2
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	4413      	add	r3, r2
 8000f34:	3b1e      	subs	r3, #30
 8000f36:	2207      	movs	r2, #7
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	43db      	mvns	r3, r3
 8000f3e:	4019      	ands	r1, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	6898      	ldr	r0, [r3, #8]
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	005b      	lsls	r3, r3, #1
 8000f4c:	4413      	add	r3, r2
 8000f4e:	3b1e      	subs	r3, #30
 8000f50:	fa00 f203 	lsl.w	r2, r0, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	e019      	b.n	8000f92 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6919      	ldr	r1, [r3, #16]
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	005b      	lsls	r3, r3, #1
 8000f6c:	4413      	add	r3, r2
 8000f6e:	2207      	movs	r2, #7
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4019      	ands	r1, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	6898      	ldr	r0, [r3, #8]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	fa00 f203 	lsl.w	r2, r0, r3
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	430a      	orrs	r2, r1
 8000f90:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d003      	beq.n	8000fa2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f9e:	2b11      	cmp	r3, #17
 8000fa0:	d132      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a1d      	ldr	r2, [pc, #116]	; (800101c <HAL_ADC_ConfigChannel+0x1e4>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d125      	bne.n	8000ff8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d126      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000fc8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d11a      	bne.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <HAL_ADC_ConfigChannel+0x1e8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <HAL_ADC_ConfigChannel+0x1ec>)
 8000fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000fdc:	0c9a      	lsrs	r2, r3, #18
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fe8:	e002      	b.n	8000ff0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	3b01      	subs	r3, #1
 8000fee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d1f9      	bne.n	8000fea <HAL_ADC_ConfigChannel+0x1b2>
 8000ff6:	e007      	b.n	8001008 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f043 0220 	orr.w	r2, r3, #32
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001004:	2301      	movs	r3, #1
 8001006:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001010:	7bfb      	ldrb	r3, [r7, #15]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3714      	adds	r7, #20
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr
 800101c:	40012400 	.word	0x40012400
 8001020:	20000000 	.word	0x20000000
 8001024:	431bde83 	.word	0x431bde83

08001028 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	2b01      	cmp	r3, #1
 8001044:	d040      	beq.n	80010c8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	689a      	ldr	r2, [r3, #8]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f042 0201 	orr.w	r2, r2, #1
 8001054:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001056:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <ADC_Enable+0xac>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1f      	ldr	r2, [pc, #124]	; (80010d8 <ADC_Enable+0xb0>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	0c9b      	lsrs	r3, r3, #18
 8001062:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001064:	e002      	b.n	800106c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	3b01      	subs	r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d1f9      	bne.n	8001066 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001072:	f7ff fc6b 	bl	800094c <HAL_GetTick>
 8001076:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001078:	e01f      	b.n	80010ba <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800107a:	f7ff fc67 	bl	800094c <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b02      	cmp	r3, #2
 8001086:	d918      	bls.n	80010ba <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	2b01      	cmp	r3, #1
 8001094:	d011      	beq.n	80010ba <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800109a:	f043 0210 	orr.w	r2, r3, #16
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e007      	b.n	80010ca <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d1d8      	bne.n	800107a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3710      	adds	r7, #16
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	431bde83 	.word	0x431bde83

080010dc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d12e      	bne.n	8001154 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	689a      	ldr	r2, [r3, #8]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0201 	bic.w	r2, r2, #1
 8001104:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001106:	f7ff fc21 	bl	800094c <HAL_GetTick>
 800110a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800110c:	e01b      	b.n	8001146 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800110e:	f7ff fc1d 	bl	800094c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d914      	bls.n	8001146 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b01      	cmp	r3, #1
 8001128:	d10d      	bne.n	8001146 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	f043 0210 	orr.w	r2, r3, #16
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e007      	b.n	8001156 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	2b01      	cmp	r3, #1
 8001152:	d0dc      	beq.n	800110e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001166:	bf00      	nop
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	bc80      	pop	{r7}
 800116e:	4770      	bx	lr

08001170 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001170:	b480      	push	{r7}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f003 0307 	and.w	r3, r3, #7
 800117e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800118c:	4013      	ands	r3, r2
 800118e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001198:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800119c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011a2:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <__NVIC_SetPriorityGrouping+0x44>)
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	60d3      	str	r3, [r2, #12]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <__NVIC_GetPriorityGrouping+0x18>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	0a1b      	lsrs	r3, r3, #8
 80011c2:	f003 0307 	and.w	r3, r3, #7
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db0b      	blt.n	80011fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	4906      	ldr	r1, [pc, #24]	; (8001208 <__NVIC_EnableIRQ+0x34>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	e000e100 	.word	0xe000e100

0800120c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	4603      	mov	r3, r0
 8001214:	6039      	str	r1, [r7, #0]
 8001216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121c:	2b00      	cmp	r3, #0
 800121e:	db0a      	blt.n	8001236 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	b2da      	uxtb	r2, r3
 8001224:	490c      	ldr	r1, [pc, #48]	; (8001258 <__NVIC_SetPriority+0x4c>)
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	0112      	lsls	r2, r2, #4
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	440b      	add	r3, r1
 8001230:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001234:	e00a      	b.n	800124c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	b2da      	uxtb	r2, r3
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <__NVIC_SetPriority+0x50>)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	3b04      	subs	r3, #4
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	b2d2      	uxtb	r2, r2
 8001248:	440b      	add	r3, r1
 800124a:	761a      	strb	r2, [r3, #24]
}
 800124c:	bf00      	nop
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001260:	b480      	push	{r7}
 8001262:	b089      	sub	sp, #36	; 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0307 	and.w	r3, r3, #7
 8001272:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f1c3 0307 	rsb	r3, r3, #7
 800127a:	2b04      	cmp	r3, #4
 800127c:	bf28      	it	cs
 800127e:	2304      	movcs	r3, #4
 8001280:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	3304      	adds	r3, #4
 8001286:	2b06      	cmp	r3, #6
 8001288:	d902      	bls.n	8001290 <NVIC_EncodePriority+0x30>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	3b03      	subs	r3, #3
 800128e:	e000      	b.n	8001292 <NVIC_EncodePriority+0x32>
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001294:	f04f 32ff 	mov.w	r2, #4294967295
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43da      	mvns	r2, r3
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa01 f303 	lsl.w	r3, r1, r3
 80012b2:	43d9      	mvns	r1, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b8:	4313      	orrs	r3, r2
         );
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3724      	adds	r7, #36	; 0x24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012d4:	d301      	bcc.n	80012da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00f      	b.n	80012fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012da:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <SysTick_Config+0x40>)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	3b01      	subs	r3, #1
 80012e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012e2:	210f      	movs	r1, #15
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f7ff ff90 	bl	800120c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <SysTick_Config+0x40>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f2:	4b04      	ldr	r3, [pc, #16]	; (8001304 <SysTick_Config+0x40>)
 80012f4:	2207      	movs	r2, #7
 80012f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f8:	2300      	movs	r3, #0
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	e000e010 	.word	0xe000e010

08001308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff ff2d 	bl	8001170 <__NVIC_SetPriorityGrouping>
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800131e:	b580      	push	{r7, lr}
 8001320:	b086      	sub	sp, #24
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	60b9      	str	r1, [r7, #8]
 8001328:	607a      	str	r2, [r7, #4]
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800132c:	2300      	movs	r3, #0
 800132e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001330:	f7ff ff42 	bl	80011b8 <__NVIC_GetPriorityGrouping>
 8001334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	6978      	ldr	r0, [r7, #20]
 800133c:	f7ff ff90 	bl	8001260 <NVIC_EncodePriority>
 8001340:	4602      	mov	r2, r0
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	4611      	mov	r1, r2
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff5f 	bl	800120c <__NVIC_SetPriority>
}
 800134e:	bf00      	nop
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff35 	bl	80011d4 <__NVIC_EnableIRQ>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffa2 	bl	80012c4 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b08b      	sub	sp, #44	; 0x2c
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800139e:	e169      	b.n	8001674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013a0:	2201      	movs	r2, #1
 80013a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	69fa      	ldr	r2, [r7, #28]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	f040 8158 	bne.w	800166e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4a9a      	ldr	r2, [pc, #616]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d05e      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013c8:	4a98      	ldr	r2, [pc, #608]	; (800162c <HAL_GPIO_Init+0x2a0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d875      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013ce:	4a98      	ldr	r2, [pc, #608]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d058      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013d4:	4a96      	ldr	r2, [pc, #600]	; (8001630 <HAL_GPIO_Init+0x2a4>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d86f      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013da:	4a96      	ldr	r2, [pc, #600]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d052      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013e0:	4a94      	ldr	r2, [pc, #592]	; (8001634 <HAL_GPIO_Init+0x2a8>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d869      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013e6:	4a94      	ldr	r2, [pc, #592]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d04c      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013ec:	4a92      	ldr	r2, [pc, #584]	; (8001638 <HAL_GPIO_Init+0x2ac>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d863      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013f2:	4a92      	ldr	r2, [pc, #584]	; (800163c <HAL_GPIO_Init+0x2b0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d046      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
 80013f8:	4a90      	ldr	r2, [pc, #576]	; (800163c <HAL_GPIO_Init+0x2b0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d85d      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 80013fe:	2b12      	cmp	r3, #18
 8001400:	d82a      	bhi.n	8001458 <HAL_GPIO_Init+0xcc>
 8001402:	2b12      	cmp	r3, #18
 8001404:	d859      	bhi.n	80014ba <HAL_GPIO_Init+0x12e>
 8001406:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_GPIO_Init+0x80>)
 8001408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140c:	08001487 	.word	0x08001487
 8001410:	08001461 	.word	0x08001461
 8001414:	08001473 	.word	0x08001473
 8001418:	080014b5 	.word	0x080014b5
 800141c:	080014bb 	.word	0x080014bb
 8001420:	080014bb 	.word	0x080014bb
 8001424:	080014bb 	.word	0x080014bb
 8001428:	080014bb 	.word	0x080014bb
 800142c:	080014bb 	.word	0x080014bb
 8001430:	080014bb 	.word	0x080014bb
 8001434:	080014bb 	.word	0x080014bb
 8001438:	080014bb 	.word	0x080014bb
 800143c:	080014bb 	.word	0x080014bb
 8001440:	080014bb 	.word	0x080014bb
 8001444:	080014bb 	.word	0x080014bb
 8001448:	080014bb 	.word	0x080014bb
 800144c:	080014bb 	.word	0x080014bb
 8001450:	08001469 	.word	0x08001469
 8001454:	0800147d 	.word	0x0800147d
 8001458:	4a79      	ldr	r2, [pc, #484]	; (8001640 <HAL_GPIO_Init+0x2b4>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d013      	beq.n	8001486 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800145e:	e02c      	b.n	80014ba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	623b      	str	r3, [r7, #32]
          break;
 8001466:	e029      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	3304      	adds	r3, #4
 800146e:	623b      	str	r3, [r7, #32]
          break;
 8001470:	e024      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	3308      	adds	r3, #8
 8001478:	623b      	str	r3, [r7, #32]
          break;
 800147a:	e01f      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	330c      	adds	r3, #12
 8001482:	623b      	str	r3, [r7, #32]
          break;
 8001484:	e01a      	b.n	80014bc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800148e:	2304      	movs	r3, #4
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e013      	b.n	80014bc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d105      	bne.n	80014a8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800149c:	2308      	movs	r3, #8
 800149e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	69fa      	ldr	r2, [r7, #28]
 80014a4:	611a      	str	r2, [r3, #16]
          break;
 80014a6:	e009      	b.n	80014bc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	615a      	str	r2, [r3, #20]
          break;
 80014b2:	e003      	b.n	80014bc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
          break;
 80014b8:	e000      	b.n	80014bc <HAL_GPIO_Init+0x130>
          break;
 80014ba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2bff      	cmp	r3, #255	; 0xff
 80014c0:	d801      	bhi.n	80014c6 <HAL_GPIO_Init+0x13a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	e001      	b.n	80014ca <HAL_GPIO_Init+0x13e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3304      	adds	r3, #4
 80014ca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2bff      	cmp	r3, #255	; 0xff
 80014d0:	d802      	bhi.n	80014d8 <HAL_GPIO_Init+0x14c>
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	e002      	b.n	80014de <HAL_GPIO_Init+0x152>
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	3b08      	subs	r3, #8
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	210f      	movs	r1, #15
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	401a      	ands	r2, r3
 80014f0:	6a39      	ldr	r1, [r7, #32]
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	431a      	orrs	r2, r3
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 80b1 	beq.w	800166e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800150c:	4b4d      	ldr	r3, [pc, #308]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6193      	str	r3, [r2, #24]
 8001518:	4b4a      	ldr	r3, [pc, #296]	; (8001644 <HAL_GPIO_Init+0x2b8>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <HAL_GPIO_Init+0x2bc>)
 8001526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001528:	089b      	lsrs	r3, r3, #2
 800152a:	3302      	adds	r3, #2
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	f003 0303 	and.w	r3, r3, #3
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	220f      	movs	r2, #15
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a40      	ldr	r2, [pc, #256]	; (800164c <HAL_GPIO_Init+0x2c0>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d013      	beq.n	8001578 <HAL_GPIO_Init+0x1ec>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a3f      	ldr	r2, [pc, #252]	; (8001650 <HAL_GPIO_Init+0x2c4>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00d      	beq.n	8001574 <HAL_GPIO_Init+0x1e8>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <HAL_GPIO_Init+0x2c8>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d007      	beq.n	8001570 <HAL_GPIO_Init+0x1e4>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a3d      	ldr	r2, [pc, #244]	; (8001658 <HAL_GPIO_Init+0x2cc>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d101      	bne.n	800156c <HAL_GPIO_Init+0x1e0>
 8001568:	2303      	movs	r3, #3
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 800156c:	2304      	movs	r3, #4
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1ee>
 8001578:	2300      	movs	r3, #0
 800157a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158a:	492f      	ldr	r1, [pc, #188]	; (8001648 <HAL_GPIO_Init+0x2bc>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a4:	4b2d      	ldr	r3, [pc, #180]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	492c      	ldr	r1, [pc, #176]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b2:	4b2a      	ldr	r3, [pc, #168]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4928      	ldr	r1, [pc, #160]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b23      	ldr	r3, [pc, #140]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4922      	ldr	r1, [pc, #136]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	491e      	ldr	r1, [pc, #120]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4918      	ldr	r1, [pc, #96]	; (800165c <HAL_GPIO_Init+0x2d0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_GPIO_Init+0x2d0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4914      	ldr	r1, [pc, #80]	; (800165c <HAL_GPIO_Init+0x2d0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d021      	beq.n	8001660 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <HAL_GPIO_Init+0x2d0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	490e      	ldr	r1, [pc, #56]	; (800165c <HAL_GPIO_Init+0x2d0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e021      	b.n	800166e <HAL_GPIO_Init+0x2e2>
 800162a:	bf00      	nop
 800162c:	10320000 	.word	0x10320000
 8001630:	10310000 	.word	0x10310000
 8001634:	10220000 	.word	0x10220000
 8001638:	10210000 	.word	0x10210000
 800163c:	10120000 	.word	0x10120000
 8001640:	10110000 	.word	0x10110000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40011400 	.word	0x40011400
 800165c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_GPIO_Init+0x304>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	43db      	mvns	r3, r3
 8001668:	4909      	ldr	r1, [pc, #36]	; (8001690 <HAL_GPIO_Init+0x304>)
 800166a:	4013      	ands	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	3301      	adds	r3, #1
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167a:	fa22 f303 	lsr.w	r3, r2, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	f47f ae8e 	bne.w	80013a0 <HAL_GPIO_Init+0x14>
  }
}
 8001684:	bf00      	nop
 8001686:	bf00      	nop
 8001688:	372c      	adds	r7, #44	; 0x2c
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40010400 	.word	0x40010400

08001694 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	807b      	strh	r3, [r7, #2]
 80016a0:	4613      	mov	r3, r2
 80016a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016a4:	787b      	ldrb	r3, [r7, #1]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d003      	beq.n	80016b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016b0:	e003      	b.n	80016ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	041a      	lsls	r2, r3, #16
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	611a      	str	r2, [r3, #16]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016d6:	887a      	ldrh	r2, [r7, #2]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4013      	ands	r3, r2
 80016dc:	041a      	lsls	r2, r3, #16
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	43d9      	mvns	r1, r3
 80016e2:	887b      	ldrh	r3, [r7, #2]
 80016e4:	400b      	ands	r3, r1
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	611a      	str	r2, [r3, #16]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
	...

080016f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e272      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8087 	beq.w	8001826 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001718:	4b92      	ldr	r3, [pc, #584]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 030c 	and.w	r3, r3, #12
 8001720:	2b04      	cmp	r3, #4
 8001722:	d00c      	beq.n	800173e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001724:	4b8f      	ldr	r3, [pc, #572]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b08      	cmp	r3, #8
 800172e:	d112      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
 8001730:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173c:	d10b      	bne.n	8001756 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d06c      	beq.n	8001824 <HAL_RCC_OscConfig+0x12c>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d168      	bne.n	8001824 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e24c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800175e:	d106      	bne.n	800176e <HAL_RCC_OscConfig+0x76>
 8001760:	4b80      	ldr	r3, [pc, #512]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a7f      	ldr	r2, [pc, #508]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001766:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	e02e      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <HAL_RCC_OscConfig+0x98>
 8001776:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800177c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b78      	ldr	r3, [pc, #480]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001788:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e01d      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001798:	d10c      	bne.n	80017b4 <HAL_RCC_OscConfig+0xbc>
 800179a:	4b72      	ldr	r3, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a71      	ldr	r2, [pc, #452]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	4b6f      	ldr	r3, [pc, #444]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a6e      	ldr	r2, [pc, #440]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	e00b      	b.n	80017cc <HAL_RCC_OscConfig+0xd4>
 80017b4:	4b6b      	ldr	r3, [pc, #428]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017be:	6013      	str	r3, [r2, #0]
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a67      	ldr	r2, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d013      	beq.n	80017fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f8ba 	bl	800094c <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017dc:	f7ff f8b6 	bl	800094c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b64      	cmp	r3, #100	; 0x64
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e200      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0xe4>
 80017fa:	e014      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fc:	f7ff f8a6 	bl	800094c <HAL_GetTick>
 8001800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001802:	e008      	b.n	8001816 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001804:	f7ff f8a2 	bl	800094c <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d901      	bls.n	8001816 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	e1ec      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001816:	4b53      	ldr	r3, [pc, #332]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1f0      	bne.n	8001804 <HAL_RCC_OscConfig+0x10c>
 8001822:	e000      	b.n	8001826 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001832:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f003 030c 	and.w	r3, r3, #12
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 030c 	and.w	r3, r3, #12
 8001846:	2b08      	cmp	r3, #8
 8001848:	d11c      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d116      	bne.n	8001884 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	4b43      	ldr	r3, [pc, #268]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d005      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	2b01      	cmp	r3, #1
 8001868:	d001      	beq.n	800186e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e1c0      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186e:	4b3d      	ldr	r3, [pc, #244]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4939      	ldr	r1, [pc, #228]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	e03a      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	691b      	ldr	r3, [r3, #16]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800188c:	4b36      	ldr	r3, [pc, #216]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 800188e:	2201      	movs	r2, #1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f85b 	bl	800094c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189a:	f7ff f857 	bl	800094c <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e1a1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ac:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	00db      	lsls	r3, r3, #3
 80018c6:	4927      	ldr	r1, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
 80018cc:	e015      	b.n	80018fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ce:	4b26      	ldr	r3, [pc, #152]	; (8001968 <HAL_RCC_OscConfig+0x270>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d4:	f7ff f83a 	bl	800094c <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018dc:	f7ff f836 	bl	800094c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e180      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	2b00      	cmp	r3, #0
 8001904:	d03a      	beq.n	800197c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d019      	beq.n	8001942 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190e:	4b17      	ldr	r3, [pc, #92]	; (800196c <HAL_RCC_OscConfig+0x274>)
 8001910:	2201      	movs	r2, #1
 8001912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001914:	f7ff f81a 	bl	800094c <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800191c:	f7ff f816 	bl	800094c <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e160      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_RCC_OscConfig+0x26c>)
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800193a:	2001      	movs	r0, #1
 800193c:	f000 fa9c 	bl	8001e78 <RCC_Delay>
 8001940:	e01c      	b.n	800197c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_RCC_OscConfig+0x274>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001948:	f7ff f800 	bl	800094c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194e:	e00f      	b.n	8001970 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7fe fffc 	bl	800094c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d908      	bls.n	8001970 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e146      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	42420000 	.word	0x42420000
 800196c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1e9      	bne.n	8001950 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a6 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b8b      	ldr	r3, [pc, #556]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b88      	ldr	r3, [pc, #544]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	4a87      	ldr	r2, [pc, #540]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019a4:	61d3      	str	r3, [r2, #28]
 80019a6:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b2:	2301      	movs	r3, #1
 80019b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b6:	4b82      	ldr	r3, [pc, #520]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d118      	bne.n	80019f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ce:	f7fe ffbd 	bl	800094c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7fe ffb9 	bl	800094c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e103      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4c8>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d106      	bne.n	8001a0a <HAL_RCC_OscConfig+0x312>
 80019fc:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6213      	str	r3, [r2, #32]
 8001a08:	e02d      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x334>
 8001a12:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	6a1b      	ldr	r3, [r3, #32]
 8001a16:	4a69      	ldr	r2, [pc, #420]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a18:	f023 0301 	bic.w	r3, r3, #1
 8001a1c:	6213      	str	r3, [r2, #32]
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a20:	6a1b      	ldr	r3, [r3, #32]
 8001a22:	4a66      	ldr	r2, [pc, #408]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f023 0304 	bic.w	r3, r3, #4
 8001a28:	6213      	str	r3, [r2, #32]
 8001a2a:	e01c      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b05      	cmp	r3, #5
 8001a32:	d10c      	bne.n	8001a4e <HAL_RCC_OscConfig+0x356>
 8001a34:	4b61      	ldr	r3, [pc, #388]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a36:	6a1b      	ldr	r3, [r3, #32]
 8001a38:	4a60      	ldr	r2, [pc, #384]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f043 0304 	orr.w	r3, r3, #4
 8001a3e:	6213      	str	r3, [r2, #32]
 8001a40:	4b5e      	ldr	r3, [pc, #376]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a5d      	ldr	r2, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e00b      	b.n	8001a66 <HAL_RCC_OscConfig+0x36e>
 8001a4e:	4b5b      	ldr	r3, [pc, #364]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	4a5a      	ldr	r2, [pc, #360]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6213      	str	r3, [r2, #32]
 8001a5a:	4b58      	ldr	r3, [pc, #352]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4a57      	ldr	r2, [pc, #348]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	f023 0304 	bic.w	r3, r3, #4
 8001a64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d015      	beq.n	8001a9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7fe ff6d 	bl	800094c <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7fe ff69 	bl	800094c <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e0b1      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a8c:	4b4b      	ldr	r3, [pc, #300]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0ee      	beq.n	8001a76 <HAL_RCC_OscConfig+0x37e>
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9a:	f7fe ff57 	bl	800094c <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7fe ff53 	bl	800094c <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e09b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001aba:	6a1b      	ldr	r3, [r3, #32]
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1ee      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d105      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aca:	4b3c      	ldr	r3, [pc, #240]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001acc:	69db      	ldr	r3, [r3, #28]
 8001ace:	4a3b      	ldr	r2, [pc, #236]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ae0:	4b36      	ldr	r3, [pc, #216]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b08      	cmp	r3, #8
 8001aea:	d061      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d146      	bne.n	8001b82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afa:	f7fe ff27 	bl	800094c <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b02:	f7fe ff23 	bl	800094c <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e06d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	4b29      	ldr	r3, [pc, #164]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1f0      	bne.n	8001b02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1b      	ldr	r3, [r3, #32]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b28:	d108      	bne.n	8001b3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	4921      	ldr	r1, [pc, #132]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a19      	ldr	r1, [r3, #32]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	491b      	ldr	r1, [pc, #108]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b54:	4b1b      	ldr	r3, [pc, #108]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7fe fef7 	bl	800094c <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b62:	f7fe fef3 	bl	800094c <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e03d      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x46a>
 8001b80:	e035      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_RCC_OscConfig+0x4cc>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe fee0 	bl	800094c <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe fedc 	bl	800094c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e026      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_OscConfig+0x498>
 8001bae:	e01e      	b.n	8001bee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e019      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40007000 	.word	0x40007000
 8001bc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_RCC_OscConfig+0x500>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0d0      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c10:	4b6a      	ldr	r3, [pc, #424]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	429a      	cmp	r2, r3
 8001c1c:	d910      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1e:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f023 0207 	bic.w	r2, r3, #7
 8001c26:	4965      	ldr	r1, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d040      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d115      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d107      	bne.n	8001cca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cba:	4b41      	ldr	r3, [pc, #260]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d109      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e073      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cca:	4b3d      	ldr	r3, [pc, #244]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d101      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e06b      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cda:	4b39      	ldr	r3, [pc, #228]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f023 0203 	bic.w	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	4936      	ldr	r1, [pc, #216]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cec:	f7fe fe2e 	bl	800094c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	e00a      	b.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf4:	f7fe fe2a 	bl	800094c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e053      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d0a:	4b2d      	ldr	r3, [pc, #180]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 020c 	and.w	r2, r3, #12
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d1eb      	bne.n	8001cf4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d210      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4922      	ldr	r1, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1d0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fd8c 	bl	80008c8 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40022000 	.word	0x40022000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	080037d4 	.word	0x080037d4
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000004 	.word	0x20000004

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60bb      	str	r3, [r7, #8]
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	2300      	movs	r3, #0
 8001de4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dea:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 030c 	and.w	r3, r3, #12
 8001df6:	2b04      	cmp	r3, #4
 8001df8:	d002      	beq.n	8001e00 <HAL_RCC_GetSysClockFreq+0x30>
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d003      	beq.n	8001e06 <HAL_RCC_GetSysClockFreq+0x36>
 8001dfe:	e027      	b.n	8001e50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e02:	613b      	str	r3, [r7, #16]
      break;
 8001e04:	e027      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	0c9b      	lsrs	r3, r3, #18
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e10:	5cd3      	ldrb	r3, [r2, r3]
 8001e12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d010      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	0c5b      	lsrs	r3, r3, #17
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	4a11      	ldr	r2, [pc, #68]	; (8001e70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e2a:	5cd3      	ldrb	r3, [r2, r3]
 8001e2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0d      	ldr	r2, [pc, #52]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
 8001e3e:	e004      	b.n	8001e4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e44:	fb02 f303 	mul.w	r3, r2, r3
 8001e48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	613b      	str	r3, [r7, #16]
      break;
 8001e4e:	e002      	b.n	8001e56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e50:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e52:	613b      	str	r3, [r7, #16]
      break;
 8001e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e56:	693b      	ldr	r3, [r7, #16]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bc80      	pop	{r7}
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	007a1200 	.word	0x007a1200
 8001e6c:	080037e4 	.word	0x080037e4
 8001e70:	080037f4 	.word	0x080037f4
 8001e74:	003d0900 	.word	0x003d0900

08001e78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e80:	4b0a      	ldr	r3, [pc, #40]	; (8001eac <RCC_Delay+0x34>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <RCC_Delay+0x38>)
 8001e86:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8a:	0a5b      	lsrs	r3, r3, #9
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e94:	bf00      	nop
  }
  while (Delay --);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1e5a      	subs	r2, r3, #1
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f9      	bne.n	8001e94 <RCC_Delay+0x1c>
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	3714      	adds	r7, #20
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	10624dd3 	.word	0x10624dd3

08001eb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d07d      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ed4:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d10d      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee0:	4b4c      	ldr	r3, [pc, #304]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee2:	69db      	ldr	r3, [r3, #28]
 8001ee4:	4a4b      	ldr	r2, [pc, #300]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eea:	61d3      	str	r3, [r2, #28]
 8001eec:	4b49      	ldr	r3, [pc, #292]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d118      	bne.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f08:	4b43      	ldr	r3, [pc, #268]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a42      	ldr	r2, [pc, #264]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f14:	f7fe fd1a 	bl	800094c <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f1a:	e008      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fd16 	bl	800094c <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e06d      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001f3a:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d02e      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d027      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f58:	4b2e      	ldr	r3, [pc, #184]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f5a:	6a1b      	ldr	r3, [r3, #32]
 8001f5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f62:	4b2e      	ldr	r3, [pc, #184]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f68:	4b2c      	ldr	r3, [pc, #176]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001f6e:	4a29      	ldr	r2, [pc, #164]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d014      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7e:	f7fe fce5 	bl	800094c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe fce1 	bl	800094c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e036      	b.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fa8:	4b1a      	ldr	r3, [pc, #104]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	4917      	ldr	r1, [pc, #92]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fba:	7dfb      	ldrb	r3, [r7, #23]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d105      	bne.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	4a13      	ldr	r2, [pc, #76]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d008      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	490b      	ldr	r1, [pc, #44]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0310 	and.w	r3, r3, #16
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d008      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	4904      	ldr	r1, [pc, #16]	; (8002014 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	42420440 	.word	0x42420440

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e041      	b.n	80020b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fad6 	bl	80005f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f000 fa74 	bl	800254c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d001      	beq.n	80020d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e03a      	b.n	800214e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f042 0201 	orr.w	r2, r2, #1
 80020ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a18      	ldr	r2, [pc, #96]	; (8002158 <HAL_TIM_Base_Start_IT+0x98>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d00e      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x58>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002102:	d009      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x58>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a14      	ldr	r2, [pc, #80]	; (800215c <HAL_TIM_Base_Start_IT+0x9c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_TIM_Base_Start_IT+0x58>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a13      	ldr	r2, [pc, #76]	; (8002160 <HAL_TIM_Base_Start_IT+0xa0>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d111      	bne.n	800213c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b06      	cmp	r3, #6
 8002128:	d010      	beq.n	800214c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 0201 	orr.w	r2, r2, #1
 8002138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800213a:	e007      	b.n	800214c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 0201 	orr.w	r2, r2, #1
 800214a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800

08002164 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b02      	cmp	r3, #2
 8002178:	d122      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b02      	cmp	r3, #2
 8002186:	d11b      	bne.n	80021c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0202 	mvn.w	r2, #2
 8002190:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f9b4 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f9a7 	bl	8002502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f9b6 	bl	8002526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	d122      	bne.n	8002214 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d11b      	bne.n	8002214 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f06f 0204 	mvn.w	r2, #4
 80021e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2202      	movs	r2, #2
 80021ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d003      	beq.n	8002202 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f98a 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002200:	e005      	b.n	800220e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f97d 	bl	8002502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f98c 	bl	8002526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b08      	cmp	r3, #8
 8002220:	d122      	bne.n	8002268 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	2b08      	cmp	r3, #8
 800222e:	d11b      	bne.n	8002268 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f06f 0208 	mvn.w	r2, #8
 8002238:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2204      	movs	r2, #4
 800223e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	69db      	ldr	r3, [r3, #28]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f960 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 8002254:	e005      	b.n	8002262 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f953 	bl	8002502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f962 	bl	8002526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0310 	and.w	r3, r3, #16
 8002272:	2b10      	cmp	r3, #16
 8002274:	d122      	bne.n	80022bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b10      	cmp	r3, #16
 8002282:	d11b      	bne.n	80022bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f06f 0210 	mvn.w	r2, #16
 800228c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2208      	movs	r2, #8
 8002292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f000 f936 	bl	8002514 <HAL_TIM_IC_CaptureCallback>
 80022a8:	e005      	b.n	80022b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f929 	bl	8002502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f938 	bl	8002526 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d10e      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	f003 0301 	and.w	r3, r3, #1
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d107      	bne.n	80022e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 0201 	mvn.w	r2, #1
 80022e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7fe f8d8 	bl	8000498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f2:	2b80      	cmp	r3, #128	; 0x80
 80022f4:	d10e      	bne.n	8002314 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d107      	bne.n	8002314 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800230c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fa7b 	bl	800280a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231e:	2b40      	cmp	r3, #64	; 0x40
 8002320:	d10e      	bne.n	8002340 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d107      	bne.n	8002340 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 f8fc 	bl	8002538 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b20      	cmp	r3, #32
 800234c:	d10e      	bne.n	800236c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0320 	and.w	r3, r3, #32
 8002358:	2b20      	cmp	r3, #32
 800235a:	d107      	bne.n	800236c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f06f 0220 	mvn.w	r2, #32
 8002364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f000 fa46 	bl	80027f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002388:	2b01      	cmp	r3, #1
 800238a:	d101      	bne.n	8002390 <HAL_TIM_ConfigClockSource+0x1c>
 800238c:	2302      	movs	r3, #2
 800238e:	e0b4      	b.n	80024fa <HAL_TIM_ConfigClockSource+0x186>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80023ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023c8:	d03e      	beq.n	8002448 <HAL_TIM_ConfigClockSource+0xd4>
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	f200 8087 	bhi.w	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 80023d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d6:	f000 8086 	beq.w	80024e6 <HAL_TIM_ConfigClockSource+0x172>
 80023da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023de:	d87f      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e0:	2b70      	cmp	r3, #112	; 0x70
 80023e2:	d01a      	beq.n	800241a <HAL_TIM_ConfigClockSource+0xa6>
 80023e4:	2b70      	cmp	r3, #112	; 0x70
 80023e6:	d87b      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 80023e8:	2b60      	cmp	r3, #96	; 0x60
 80023ea:	d050      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x11a>
 80023ec:	2b60      	cmp	r3, #96	; 0x60
 80023ee:	d877      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f0:	2b50      	cmp	r3, #80	; 0x50
 80023f2:	d03c      	beq.n	800246e <HAL_TIM_ConfigClockSource+0xfa>
 80023f4:	2b50      	cmp	r3, #80	; 0x50
 80023f6:	d873      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d058      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x13a>
 80023fc:	2b40      	cmp	r3, #64	; 0x40
 80023fe:	d86f      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002400:	2b30      	cmp	r3, #48	; 0x30
 8002402:	d064      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x15a>
 8002404:	2b30      	cmp	r3, #48	; 0x30
 8002406:	d86b      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002408:	2b20      	cmp	r3, #32
 800240a:	d060      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x15a>
 800240c:	2b20      	cmp	r3, #32
 800240e:	d867      	bhi.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
 8002410:	2b00      	cmp	r3, #0
 8002412:	d05c      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x15a>
 8002414:	2b10      	cmp	r3, #16
 8002416:	d05a      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x15a>
 8002418:	e062      	b.n	80024e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f000 f968 	bl	80026fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800243c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	609a      	str	r2, [r3, #8]
      break;
 8002446:	e04f      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	6899      	ldr	r1, [r3, #8]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685a      	ldr	r2, [r3, #4]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	f000 f951 	bl	80026fe <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	689a      	ldr	r2, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800246a:	609a      	str	r2, [r3, #8]
      break;
 800246c:	e03c      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6818      	ldr	r0, [r3, #0]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	461a      	mov	r2, r3
 800247c:	f000 f8c8 	bl	8002610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2150      	movs	r1, #80	; 0x50
 8002486:	4618      	mov	r0, r3
 8002488:	f000 f91f 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 800248c:	e02c      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	461a      	mov	r2, r3
 800249c:	f000 f8e6 	bl	800266c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2160      	movs	r1, #96	; 0x60
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f90f 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 80024ac:	e01c      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	461a      	mov	r2, r3
 80024bc:	f000 f8a8 	bl	8002610 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2140      	movs	r1, #64	; 0x40
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f8ff 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 80024cc:	e00c      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	4610      	mov	r0, r2
 80024da:	f000 f8f6 	bl	80026ca <TIM_ITRx_SetConfig>
      break;
 80024de:	e003      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      break;
 80024e4:	e000      	b.n	80024e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2200      	movs	r2, #0
 80024f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	bc80      	pop	{r7}
 8002512:	4770      	bx	lr

08002514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr

08002538 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	bc80      	pop	{r7}
 8002548:	4770      	bx	lr
	...

0800254c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d00b      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800256a:	d007      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a26      	ldr	r2, [pc, #152]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d003      	beq.n	800257c <TIM_Base_SetConfig+0x30>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	4a25      	ldr	r2, [pc, #148]	; (800260c <TIM_Base_SetConfig+0xc0>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d108      	bne.n	800258e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4313      	orrs	r3, r2
 800258c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00b      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d007      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a19      	ldr	r2, [pc, #100]	; (8002608 <TIM_Base_SetConfig+0xbc>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d003      	beq.n	80025ae <TIM_Base_SetConfig+0x62>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a18      	ldr	r2, [pc, #96]	; (800260c <TIM_Base_SetConfig+0xc0>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d108      	bne.n	80025c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	68fa      	ldr	r2, [r7, #12]
 80025bc:	4313      	orrs	r3, r2
 80025be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a07      	ldr	r2, [pc, #28]	; (8002604 <TIM_Base_SetConfig+0xb8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d103      	bne.n	80025f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691a      	ldr	r2, [r3, #16]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	615a      	str	r2, [r3, #20]
}
 80025fa:	bf00      	nop
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40012c00 	.word	0x40012c00
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800

08002610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002610:	b480      	push	{r7}
 8002612:	b087      	sub	sp, #28
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	f023 0201 	bic.w	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800263a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f023 030a 	bic.w	r3, r3, #10
 800264c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	4313      	orrs	r3, r2
 8002654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	621a      	str	r2, [r3, #32]
}
 8002662:	bf00      	nop
 8002664:	371c      	adds	r7, #28
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	031b      	lsls	r3, r3, #12
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	011b      	lsls	r3, r3, #4
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	697a      	ldr	r2, [r7, #20]
 80026be:	621a      	str	r2, [r3, #32]
}
 80026c0:	bf00      	nop
 80026c2:	371c      	adds	r7, #28
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b085      	sub	sp, #20
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f043 0307 	orr.w	r3, r3, #7
 80026ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	609a      	str	r2, [r3, #8]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bc80      	pop	{r7}
 80026fc:	4770      	bx	lr

080026fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026fe:	b480      	push	{r7}
 8002700:	b087      	sub	sp, #28
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	021a      	lsls	r2, r3, #8
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	431a      	orrs	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	4313      	orrs	r3, r2
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	4313      	orrs	r3, r2
 800272a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	609a      	str	r2, [r3, #8]
}
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	bc80      	pop	{r7}
 800273a:	4770      	bx	lr

0800273c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800274c:	2b01      	cmp	r3, #1
 800274e:	d101      	bne.n	8002754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002750:	2302      	movs	r3, #2
 8002752:	e046      	b.n	80027e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a16      	ldr	r2, [pc, #88]	; (80027ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00e      	beq.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a0:	d009      	beq.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d004      	beq.n	80027b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a10      	ldr	r2, [pc, #64]	; (80027f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d10c      	bne.n	80027d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80027bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr
 80027ec:	40012c00 	.word	0x40012c00
 80027f0:	40000400 	.word	0x40000400
 80027f4:	40000800 	.word	0x40000800

080027f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr

0800280a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	bc80      	pop	{r7}
 800281a:	4770      	bx	lr

0800281c <__errno>:
 800281c:	4b01      	ldr	r3, [pc, #4]	; (8002824 <__errno+0x8>)
 800281e:	6818      	ldr	r0, [r3, #0]
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	2000000c 	.word	0x2000000c

08002828 <__libc_init_array>:
 8002828:	b570      	push	{r4, r5, r6, lr}
 800282a:	2600      	movs	r6, #0
 800282c:	4d0c      	ldr	r5, [pc, #48]	; (8002860 <__libc_init_array+0x38>)
 800282e:	4c0d      	ldr	r4, [pc, #52]	; (8002864 <__libc_init_array+0x3c>)
 8002830:	1b64      	subs	r4, r4, r5
 8002832:	10a4      	asrs	r4, r4, #2
 8002834:	42a6      	cmp	r6, r4
 8002836:	d109      	bne.n	800284c <__libc_init_array+0x24>
 8002838:	f000 ffb6 	bl	80037a8 <_init>
 800283c:	2600      	movs	r6, #0
 800283e:	4d0a      	ldr	r5, [pc, #40]	; (8002868 <__libc_init_array+0x40>)
 8002840:	4c0a      	ldr	r4, [pc, #40]	; (800286c <__libc_init_array+0x44>)
 8002842:	1b64      	subs	r4, r4, r5
 8002844:	10a4      	asrs	r4, r4, #2
 8002846:	42a6      	cmp	r6, r4
 8002848:	d105      	bne.n	8002856 <__libc_init_array+0x2e>
 800284a:	bd70      	pop	{r4, r5, r6, pc}
 800284c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002850:	4798      	blx	r3
 8002852:	3601      	adds	r6, #1
 8002854:	e7ee      	b.n	8002834 <__libc_init_array+0xc>
 8002856:	f855 3b04 	ldr.w	r3, [r5], #4
 800285a:	4798      	blx	r3
 800285c:	3601      	adds	r6, #1
 800285e:	e7f2      	b.n	8002846 <__libc_init_array+0x1e>
 8002860:	08003890 	.word	0x08003890
 8002864:	08003890 	.word	0x08003890
 8002868:	08003890 	.word	0x08003890
 800286c:	08003894 	.word	0x08003894

08002870 <memset>:
 8002870:	4603      	mov	r3, r0
 8002872:	4402      	add	r2, r0
 8002874:	4293      	cmp	r3, r2
 8002876:	d100      	bne.n	800287a <memset+0xa>
 8002878:	4770      	bx	lr
 800287a:	f803 1b01 	strb.w	r1, [r3], #1
 800287e:	e7f9      	b.n	8002874 <memset+0x4>

08002880 <iprintf>:
 8002880:	b40f      	push	{r0, r1, r2, r3}
 8002882:	4b0a      	ldr	r3, [pc, #40]	; (80028ac <iprintf+0x2c>)
 8002884:	b513      	push	{r0, r1, r4, lr}
 8002886:	681c      	ldr	r4, [r3, #0]
 8002888:	b124      	cbz	r4, 8002894 <iprintf+0x14>
 800288a:	69a3      	ldr	r3, [r4, #24]
 800288c:	b913      	cbnz	r3, 8002894 <iprintf+0x14>
 800288e:	4620      	mov	r0, r4
 8002890:	f000 f866 	bl	8002960 <__sinit>
 8002894:	ab05      	add	r3, sp, #20
 8002896:	4620      	mov	r0, r4
 8002898:	9a04      	ldr	r2, [sp, #16]
 800289a:	68a1      	ldr	r1, [r4, #8]
 800289c:	9301      	str	r3, [sp, #4]
 800289e:	f000 f9bb 	bl	8002c18 <_vfiprintf_r>
 80028a2:	b002      	add	sp, #8
 80028a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028a8:	b004      	add	sp, #16
 80028aa:	4770      	bx	lr
 80028ac:	2000000c 	.word	0x2000000c

080028b0 <std>:
 80028b0:	2300      	movs	r3, #0
 80028b2:	b510      	push	{r4, lr}
 80028b4:	4604      	mov	r4, r0
 80028b6:	e9c0 3300 	strd	r3, r3, [r0]
 80028ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80028be:	6083      	str	r3, [r0, #8]
 80028c0:	8181      	strh	r1, [r0, #12]
 80028c2:	6643      	str	r3, [r0, #100]	; 0x64
 80028c4:	81c2      	strh	r2, [r0, #14]
 80028c6:	6183      	str	r3, [r0, #24]
 80028c8:	4619      	mov	r1, r3
 80028ca:	2208      	movs	r2, #8
 80028cc:	305c      	adds	r0, #92	; 0x5c
 80028ce:	f7ff ffcf 	bl	8002870 <memset>
 80028d2:	4b05      	ldr	r3, [pc, #20]	; (80028e8 <std+0x38>)
 80028d4:	6224      	str	r4, [r4, #32]
 80028d6:	6263      	str	r3, [r4, #36]	; 0x24
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <std+0x3c>)
 80028da:	62a3      	str	r3, [r4, #40]	; 0x28
 80028dc:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <std+0x40>)
 80028de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80028e0:	4b04      	ldr	r3, [pc, #16]	; (80028f4 <std+0x44>)
 80028e2:	6323      	str	r3, [r4, #48]	; 0x30
 80028e4:	bd10      	pop	{r4, pc}
 80028e6:	bf00      	nop
 80028e8:	080031c5 	.word	0x080031c5
 80028ec:	080031e7 	.word	0x080031e7
 80028f0:	0800321f 	.word	0x0800321f
 80028f4:	08003243 	.word	0x08003243

080028f8 <_cleanup_r>:
 80028f8:	4901      	ldr	r1, [pc, #4]	; (8002900 <_cleanup_r+0x8>)
 80028fa:	f000 b8af 	b.w	8002a5c <_fwalk_reent>
 80028fe:	bf00      	nop
 8002900:	08003515 	.word	0x08003515

08002904 <__sfmoreglue>:
 8002904:	2268      	movs	r2, #104	; 0x68
 8002906:	b570      	push	{r4, r5, r6, lr}
 8002908:	1e4d      	subs	r5, r1, #1
 800290a:	4355      	muls	r5, r2
 800290c:	460e      	mov	r6, r1
 800290e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002912:	f000 f8e5 	bl	8002ae0 <_malloc_r>
 8002916:	4604      	mov	r4, r0
 8002918:	b140      	cbz	r0, 800292c <__sfmoreglue+0x28>
 800291a:	2100      	movs	r1, #0
 800291c:	e9c0 1600 	strd	r1, r6, [r0]
 8002920:	300c      	adds	r0, #12
 8002922:	60a0      	str	r0, [r4, #8]
 8002924:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002928:	f7ff ffa2 	bl	8002870 <memset>
 800292c:	4620      	mov	r0, r4
 800292e:	bd70      	pop	{r4, r5, r6, pc}

08002930 <__sfp_lock_acquire>:
 8002930:	4801      	ldr	r0, [pc, #4]	; (8002938 <__sfp_lock_acquire+0x8>)
 8002932:	f000 b8b3 	b.w	8002a9c <__retarget_lock_acquire_recursive>
 8002936:	bf00      	nop
 8002938:	20000179 	.word	0x20000179

0800293c <__sfp_lock_release>:
 800293c:	4801      	ldr	r0, [pc, #4]	; (8002944 <__sfp_lock_release+0x8>)
 800293e:	f000 b8ae 	b.w	8002a9e <__retarget_lock_release_recursive>
 8002942:	bf00      	nop
 8002944:	20000179 	.word	0x20000179

08002948 <__sinit_lock_acquire>:
 8002948:	4801      	ldr	r0, [pc, #4]	; (8002950 <__sinit_lock_acquire+0x8>)
 800294a:	f000 b8a7 	b.w	8002a9c <__retarget_lock_acquire_recursive>
 800294e:	bf00      	nop
 8002950:	2000017a 	.word	0x2000017a

08002954 <__sinit_lock_release>:
 8002954:	4801      	ldr	r0, [pc, #4]	; (800295c <__sinit_lock_release+0x8>)
 8002956:	f000 b8a2 	b.w	8002a9e <__retarget_lock_release_recursive>
 800295a:	bf00      	nop
 800295c:	2000017a 	.word	0x2000017a

08002960 <__sinit>:
 8002960:	b510      	push	{r4, lr}
 8002962:	4604      	mov	r4, r0
 8002964:	f7ff fff0 	bl	8002948 <__sinit_lock_acquire>
 8002968:	69a3      	ldr	r3, [r4, #24]
 800296a:	b11b      	cbz	r3, 8002974 <__sinit+0x14>
 800296c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002970:	f7ff bff0 	b.w	8002954 <__sinit_lock_release>
 8002974:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002978:	6523      	str	r3, [r4, #80]	; 0x50
 800297a:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <__sinit+0x68>)
 800297c:	4a13      	ldr	r2, [pc, #76]	; (80029cc <__sinit+0x6c>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	62a2      	str	r2, [r4, #40]	; 0x28
 8002982:	42a3      	cmp	r3, r4
 8002984:	bf08      	it	eq
 8002986:	2301      	moveq	r3, #1
 8002988:	4620      	mov	r0, r4
 800298a:	bf08      	it	eq
 800298c:	61a3      	streq	r3, [r4, #24]
 800298e:	f000 f81f 	bl	80029d0 <__sfp>
 8002992:	6060      	str	r0, [r4, #4]
 8002994:	4620      	mov	r0, r4
 8002996:	f000 f81b 	bl	80029d0 <__sfp>
 800299a:	60a0      	str	r0, [r4, #8]
 800299c:	4620      	mov	r0, r4
 800299e:	f000 f817 	bl	80029d0 <__sfp>
 80029a2:	2200      	movs	r2, #0
 80029a4:	2104      	movs	r1, #4
 80029a6:	60e0      	str	r0, [r4, #12]
 80029a8:	6860      	ldr	r0, [r4, #4]
 80029aa:	f7ff ff81 	bl	80028b0 <std>
 80029ae:	2201      	movs	r2, #1
 80029b0:	2109      	movs	r1, #9
 80029b2:	68a0      	ldr	r0, [r4, #8]
 80029b4:	f7ff ff7c 	bl	80028b0 <std>
 80029b8:	2202      	movs	r2, #2
 80029ba:	2112      	movs	r1, #18
 80029bc:	68e0      	ldr	r0, [r4, #12]
 80029be:	f7ff ff77 	bl	80028b0 <std>
 80029c2:	2301      	movs	r3, #1
 80029c4:	61a3      	str	r3, [r4, #24]
 80029c6:	e7d1      	b.n	800296c <__sinit+0xc>
 80029c8:	080037f8 	.word	0x080037f8
 80029cc:	080028f9 	.word	0x080028f9

080029d0 <__sfp>:
 80029d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d2:	4607      	mov	r7, r0
 80029d4:	f7ff ffac 	bl	8002930 <__sfp_lock_acquire>
 80029d8:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <__sfp+0x84>)
 80029da:	681e      	ldr	r6, [r3, #0]
 80029dc:	69b3      	ldr	r3, [r6, #24]
 80029de:	b913      	cbnz	r3, 80029e6 <__sfp+0x16>
 80029e0:	4630      	mov	r0, r6
 80029e2:	f7ff ffbd 	bl	8002960 <__sinit>
 80029e6:	3648      	adds	r6, #72	; 0x48
 80029e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80029ec:	3b01      	subs	r3, #1
 80029ee:	d503      	bpl.n	80029f8 <__sfp+0x28>
 80029f0:	6833      	ldr	r3, [r6, #0]
 80029f2:	b30b      	cbz	r3, 8002a38 <__sfp+0x68>
 80029f4:	6836      	ldr	r6, [r6, #0]
 80029f6:	e7f7      	b.n	80029e8 <__sfp+0x18>
 80029f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80029fc:	b9d5      	cbnz	r5, 8002a34 <__sfp+0x64>
 80029fe:	4b16      	ldr	r3, [pc, #88]	; (8002a58 <__sfp+0x88>)
 8002a00:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002a04:	60e3      	str	r3, [r4, #12]
 8002a06:	6665      	str	r5, [r4, #100]	; 0x64
 8002a08:	f000 f847 	bl	8002a9a <__retarget_lock_init_recursive>
 8002a0c:	f7ff ff96 	bl	800293c <__sfp_lock_release>
 8002a10:	2208      	movs	r2, #8
 8002a12:	4629      	mov	r1, r5
 8002a14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002a18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002a1c:	6025      	str	r5, [r4, #0]
 8002a1e:	61a5      	str	r5, [r4, #24]
 8002a20:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002a24:	f7ff ff24 	bl	8002870 <memset>
 8002a28:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002a2c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002a30:	4620      	mov	r0, r4
 8002a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a34:	3468      	adds	r4, #104	; 0x68
 8002a36:	e7d9      	b.n	80029ec <__sfp+0x1c>
 8002a38:	2104      	movs	r1, #4
 8002a3a:	4638      	mov	r0, r7
 8002a3c:	f7ff ff62 	bl	8002904 <__sfmoreglue>
 8002a40:	4604      	mov	r4, r0
 8002a42:	6030      	str	r0, [r6, #0]
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d1d5      	bne.n	80029f4 <__sfp+0x24>
 8002a48:	f7ff ff78 	bl	800293c <__sfp_lock_release>
 8002a4c:	230c      	movs	r3, #12
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	e7ee      	b.n	8002a30 <__sfp+0x60>
 8002a52:	bf00      	nop
 8002a54:	080037f8 	.word	0x080037f8
 8002a58:	ffff0001 	.word	0xffff0001

08002a5c <_fwalk_reent>:
 8002a5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002a60:	4606      	mov	r6, r0
 8002a62:	4688      	mov	r8, r1
 8002a64:	2700      	movs	r7, #0
 8002a66:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002a6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002a6e:	f1b9 0901 	subs.w	r9, r9, #1
 8002a72:	d505      	bpl.n	8002a80 <_fwalk_reent+0x24>
 8002a74:	6824      	ldr	r4, [r4, #0]
 8002a76:	2c00      	cmp	r4, #0
 8002a78:	d1f7      	bne.n	8002a6a <_fwalk_reent+0xe>
 8002a7a:	4638      	mov	r0, r7
 8002a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002a80:	89ab      	ldrh	r3, [r5, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d907      	bls.n	8002a96 <_fwalk_reent+0x3a>
 8002a86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	d003      	beq.n	8002a96 <_fwalk_reent+0x3a>
 8002a8e:	4629      	mov	r1, r5
 8002a90:	4630      	mov	r0, r6
 8002a92:	47c0      	blx	r8
 8002a94:	4307      	orrs	r7, r0
 8002a96:	3568      	adds	r5, #104	; 0x68
 8002a98:	e7e9      	b.n	8002a6e <_fwalk_reent+0x12>

08002a9a <__retarget_lock_init_recursive>:
 8002a9a:	4770      	bx	lr

08002a9c <__retarget_lock_acquire_recursive>:
 8002a9c:	4770      	bx	lr

08002a9e <__retarget_lock_release_recursive>:
 8002a9e:	4770      	bx	lr

08002aa0 <sbrk_aligned>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	4e0e      	ldr	r6, [pc, #56]	; (8002adc <sbrk_aligned+0x3c>)
 8002aa4:	460c      	mov	r4, r1
 8002aa6:	6831      	ldr	r1, [r6, #0]
 8002aa8:	4605      	mov	r5, r0
 8002aaa:	b911      	cbnz	r1, 8002ab2 <sbrk_aligned+0x12>
 8002aac:	f000 fb7a 	bl	80031a4 <_sbrk_r>
 8002ab0:	6030      	str	r0, [r6, #0]
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	4628      	mov	r0, r5
 8002ab6:	f000 fb75 	bl	80031a4 <_sbrk_r>
 8002aba:	1c43      	adds	r3, r0, #1
 8002abc:	d00a      	beq.n	8002ad4 <sbrk_aligned+0x34>
 8002abe:	1cc4      	adds	r4, r0, #3
 8002ac0:	f024 0403 	bic.w	r4, r4, #3
 8002ac4:	42a0      	cmp	r0, r4
 8002ac6:	d007      	beq.n	8002ad8 <sbrk_aligned+0x38>
 8002ac8:	1a21      	subs	r1, r4, r0
 8002aca:	4628      	mov	r0, r5
 8002acc:	f000 fb6a 	bl	80031a4 <_sbrk_r>
 8002ad0:	3001      	adds	r0, #1
 8002ad2:	d101      	bne.n	8002ad8 <sbrk_aligned+0x38>
 8002ad4:	f04f 34ff 	mov.w	r4, #4294967295
 8002ad8:	4620      	mov	r0, r4
 8002ada:	bd70      	pop	{r4, r5, r6, pc}
 8002adc:	20000180 	.word	0x20000180

08002ae0 <_malloc_r>:
 8002ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ae4:	1ccd      	adds	r5, r1, #3
 8002ae6:	f025 0503 	bic.w	r5, r5, #3
 8002aea:	3508      	adds	r5, #8
 8002aec:	2d0c      	cmp	r5, #12
 8002aee:	bf38      	it	cc
 8002af0:	250c      	movcc	r5, #12
 8002af2:	2d00      	cmp	r5, #0
 8002af4:	4607      	mov	r7, r0
 8002af6:	db01      	blt.n	8002afc <_malloc_r+0x1c>
 8002af8:	42a9      	cmp	r1, r5
 8002afa:	d905      	bls.n	8002b08 <_malloc_r+0x28>
 8002afc:	230c      	movs	r3, #12
 8002afe:	2600      	movs	r6, #0
 8002b00:	603b      	str	r3, [r7, #0]
 8002b02:	4630      	mov	r0, r6
 8002b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b08:	4e2e      	ldr	r6, [pc, #184]	; (8002bc4 <_malloc_r+0xe4>)
 8002b0a:	f000 fdc5 	bl	8003698 <__malloc_lock>
 8002b0e:	6833      	ldr	r3, [r6, #0]
 8002b10:	461c      	mov	r4, r3
 8002b12:	bb34      	cbnz	r4, 8002b62 <_malloc_r+0x82>
 8002b14:	4629      	mov	r1, r5
 8002b16:	4638      	mov	r0, r7
 8002b18:	f7ff ffc2 	bl	8002aa0 <sbrk_aligned>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	4604      	mov	r4, r0
 8002b20:	d14d      	bne.n	8002bbe <_malloc_r+0xde>
 8002b22:	6834      	ldr	r4, [r6, #0]
 8002b24:	4626      	mov	r6, r4
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d140      	bne.n	8002bac <_malloc_r+0xcc>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	4631      	mov	r1, r6
 8002b2e:	4638      	mov	r0, r7
 8002b30:	eb04 0803 	add.w	r8, r4, r3
 8002b34:	f000 fb36 	bl	80031a4 <_sbrk_r>
 8002b38:	4580      	cmp	r8, r0
 8002b3a:	d13a      	bne.n	8002bb2 <_malloc_r+0xd2>
 8002b3c:	6821      	ldr	r1, [r4, #0]
 8002b3e:	3503      	adds	r5, #3
 8002b40:	1a6d      	subs	r5, r5, r1
 8002b42:	f025 0503 	bic.w	r5, r5, #3
 8002b46:	3508      	adds	r5, #8
 8002b48:	2d0c      	cmp	r5, #12
 8002b4a:	bf38      	it	cc
 8002b4c:	250c      	movcc	r5, #12
 8002b4e:	4638      	mov	r0, r7
 8002b50:	4629      	mov	r1, r5
 8002b52:	f7ff ffa5 	bl	8002aa0 <sbrk_aligned>
 8002b56:	3001      	adds	r0, #1
 8002b58:	d02b      	beq.n	8002bb2 <_malloc_r+0xd2>
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	442b      	add	r3, r5
 8002b5e:	6023      	str	r3, [r4, #0]
 8002b60:	e00e      	b.n	8002b80 <_malloc_r+0xa0>
 8002b62:	6822      	ldr	r2, [r4, #0]
 8002b64:	1b52      	subs	r2, r2, r5
 8002b66:	d41e      	bmi.n	8002ba6 <_malloc_r+0xc6>
 8002b68:	2a0b      	cmp	r2, #11
 8002b6a:	d916      	bls.n	8002b9a <_malloc_r+0xba>
 8002b6c:	1961      	adds	r1, r4, r5
 8002b6e:	42a3      	cmp	r3, r4
 8002b70:	6025      	str	r5, [r4, #0]
 8002b72:	bf18      	it	ne
 8002b74:	6059      	strne	r1, [r3, #4]
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	bf08      	it	eq
 8002b7a:	6031      	streq	r1, [r6, #0]
 8002b7c:	5162      	str	r2, [r4, r5]
 8002b7e:	604b      	str	r3, [r1, #4]
 8002b80:	4638      	mov	r0, r7
 8002b82:	f104 060b 	add.w	r6, r4, #11
 8002b86:	f000 fd8d 	bl	80036a4 <__malloc_unlock>
 8002b8a:	f026 0607 	bic.w	r6, r6, #7
 8002b8e:	1d23      	adds	r3, r4, #4
 8002b90:	1af2      	subs	r2, r6, r3
 8002b92:	d0b6      	beq.n	8002b02 <_malloc_r+0x22>
 8002b94:	1b9b      	subs	r3, r3, r6
 8002b96:	50a3      	str	r3, [r4, r2]
 8002b98:	e7b3      	b.n	8002b02 <_malloc_r+0x22>
 8002b9a:	6862      	ldr	r2, [r4, #4]
 8002b9c:	42a3      	cmp	r3, r4
 8002b9e:	bf0c      	ite	eq
 8002ba0:	6032      	streq	r2, [r6, #0]
 8002ba2:	605a      	strne	r2, [r3, #4]
 8002ba4:	e7ec      	b.n	8002b80 <_malloc_r+0xa0>
 8002ba6:	4623      	mov	r3, r4
 8002ba8:	6864      	ldr	r4, [r4, #4]
 8002baa:	e7b2      	b.n	8002b12 <_malloc_r+0x32>
 8002bac:	4634      	mov	r4, r6
 8002bae:	6876      	ldr	r6, [r6, #4]
 8002bb0:	e7b9      	b.n	8002b26 <_malloc_r+0x46>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	4638      	mov	r0, r7
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	f000 fd74 	bl	80036a4 <__malloc_unlock>
 8002bbc:	e7a1      	b.n	8002b02 <_malloc_r+0x22>
 8002bbe:	6025      	str	r5, [r4, #0]
 8002bc0:	e7de      	b.n	8002b80 <_malloc_r+0xa0>
 8002bc2:	bf00      	nop
 8002bc4:	2000017c 	.word	0x2000017c

08002bc8 <__sfputc_r>:
 8002bc8:	6893      	ldr	r3, [r2, #8]
 8002bca:	b410      	push	{r4}
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	6093      	str	r3, [r2, #8]
 8002bd2:	da07      	bge.n	8002be4 <__sfputc_r+0x1c>
 8002bd4:	6994      	ldr	r4, [r2, #24]
 8002bd6:	42a3      	cmp	r3, r4
 8002bd8:	db01      	blt.n	8002bde <__sfputc_r+0x16>
 8002bda:	290a      	cmp	r1, #10
 8002bdc:	d102      	bne.n	8002be4 <__sfputc_r+0x1c>
 8002bde:	bc10      	pop	{r4}
 8002be0:	f000 bb34 	b.w	800324c <__swbuf_r>
 8002be4:	6813      	ldr	r3, [r2, #0]
 8002be6:	1c58      	adds	r0, r3, #1
 8002be8:	6010      	str	r0, [r2, #0]
 8002bea:	7019      	strb	r1, [r3, #0]
 8002bec:	4608      	mov	r0, r1
 8002bee:	bc10      	pop	{r4}
 8002bf0:	4770      	bx	lr

08002bf2 <__sfputs_r>:
 8002bf2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf4:	4606      	mov	r6, r0
 8002bf6:	460f      	mov	r7, r1
 8002bf8:	4614      	mov	r4, r2
 8002bfa:	18d5      	adds	r5, r2, r3
 8002bfc:	42ac      	cmp	r4, r5
 8002bfe:	d101      	bne.n	8002c04 <__sfputs_r+0x12>
 8002c00:	2000      	movs	r0, #0
 8002c02:	e007      	b.n	8002c14 <__sfputs_r+0x22>
 8002c04:	463a      	mov	r2, r7
 8002c06:	4630      	mov	r0, r6
 8002c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c0c:	f7ff ffdc 	bl	8002bc8 <__sfputc_r>
 8002c10:	1c43      	adds	r3, r0, #1
 8002c12:	d1f3      	bne.n	8002bfc <__sfputs_r+0xa>
 8002c14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c18 <_vfiprintf_r>:
 8002c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c1c:	460d      	mov	r5, r1
 8002c1e:	4614      	mov	r4, r2
 8002c20:	4698      	mov	r8, r3
 8002c22:	4606      	mov	r6, r0
 8002c24:	b09d      	sub	sp, #116	; 0x74
 8002c26:	b118      	cbz	r0, 8002c30 <_vfiprintf_r+0x18>
 8002c28:	6983      	ldr	r3, [r0, #24]
 8002c2a:	b90b      	cbnz	r3, 8002c30 <_vfiprintf_r+0x18>
 8002c2c:	f7ff fe98 	bl	8002960 <__sinit>
 8002c30:	4b89      	ldr	r3, [pc, #548]	; (8002e58 <_vfiprintf_r+0x240>)
 8002c32:	429d      	cmp	r5, r3
 8002c34:	d11b      	bne.n	8002c6e <_vfiprintf_r+0x56>
 8002c36:	6875      	ldr	r5, [r6, #4]
 8002c38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c3a:	07d9      	lsls	r1, r3, #31
 8002c3c:	d405      	bmi.n	8002c4a <_vfiprintf_r+0x32>
 8002c3e:	89ab      	ldrh	r3, [r5, #12]
 8002c40:	059a      	lsls	r2, r3, #22
 8002c42:	d402      	bmi.n	8002c4a <_vfiprintf_r+0x32>
 8002c44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c46:	f7ff ff29 	bl	8002a9c <__retarget_lock_acquire_recursive>
 8002c4a:	89ab      	ldrh	r3, [r5, #12]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	d501      	bpl.n	8002c54 <_vfiprintf_r+0x3c>
 8002c50:	692b      	ldr	r3, [r5, #16]
 8002c52:	b9eb      	cbnz	r3, 8002c90 <_vfiprintf_r+0x78>
 8002c54:	4629      	mov	r1, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	f000 fb5c 	bl	8003314 <__swsetup_r>
 8002c5c:	b1c0      	cbz	r0, 8002c90 <_vfiprintf_r+0x78>
 8002c5e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c60:	07dc      	lsls	r4, r3, #31
 8002c62:	d50e      	bpl.n	8002c82 <_vfiprintf_r+0x6a>
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	b01d      	add	sp, #116	; 0x74
 8002c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6e:	4b7b      	ldr	r3, [pc, #492]	; (8002e5c <_vfiprintf_r+0x244>)
 8002c70:	429d      	cmp	r5, r3
 8002c72:	d101      	bne.n	8002c78 <_vfiprintf_r+0x60>
 8002c74:	68b5      	ldr	r5, [r6, #8]
 8002c76:	e7df      	b.n	8002c38 <_vfiprintf_r+0x20>
 8002c78:	4b79      	ldr	r3, [pc, #484]	; (8002e60 <_vfiprintf_r+0x248>)
 8002c7a:	429d      	cmp	r5, r3
 8002c7c:	bf08      	it	eq
 8002c7e:	68f5      	ldreq	r5, [r6, #12]
 8002c80:	e7da      	b.n	8002c38 <_vfiprintf_r+0x20>
 8002c82:	89ab      	ldrh	r3, [r5, #12]
 8002c84:	0598      	lsls	r0, r3, #22
 8002c86:	d4ed      	bmi.n	8002c64 <_vfiprintf_r+0x4c>
 8002c88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c8a:	f7ff ff08 	bl	8002a9e <__retarget_lock_release_recursive>
 8002c8e:	e7e9      	b.n	8002c64 <_vfiprintf_r+0x4c>
 8002c90:	2300      	movs	r3, #0
 8002c92:	9309      	str	r3, [sp, #36]	; 0x24
 8002c94:	2320      	movs	r3, #32
 8002c96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c9a:	2330      	movs	r3, #48	; 0x30
 8002c9c:	f04f 0901 	mov.w	r9, #1
 8002ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8002ca4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002e64 <_vfiprintf_r+0x24c>
 8002ca8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002cac:	4623      	mov	r3, r4
 8002cae:	469a      	mov	sl, r3
 8002cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cb4:	b10a      	cbz	r2, 8002cba <_vfiprintf_r+0xa2>
 8002cb6:	2a25      	cmp	r2, #37	; 0x25
 8002cb8:	d1f9      	bne.n	8002cae <_vfiprintf_r+0x96>
 8002cba:	ebba 0b04 	subs.w	fp, sl, r4
 8002cbe:	d00b      	beq.n	8002cd8 <_vfiprintf_r+0xc0>
 8002cc0:	465b      	mov	r3, fp
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4629      	mov	r1, r5
 8002cc6:	4630      	mov	r0, r6
 8002cc8:	f7ff ff93 	bl	8002bf2 <__sfputs_r>
 8002ccc:	3001      	adds	r0, #1
 8002cce:	f000 80aa 	beq.w	8002e26 <_vfiprintf_r+0x20e>
 8002cd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cd4:	445a      	add	r2, fp
 8002cd6:	9209      	str	r2, [sp, #36]	; 0x24
 8002cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a2 	beq.w	8002e26 <_vfiprintf_r+0x20e>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cec:	f10a 0a01 	add.w	sl, sl, #1
 8002cf0:	9304      	str	r3, [sp, #16]
 8002cf2:	9307      	str	r3, [sp, #28]
 8002cf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cf8:	931a      	str	r3, [sp, #104]	; 0x68
 8002cfa:	4654      	mov	r4, sl
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d02:	4858      	ldr	r0, [pc, #352]	; (8002e64 <_vfiprintf_r+0x24c>)
 8002d04:	f000 fcba 	bl	800367c <memchr>
 8002d08:	9a04      	ldr	r2, [sp, #16]
 8002d0a:	b9d8      	cbnz	r0, 8002d44 <_vfiprintf_r+0x12c>
 8002d0c:	06d1      	lsls	r1, r2, #27
 8002d0e:	bf44      	itt	mi
 8002d10:	2320      	movmi	r3, #32
 8002d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d16:	0713      	lsls	r3, r2, #28
 8002d18:	bf44      	itt	mi
 8002d1a:	232b      	movmi	r3, #43	; 0x2b
 8002d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d20:	f89a 3000 	ldrb.w	r3, [sl]
 8002d24:	2b2a      	cmp	r3, #42	; 0x2a
 8002d26:	d015      	beq.n	8002d54 <_vfiprintf_r+0x13c>
 8002d28:	4654      	mov	r4, sl
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	f04f 0c0a 	mov.w	ip, #10
 8002d30:	9a07      	ldr	r2, [sp, #28]
 8002d32:	4621      	mov	r1, r4
 8002d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d38:	3b30      	subs	r3, #48	; 0x30
 8002d3a:	2b09      	cmp	r3, #9
 8002d3c:	d94e      	bls.n	8002ddc <_vfiprintf_r+0x1c4>
 8002d3e:	b1b0      	cbz	r0, 8002d6e <_vfiprintf_r+0x156>
 8002d40:	9207      	str	r2, [sp, #28]
 8002d42:	e014      	b.n	8002d6e <_vfiprintf_r+0x156>
 8002d44:	eba0 0308 	sub.w	r3, r0, r8
 8002d48:	fa09 f303 	lsl.w	r3, r9, r3
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	46a2      	mov	sl, r4
 8002d50:	9304      	str	r3, [sp, #16]
 8002d52:	e7d2      	b.n	8002cfa <_vfiprintf_r+0xe2>
 8002d54:	9b03      	ldr	r3, [sp, #12]
 8002d56:	1d19      	adds	r1, r3, #4
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	9103      	str	r1, [sp, #12]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bfbb      	ittet	lt
 8002d60:	425b      	neglt	r3, r3
 8002d62:	f042 0202 	orrlt.w	r2, r2, #2
 8002d66:	9307      	strge	r3, [sp, #28]
 8002d68:	9307      	strlt	r3, [sp, #28]
 8002d6a:	bfb8      	it	lt
 8002d6c:	9204      	strlt	r2, [sp, #16]
 8002d6e:	7823      	ldrb	r3, [r4, #0]
 8002d70:	2b2e      	cmp	r3, #46	; 0x2e
 8002d72:	d10c      	bne.n	8002d8e <_vfiprintf_r+0x176>
 8002d74:	7863      	ldrb	r3, [r4, #1]
 8002d76:	2b2a      	cmp	r3, #42	; 0x2a
 8002d78:	d135      	bne.n	8002de6 <_vfiprintf_r+0x1ce>
 8002d7a:	9b03      	ldr	r3, [sp, #12]
 8002d7c:	3402      	adds	r4, #2
 8002d7e:	1d1a      	adds	r2, r3, #4
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	9203      	str	r2, [sp, #12]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb8      	it	lt
 8002d88:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d8c:	9305      	str	r3, [sp, #20]
 8002d8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002e68 <_vfiprintf_r+0x250>
 8002d92:	2203      	movs	r2, #3
 8002d94:	4650      	mov	r0, sl
 8002d96:	7821      	ldrb	r1, [r4, #0]
 8002d98:	f000 fc70 	bl	800367c <memchr>
 8002d9c:	b140      	cbz	r0, 8002db0 <_vfiprintf_r+0x198>
 8002d9e:	2340      	movs	r3, #64	; 0x40
 8002da0:	eba0 000a 	sub.w	r0, r0, sl
 8002da4:	fa03 f000 	lsl.w	r0, r3, r0
 8002da8:	9b04      	ldr	r3, [sp, #16]
 8002daa:	3401      	adds	r4, #1
 8002dac:	4303      	orrs	r3, r0
 8002dae:	9304      	str	r3, [sp, #16]
 8002db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002db4:	2206      	movs	r2, #6
 8002db6:	482d      	ldr	r0, [pc, #180]	; (8002e6c <_vfiprintf_r+0x254>)
 8002db8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002dbc:	f000 fc5e 	bl	800367c <memchr>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d03f      	beq.n	8002e44 <_vfiprintf_r+0x22c>
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <_vfiprintf_r+0x258>)
 8002dc6:	bb1b      	cbnz	r3, 8002e10 <_vfiprintf_r+0x1f8>
 8002dc8:	9b03      	ldr	r3, [sp, #12]
 8002dca:	3307      	adds	r3, #7
 8002dcc:	f023 0307 	bic.w	r3, r3, #7
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	9303      	str	r3, [sp, #12]
 8002dd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd6:	443b      	add	r3, r7
 8002dd8:	9309      	str	r3, [sp, #36]	; 0x24
 8002dda:	e767      	b.n	8002cac <_vfiprintf_r+0x94>
 8002ddc:	460c      	mov	r4, r1
 8002dde:	2001      	movs	r0, #1
 8002de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8002de4:	e7a5      	b.n	8002d32 <_vfiprintf_r+0x11a>
 8002de6:	2300      	movs	r3, #0
 8002de8:	f04f 0c0a 	mov.w	ip, #10
 8002dec:	4619      	mov	r1, r3
 8002dee:	3401      	adds	r4, #1
 8002df0:	9305      	str	r3, [sp, #20]
 8002df2:	4620      	mov	r0, r4
 8002df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002df8:	3a30      	subs	r2, #48	; 0x30
 8002dfa:	2a09      	cmp	r2, #9
 8002dfc:	d903      	bls.n	8002e06 <_vfiprintf_r+0x1ee>
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0c5      	beq.n	8002d8e <_vfiprintf_r+0x176>
 8002e02:	9105      	str	r1, [sp, #20]
 8002e04:	e7c3      	b.n	8002d8e <_vfiprintf_r+0x176>
 8002e06:	4604      	mov	r4, r0
 8002e08:	2301      	movs	r3, #1
 8002e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e0e:	e7f0      	b.n	8002df2 <_vfiprintf_r+0x1da>
 8002e10:	ab03      	add	r3, sp, #12
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	462a      	mov	r2, r5
 8002e16:	4630      	mov	r0, r6
 8002e18:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <_vfiprintf_r+0x25c>)
 8002e1a:	a904      	add	r1, sp, #16
 8002e1c:	f3af 8000 	nop.w
 8002e20:	4607      	mov	r7, r0
 8002e22:	1c78      	adds	r0, r7, #1
 8002e24:	d1d6      	bne.n	8002dd4 <_vfiprintf_r+0x1bc>
 8002e26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002e28:	07d9      	lsls	r1, r3, #31
 8002e2a:	d405      	bmi.n	8002e38 <_vfiprintf_r+0x220>
 8002e2c:	89ab      	ldrh	r3, [r5, #12]
 8002e2e:	059a      	lsls	r2, r3, #22
 8002e30:	d402      	bmi.n	8002e38 <_vfiprintf_r+0x220>
 8002e32:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002e34:	f7ff fe33 	bl	8002a9e <__retarget_lock_release_recursive>
 8002e38:	89ab      	ldrh	r3, [r5, #12]
 8002e3a:	065b      	lsls	r3, r3, #25
 8002e3c:	f53f af12 	bmi.w	8002c64 <_vfiprintf_r+0x4c>
 8002e40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e42:	e711      	b.n	8002c68 <_vfiprintf_r+0x50>
 8002e44:	ab03      	add	r3, sp, #12
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	462a      	mov	r2, r5
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <_vfiprintf_r+0x25c>)
 8002e4e:	a904      	add	r1, sp, #16
 8002e50:	f000 f882 	bl	8002f58 <_printf_i>
 8002e54:	e7e4      	b.n	8002e20 <_vfiprintf_r+0x208>
 8002e56:	bf00      	nop
 8002e58:	0800381c 	.word	0x0800381c
 8002e5c:	0800383c 	.word	0x0800383c
 8002e60:	080037fc 	.word	0x080037fc
 8002e64:	0800385c 	.word	0x0800385c
 8002e68:	08003862 	.word	0x08003862
 8002e6c:	08003866 	.word	0x08003866
 8002e70:	00000000 	.word	0x00000000
 8002e74:	08002bf3 	.word	0x08002bf3

08002e78 <_printf_common>:
 8002e78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e7c:	4616      	mov	r6, r2
 8002e7e:	4699      	mov	r9, r3
 8002e80:	688a      	ldr	r2, [r1, #8]
 8002e82:	690b      	ldr	r3, [r1, #16]
 8002e84:	4607      	mov	r7, r0
 8002e86:	4293      	cmp	r3, r2
 8002e88:	bfb8      	it	lt
 8002e8a:	4613      	movlt	r3, r2
 8002e8c:	6033      	str	r3, [r6, #0]
 8002e8e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e92:	460c      	mov	r4, r1
 8002e94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e98:	b10a      	cbz	r2, 8002e9e <_printf_common+0x26>
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	6033      	str	r3, [r6, #0]
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	0699      	lsls	r1, r3, #26
 8002ea2:	bf42      	ittt	mi
 8002ea4:	6833      	ldrmi	r3, [r6, #0]
 8002ea6:	3302      	addmi	r3, #2
 8002ea8:	6033      	strmi	r3, [r6, #0]
 8002eaa:	6825      	ldr	r5, [r4, #0]
 8002eac:	f015 0506 	ands.w	r5, r5, #6
 8002eb0:	d106      	bne.n	8002ec0 <_printf_common+0x48>
 8002eb2:	f104 0a19 	add.w	sl, r4, #25
 8002eb6:	68e3      	ldr	r3, [r4, #12]
 8002eb8:	6832      	ldr	r2, [r6, #0]
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	42ab      	cmp	r3, r5
 8002ebe:	dc28      	bgt.n	8002f12 <_printf_common+0x9a>
 8002ec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ec4:	1e13      	subs	r3, r2, #0
 8002ec6:	6822      	ldr	r2, [r4, #0]
 8002ec8:	bf18      	it	ne
 8002eca:	2301      	movne	r3, #1
 8002ecc:	0692      	lsls	r2, r2, #26
 8002ece:	d42d      	bmi.n	8002f2c <_printf_common+0xb4>
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	4638      	mov	r0, r7
 8002ed4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ed8:	47c0      	blx	r8
 8002eda:	3001      	adds	r0, #1
 8002edc:	d020      	beq.n	8002f20 <_printf_common+0xa8>
 8002ede:	6823      	ldr	r3, [r4, #0]
 8002ee0:	68e5      	ldr	r5, [r4, #12]
 8002ee2:	f003 0306 	and.w	r3, r3, #6
 8002ee6:	2b04      	cmp	r3, #4
 8002ee8:	bf18      	it	ne
 8002eea:	2500      	movne	r5, #0
 8002eec:	6832      	ldr	r2, [r6, #0]
 8002eee:	f04f 0600 	mov.w	r6, #0
 8002ef2:	68a3      	ldr	r3, [r4, #8]
 8002ef4:	bf08      	it	eq
 8002ef6:	1aad      	subeq	r5, r5, r2
 8002ef8:	6922      	ldr	r2, [r4, #16]
 8002efa:	bf08      	it	eq
 8002efc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f00:	4293      	cmp	r3, r2
 8002f02:	bfc4      	itt	gt
 8002f04:	1a9b      	subgt	r3, r3, r2
 8002f06:	18ed      	addgt	r5, r5, r3
 8002f08:	341a      	adds	r4, #26
 8002f0a:	42b5      	cmp	r5, r6
 8002f0c:	d11a      	bne.n	8002f44 <_printf_common+0xcc>
 8002f0e:	2000      	movs	r0, #0
 8002f10:	e008      	b.n	8002f24 <_printf_common+0xac>
 8002f12:	2301      	movs	r3, #1
 8002f14:	4652      	mov	r2, sl
 8002f16:	4649      	mov	r1, r9
 8002f18:	4638      	mov	r0, r7
 8002f1a:	47c0      	blx	r8
 8002f1c:	3001      	adds	r0, #1
 8002f1e:	d103      	bne.n	8002f28 <_printf_common+0xb0>
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f28:	3501      	adds	r5, #1
 8002f2a:	e7c4      	b.n	8002eb6 <_printf_common+0x3e>
 8002f2c:	2030      	movs	r0, #48	; 0x30
 8002f2e:	18e1      	adds	r1, r4, r3
 8002f30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f3a:	4422      	add	r2, r4
 8002f3c:	3302      	adds	r3, #2
 8002f3e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f42:	e7c5      	b.n	8002ed0 <_printf_common+0x58>
 8002f44:	2301      	movs	r3, #1
 8002f46:	4622      	mov	r2, r4
 8002f48:	4649      	mov	r1, r9
 8002f4a:	4638      	mov	r0, r7
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0e6      	beq.n	8002f20 <_printf_common+0xa8>
 8002f52:	3601      	adds	r6, #1
 8002f54:	e7d9      	b.n	8002f0a <_printf_common+0x92>
	...

08002f58 <_printf_i>:
 8002f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f5c:	7e0f      	ldrb	r7, [r1, #24]
 8002f5e:	4691      	mov	r9, r2
 8002f60:	2f78      	cmp	r7, #120	; 0x78
 8002f62:	4680      	mov	r8, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	469a      	mov	sl, r3
 8002f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f6e:	d807      	bhi.n	8002f80 <_printf_i+0x28>
 8002f70:	2f62      	cmp	r7, #98	; 0x62
 8002f72:	d80a      	bhi.n	8002f8a <_printf_i+0x32>
 8002f74:	2f00      	cmp	r7, #0
 8002f76:	f000 80d9 	beq.w	800312c <_printf_i+0x1d4>
 8002f7a:	2f58      	cmp	r7, #88	; 0x58
 8002f7c:	f000 80a4 	beq.w	80030c8 <_printf_i+0x170>
 8002f80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f88:	e03a      	b.n	8003000 <_printf_i+0xa8>
 8002f8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f8e:	2b15      	cmp	r3, #21
 8002f90:	d8f6      	bhi.n	8002f80 <_printf_i+0x28>
 8002f92:	a101      	add	r1, pc, #4	; (adr r1, 8002f98 <_printf_i+0x40>)
 8002f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f98:	08002ff1 	.word	0x08002ff1
 8002f9c:	08003005 	.word	0x08003005
 8002fa0:	08002f81 	.word	0x08002f81
 8002fa4:	08002f81 	.word	0x08002f81
 8002fa8:	08002f81 	.word	0x08002f81
 8002fac:	08002f81 	.word	0x08002f81
 8002fb0:	08003005 	.word	0x08003005
 8002fb4:	08002f81 	.word	0x08002f81
 8002fb8:	08002f81 	.word	0x08002f81
 8002fbc:	08002f81 	.word	0x08002f81
 8002fc0:	08002f81 	.word	0x08002f81
 8002fc4:	08003113 	.word	0x08003113
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	080030f5 	.word	0x080030f5
 8002fd0:	08002f81 	.word	0x08002f81
 8002fd4:	08002f81 	.word	0x08002f81
 8002fd8:	08003135 	.word	0x08003135
 8002fdc:	08002f81 	.word	0x08002f81
 8002fe0:	08003035 	.word	0x08003035
 8002fe4:	08002f81 	.word	0x08002f81
 8002fe8:	08002f81 	.word	0x08002f81
 8002fec:	080030fd 	.word	0x080030fd
 8002ff0:	682b      	ldr	r3, [r5, #0]
 8002ff2:	1d1a      	adds	r2, r3, #4
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	602a      	str	r2, [r5, #0]
 8002ff8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ffc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003000:	2301      	movs	r3, #1
 8003002:	e0a4      	b.n	800314e <_printf_i+0x1f6>
 8003004:	6820      	ldr	r0, [r4, #0]
 8003006:	6829      	ldr	r1, [r5, #0]
 8003008:	0606      	lsls	r6, r0, #24
 800300a:	f101 0304 	add.w	r3, r1, #4
 800300e:	d50a      	bpl.n	8003026 <_printf_i+0xce>
 8003010:	680e      	ldr	r6, [r1, #0]
 8003012:	602b      	str	r3, [r5, #0]
 8003014:	2e00      	cmp	r6, #0
 8003016:	da03      	bge.n	8003020 <_printf_i+0xc8>
 8003018:	232d      	movs	r3, #45	; 0x2d
 800301a:	4276      	negs	r6, r6
 800301c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003020:	230a      	movs	r3, #10
 8003022:	485e      	ldr	r0, [pc, #376]	; (800319c <_printf_i+0x244>)
 8003024:	e019      	b.n	800305a <_printf_i+0x102>
 8003026:	680e      	ldr	r6, [r1, #0]
 8003028:	f010 0f40 	tst.w	r0, #64	; 0x40
 800302c:	602b      	str	r3, [r5, #0]
 800302e:	bf18      	it	ne
 8003030:	b236      	sxthne	r6, r6
 8003032:	e7ef      	b.n	8003014 <_printf_i+0xbc>
 8003034:	682b      	ldr	r3, [r5, #0]
 8003036:	6820      	ldr	r0, [r4, #0]
 8003038:	1d19      	adds	r1, r3, #4
 800303a:	6029      	str	r1, [r5, #0]
 800303c:	0601      	lsls	r1, r0, #24
 800303e:	d501      	bpl.n	8003044 <_printf_i+0xec>
 8003040:	681e      	ldr	r6, [r3, #0]
 8003042:	e002      	b.n	800304a <_printf_i+0xf2>
 8003044:	0646      	lsls	r6, r0, #25
 8003046:	d5fb      	bpl.n	8003040 <_printf_i+0xe8>
 8003048:	881e      	ldrh	r6, [r3, #0]
 800304a:	2f6f      	cmp	r7, #111	; 0x6f
 800304c:	bf0c      	ite	eq
 800304e:	2308      	moveq	r3, #8
 8003050:	230a      	movne	r3, #10
 8003052:	4852      	ldr	r0, [pc, #328]	; (800319c <_printf_i+0x244>)
 8003054:	2100      	movs	r1, #0
 8003056:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800305a:	6865      	ldr	r5, [r4, #4]
 800305c:	2d00      	cmp	r5, #0
 800305e:	bfa8      	it	ge
 8003060:	6821      	ldrge	r1, [r4, #0]
 8003062:	60a5      	str	r5, [r4, #8]
 8003064:	bfa4      	itt	ge
 8003066:	f021 0104 	bicge.w	r1, r1, #4
 800306a:	6021      	strge	r1, [r4, #0]
 800306c:	b90e      	cbnz	r6, 8003072 <_printf_i+0x11a>
 800306e:	2d00      	cmp	r5, #0
 8003070:	d04d      	beq.n	800310e <_printf_i+0x1b6>
 8003072:	4615      	mov	r5, r2
 8003074:	fbb6 f1f3 	udiv	r1, r6, r3
 8003078:	fb03 6711 	mls	r7, r3, r1, r6
 800307c:	5dc7      	ldrb	r7, [r0, r7]
 800307e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003082:	4637      	mov	r7, r6
 8003084:	42bb      	cmp	r3, r7
 8003086:	460e      	mov	r6, r1
 8003088:	d9f4      	bls.n	8003074 <_printf_i+0x11c>
 800308a:	2b08      	cmp	r3, #8
 800308c:	d10b      	bne.n	80030a6 <_printf_i+0x14e>
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	07de      	lsls	r6, r3, #31
 8003092:	d508      	bpl.n	80030a6 <_printf_i+0x14e>
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	6861      	ldr	r1, [r4, #4]
 8003098:	4299      	cmp	r1, r3
 800309a:	bfde      	ittt	le
 800309c:	2330      	movle	r3, #48	; 0x30
 800309e:	f805 3c01 	strble.w	r3, [r5, #-1]
 80030a2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80030a6:	1b52      	subs	r2, r2, r5
 80030a8:	6122      	str	r2, [r4, #16]
 80030aa:	464b      	mov	r3, r9
 80030ac:	4621      	mov	r1, r4
 80030ae:	4640      	mov	r0, r8
 80030b0:	f8cd a000 	str.w	sl, [sp]
 80030b4:	aa03      	add	r2, sp, #12
 80030b6:	f7ff fedf 	bl	8002e78 <_printf_common>
 80030ba:	3001      	adds	r0, #1
 80030bc:	d14c      	bne.n	8003158 <_printf_i+0x200>
 80030be:	f04f 30ff 	mov.w	r0, #4294967295
 80030c2:	b004      	add	sp, #16
 80030c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c8:	4834      	ldr	r0, [pc, #208]	; (800319c <_printf_i+0x244>)
 80030ca:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80030ce:	6829      	ldr	r1, [r5, #0]
 80030d0:	6823      	ldr	r3, [r4, #0]
 80030d2:	f851 6b04 	ldr.w	r6, [r1], #4
 80030d6:	6029      	str	r1, [r5, #0]
 80030d8:	061d      	lsls	r5, r3, #24
 80030da:	d514      	bpl.n	8003106 <_printf_i+0x1ae>
 80030dc:	07df      	lsls	r7, r3, #31
 80030de:	bf44      	itt	mi
 80030e0:	f043 0320 	orrmi.w	r3, r3, #32
 80030e4:	6023      	strmi	r3, [r4, #0]
 80030e6:	b91e      	cbnz	r6, 80030f0 <_printf_i+0x198>
 80030e8:	6823      	ldr	r3, [r4, #0]
 80030ea:	f023 0320 	bic.w	r3, r3, #32
 80030ee:	6023      	str	r3, [r4, #0]
 80030f0:	2310      	movs	r3, #16
 80030f2:	e7af      	b.n	8003054 <_printf_i+0xfc>
 80030f4:	6823      	ldr	r3, [r4, #0]
 80030f6:	f043 0320 	orr.w	r3, r3, #32
 80030fa:	6023      	str	r3, [r4, #0]
 80030fc:	2378      	movs	r3, #120	; 0x78
 80030fe:	4828      	ldr	r0, [pc, #160]	; (80031a0 <_printf_i+0x248>)
 8003100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003104:	e7e3      	b.n	80030ce <_printf_i+0x176>
 8003106:	0659      	lsls	r1, r3, #25
 8003108:	bf48      	it	mi
 800310a:	b2b6      	uxthmi	r6, r6
 800310c:	e7e6      	b.n	80030dc <_printf_i+0x184>
 800310e:	4615      	mov	r5, r2
 8003110:	e7bb      	b.n	800308a <_printf_i+0x132>
 8003112:	682b      	ldr	r3, [r5, #0]
 8003114:	6826      	ldr	r6, [r4, #0]
 8003116:	1d18      	adds	r0, r3, #4
 8003118:	6961      	ldr	r1, [r4, #20]
 800311a:	6028      	str	r0, [r5, #0]
 800311c:	0635      	lsls	r5, r6, #24
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	d501      	bpl.n	8003126 <_printf_i+0x1ce>
 8003122:	6019      	str	r1, [r3, #0]
 8003124:	e002      	b.n	800312c <_printf_i+0x1d4>
 8003126:	0670      	lsls	r0, r6, #25
 8003128:	d5fb      	bpl.n	8003122 <_printf_i+0x1ca>
 800312a:	8019      	strh	r1, [r3, #0]
 800312c:	2300      	movs	r3, #0
 800312e:	4615      	mov	r5, r2
 8003130:	6123      	str	r3, [r4, #16]
 8003132:	e7ba      	b.n	80030aa <_printf_i+0x152>
 8003134:	682b      	ldr	r3, [r5, #0]
 8003136:	2100      	movs	r1, #0
 8003138:	1d1a      	adds	r2, r3, #4
 800313a:	602a      	str	r2, [r5, #0]
 800313c:	681d      	ldr	r5, [r3, #0]
 800313e:	6862      	ldr	r2, [r4, #4]
 8003140:	4628      	mov	r0, r5
 8003142:	f000 fa9b 	bl	800367c <memchr>
 8003146:	b108      	cbz	r0, 800314c <_printf_i+0x1f4>
 8003148:	1b40      	subs	r0, r0, r5
 800314a:	6060      	str	r0, [r4, #4]
 800314c:	6863      	ldr	r3, [r4, #4]
 800314e:	6123      	str	r3, [r4, #16]
 8003150:	2300      	movs	r3, #0
 8003152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003156:	e7a8      	b.n	80030aa <_printf_i+0x152>
 8003158:	462a      	mov	r2, r5
 800315a:	4649      	mov	r1, r9
 800315c:	4640      	mov	r0, r8
 800315e:	6923      	ldr	r3, [r4, #16]
 8003160:	47d0      	blx	sl
 8003162:	3001      	adds	r0, #1
 8003164:	d0ab      	beq.n	80030be <_printf_i+0x166>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	079b      	lsls	r3, r3, #30
 800316a:	d413      	bmi.n	8003194 <_printf_i+0x23c>
 800316c:	68e0      	ldr	r0, [r4, #12]
 800316e:	9b03      	ldr	r3, [sp, #12]
 8003170:	4298      	cmp	r0, r3
 8003172:	bfb8      	it	lt
 8003174:	4618      	movlt	r0, r3
 8003176:	e7a4      	b.n	80030c2 <_printf_i+0x16a>
 8003178:	2301      	movs	r3, #1
 800317a:	4632      	mov	r2, r6
 800317c:	4649      	mov	r1, r9
 800317e:	4640      	mov	r0, r8
 8003180:	47d0      	blx	sl
 8003182:	3001      	adds	r0, #1
 8003184:	d09b      	beq.n	80030be <_printf_i+0x166>
 8003186:	3501      	adds	r5, #1
 8003188:	68e3      	ldr	r3, [r4, #12]
 800318a:	9903      	ldr	r1, [sp, #12]
 800318c:	1a5b      	subs	r3, r3, r1
 800318e:	42ab      	cmp	r3, r5
 8003190:	dcf2      	bgt.n	8003178 <_printf_i+0x220>
 8003192:	e7eb      	b.n	800316c <_printf_i+0x214>
 8003194:	2500      	movs	r5, #0
 8003196:	f104 0619 	add.w	r6, r4, #25
 800319a:	e7f5      	b.n	8003188 <_printf_i+0x230>
 800319c:	0800386d 	.word	0x0800386d
 80031a0:	0800387e 	.word	0x0800387e

080031a4 <_sbrk_r>:
 80031a4:	b538      	push	{r3, r4, r5, lr}
 80031a6:	2300      	movs	r3, #0
 80031a8:	4d05      	ldr	r5, [pc, #20]	; (80031c0 <_sbrk_r+0x1c>)
 80031aa:	4604      	mov	r4, r0
 80031ac:	4608      	mov	r0, r1
 80031ae:	602b      	str	r3, [r5, #0]
 80031b0:	f7fd fb12 	bl	80007d8 <_sbrk>
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d102      	bne.n	80031be <_sbrk_r+0x1a>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	b103      	cbz	r3, 80031be <_sbrk_r+0x1a>
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	bd38      	pop	{r3, r4, r5, pc}
 80031c0:	20000184 	.word	0x20000184

080031c4 <__sread>:
 80031c4:	b510      	push	{r4, lr}
 80031c6:	460c      	mov	r4, r1
 80031c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80031cc:	f000 fab8 	bl	8003740 <_read_r>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	bfab      	itete	ge
 80031d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80031d6:	89a3      	ldrhlt	r3, [r4, #12]
 80031d8:	181b      	addge	r3, r3, r0
 80031da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80031de:	bfac      	ite	ge
 80031e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80031e2:	81a3      	strhlt	r3, [r4, #12]
 80031e4:	bd10      	pop	{r4, pc}

080031e6 <__swrite>:
 80031e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ea:	461f      	mov	r7, r3
 80031ec:	898b      	ldrh	r3, [r1, #12]
 80031ee:	4605      	mov	r5, r0
 80031f0:	05db      	lsls	r3, r3, #23
 80031f2:	460c      	mov	r4, r1
 80031f4:	4616      	mov	r6, r2
 80031f6:	d505      	bpl.n	8003204 <__swrite+0x1e>
 80031f8:	2302      	movs	r3, #2
 80031fa:	2200      	movs	r2, #0
 80031fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003200:	f000 f9c4 	bl	800358c <_lseek_r>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	4632      	mov	r2, r6
 8003208:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800320c:	81a3      	strh	r3, [r4, #12]
 800320e:	4628      	mov	r0, r5
 8003210:	463b      	mov	r3, r7
 8003212:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003216:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800321a:	f000 b869 	b.w	80032f0 <_write_r>

0800321e <__sseek>:
 800321e:	b510      	push	{r4, lr}
 8003220:	460c      	mov	r4, r1
 8003222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003226:	f000 f9b1 	bl	800358c <_lseek_r>
 800322a:	1c43      	adds	r3, r0, #1
 800322c:	89a3      	ldrh	r3, [r4, #12]
 800322e:	bf15      	itete	ne
 8003230:	6560      	strne	r0, [r4, #84]	; 0x54
 8003232:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003236:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800323a:	81a3      	strheq	r3, [r4, #12]
 800323c:	bf18      	it	ne
 800323e:	81a3      	strhne	r3, [r4, #12]
 8003240:	bd10      	pop	{r4, pc}

08003242 <__sclose>:
 8003242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003246:	f000 b8d3 	b.w	80033f0 <_close_r>
	...

0800324c <__swbuf_r>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	460e      	mov	r6, r1
 8003250:	4614      	mov	r4, r2
 8003252:	4605      	mov	r5, r0
 8003254:	b118      	cbz	r0, 800325e <__swbuf_r+0x12>
 8003256:	6983      	ldr	r3, [r0, #24]
 8003258:	b90b      	cbnz	r3, 800325e <__swbuf_r+0x12>
 800325a:	f7ff fb81 	bl	8002960 <__sinit>
 800325e:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <__swbuf_r+0x98>)
 8003260:	429c      	cmp	r4, r3
 8003262:	d12b      	bne.n	80032bc <__swbuf_r+0x70>
 8003264:	686c      	ldr	r4, [r5, #4]
 8003266:	69a3      	ldr	r3, [r4, #24]
 8003268:	60a3      	str	r3, [r4, #8]
 800326a:	89a3      	ldrh	r3, [r4, #12]
 800326c:	071a      	lsls	r2, r3, #28
 800326e:	d52f      	bpl.n	80032d0 <__swbuf_r+0x84>
 8003270:	6923      	ldr	r3, [r4, #16]
 8003272:	b36b      	cbz	r3, 80032d0 <__swbuf_r+0x84>
 8003274:	6923      	ldr	r3, [r4, #16]
 8003276:	6820      	ldr	r0, [r4, #0]
 8003278:	b2f6      	uxtb	r6, r6
 800327a:	1ac0      	subs	r0, r0, r3
 800327c:	6963      	ldr	r3, [r4, #20]
 800327e:	4637      	mov	r7, r6
 8003280:	4283      	cmp	r3, r0
 8003282:	dc04      	bgt.n	800328e <__swbuf_r+0x42>
 8003284:	4621      	mov	r1, r4
 8003286:	4628      	mov	r0, r5
 8003288:	f000 f944 	bl	8003514 <_fflush_r>
 800328c:	bb30      	cbnz	r0, 80032dc <__swbuf_r+0x90>
 800328e:	68a3      	ldr	r3, [r4, #8]
 8003290:	3001      	adds	r0, #1
 8003292:	3b01      	subs	r3, #1
 8003294:	60a3      	str	r3, [r4, #8]
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	1c5a      	adds	r2, r3, #1
 800329a:	6022      	str	r2, [r4, #0]
 800329c:	701e      	strb	r6, [r3, #0]
 800329e:	6963      	ldr	r3, [r4, #20]
 80032a0:	4283      	cmp	r3, r0
 80032a2:	d004      	beq.n	80032ae <__swbuf_r+0x62>
 80032a4:	89a3      	ldrh	r3, [r4, #12]
 80032a6:	07db      	lsls	r3, r3, #31
 80032a8:	d506      	bpl.n	80032b8 <__swbuf_r+0x6c>
 80032aa:	2e0a      	cmp	r6, #10
 80032ac:	d104      	bne.n	80032b8 <__swbuf_r+0x6c>
 80032ae:	4621      	mov	r1, r4
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 f92f 	bl	8003514 <_fflush_r>
 80032b6:	b988      	cbnz	r0, 80032dc <__swbuf_r+0x90>
 80032b8:	4638      	mov	r0, r7
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	4b0a      	ldr	r3, [pc, #40]	; (80032e8 <__swbuf_r+0x9c>)
 80032be:	429c      	cmp	r4, r3
 80032c0:	d101      	bne.n	80032c6 <__swbuf_r+0x7a>
 80032c2:	68ac      	ldr	r4, [r5, #8]
 80032c4:	e7cf      	b.n	8003266 <__swbuf_r+0x1a>
 80032c6:	4b09      	ldr	r3, [pc, #36]	; (80032ec <__swbuf_r+0xa0>)
 80032c8:	429c      	cmp	r4, r3
 80032ca:	bf08      	it	eq
 80032cc:	68ec      	ldreq	r4, [r5, #12]
 80032ce:	e7ca      	b.n	8003266 <__swbuf_r+0x1a>
 80032d0:	4621      	mov	r1, r4
 80032d2:	4628      	mov	r0, r5
 80032d4:	f000 f81e 	bl	8003314 <__swsetup_r>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d0cb      	beq.n	8003274 <__swbuf_r+0x28>
 80032dc:	f04f 37ff 	mov.w	r7, #4294967295
 80032e0:	e7ea      	b.n	80032b8 <__swbuf_r+0x6c>
 80032e2:	bf00      	nop
 80032e4:	0800381c 	.word	0x0800381c
 80032e8:	0800383c 	.word	0x0800383c
 80032ec:	080037fc 	.word	0x080037fc

080032f0 <_write_r>:
 80032f0:	b538      	push	{r3, r4, r5, lr}
 80032f2:	4604      	mov	r4, r0
 80032f4:	4608      	mov	r0, r1
 80032f6:	4611      	mov	r1, r2
 80032f8:	2200      	movs	r2, #0
 80032fa:	4d05      	ldr	r5, [pc, #20]	; (8003310 <_write_r+0x20>)
 80032fc:	602a      	str	r2, [r5, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	f7fd fa1d 	bl	800073e <_write>
 8003304:	1c43      	adds	r3, r0, #1
 8003306:	d102      	bne.n	800330e <_write_r+0x1e>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	b103      	cbz	r3, 800330e <_write_r+0x1e>
 800330c:	6023      	str	r3, [r4, #0]
 800330e:	bd38      	pop	{r3, r4, r5, pc}
 8003310:	20000184 	.word	0x20000184

08003314 <__swsetup_r>:
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <__swsetup_r+0xcc>)
 8003316:	b570      	push	{r4, r5, r6, lr}
 8003318:	681d      	ldr	r5, [r3, #0]
 800331a:	4606      	mov	r6, r0
 800331c:	460c      	mov	r4, r1
 800331e:	b125      	cbz	r5, 800332a <__swsetup_r+0x16>
 8003320:	69ab      	ldr	r3, [r5, #24]
 8003322:	b913      	cbnz	r3, 800332a <__swsetup_r+0x16>
 8003324:	4628      	mov	r0, r5
 8003326:	f7ff fb1b 	bl	8002960 <__sinit>
 800332a:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <__swsetup_r+0xd0>)
 800332c:	429c      	cmp	r4, r3
 800332e:	d10f      	bne.n	8003350 <__swsetup_r+0x3c>
 8003330:	686c      	ldr	r4, [r5, #4]
 8003332:	89a3      	ldrh	r3, [r4, #12]
 8003334:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003338:	0719      	lsls	r1, r3, #28
 800333a:	d42c      	bmi.n	8003396 <__swsetup_r+0x82>
 800333c:	06dd      	lsls	r5, r3, #27
 800333e:	d411      	bmi.n	8003364 <__swsetup_r+0x50>
 8003340:	2309      	movs	r3, #9
 8003342:	6033      	str	r3, [r6, #0]
 8003344:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003348:	f04f 30ff 	mov.w	r0, #4294967295
 800334c:	81a3      	strh	r3, [r4, #12]
 800334e:	e03e      	b.n	80033ce <__swsetup_r+0xba>
 8003350:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <__swsetup_r+0xd4>)
 8003352:	429c      	cmp	r4, r3
 8003354:	d101      	bne.n	800335a <__swsetup_r+0x46>
 8003356:	68ac      	ldr	r4, [r5, #8]
 8003358:	e7eb      	b.n	8003332 <__swsetup_r+0x1e>
 800335a:	4b24      	ldr	r3, [pc, #144]	; (80033ec <__swsetup_r+0xd8>)
 800335c:	429c      	cmp	r4, r3
 800335e:	bf08      	it	eq
 8003360:	68ec      	ldreq	r4, [r5, #12]
 8003362:	e7e6      	b.n	8003332 <__swsetup_r+0x1e>
 8003364:	0758      	lsls	r0, r3, #29
 8003366:	d512      	bpl.n	800338e <__swsetup_r+0x7a>
 8003368:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800336a:	b141      	cbz	r1, 800337e <__swsetup_r+0x6a>
 800336c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003370:	4299      	cmp	r1, r3
 8003372:	d002      	beq.n	800337a <__swsetup_r+0x66>
 8003374:	4630      	mov	r0, r6
 8003376:	f000 f99b 	bl	80036b0 <_free_r>
 800337a:	2300      	movs	r3, #0
 800337c:	6363      	str	r3, [r4, #52]	; 0x34
 800337e:	89a3      	ldrh	r3, [r4, #12]
 8003380:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003384:	81a3      	strh	r3, [r4, #12]
 8003386:	2300      	movs	r3, #0
 8003388:	6063      	str	r3, [r4, #4]
 800338a:	6923      	ldr	r3, [r4, #16]
 800338c:	6023      	str	r3, [r4, #0]
 800338e:	89a3      	ldrh	r3, [r4, #12]
 8003390:	f043 0308 	orr.w	r3, r3, #8
 8003394:	81a3      	strh	r3, [r4, #12]
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	b94b      	cbnz	r3, 80033ae <__swsetup_r+0x9a>
 800339a:	89a3      	ldrh	r3, [r4, #12]
 800339c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80033a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a4:	d003      	beq.n	80033ae <__swsetup_r+0x9a>
 80033a6:	4621      	mov	r1, r4
 80033a8:	4630      	mov	r0, r6
 80033aa:	f000 f927 	bl	80035fc <__smakebuf_r>
 80033ae:	89a0      	ldrh	r0, [r4, #12]
 80033b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80033b4:	f010 0301 	ands.w	r3, r0, #1
 80033b8:	d00a      	beq.n	80033d0 <__swsetup_r+0xbc>
 80033ba:	2300      	movs	r3, #0
 80033bc:	60a3      	str	r3, [r4, #8]
 80033be:	6963      	ldr	r3, [r4, #20]
 80033c0:	425b      	negs	r3, r3
 80033c2:	61a3      	str	r3, [r4, #24]
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	b943      	cbnz	r3, 80033da <__swsetup_r+0xc6>
 80033c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80033cc:	d1ba      	bne.n	8003344 <__swsetup_r+0x30>
 80033ce:	bd70      	pop	{r4, r5, r6, pc}
 80033d0:	0781      	lsls	r1, r0, #30
 80033d2:	bf58      	it	pl
 80033d4:	6963      	ldrpl	r3, [r4, #20]
 80033d6:	60a3      	str	r3, [r4, #8]
 80033d8:	e7f4      	b.n	80033c4 <__swsetup_r+0xb0>
 80033da:	2000      	movs	r0, #0
 80033dc:	e7f7      	b.n	80033ce <__swsetup_r+0xba>
 80033de:	bf00      	nop
 80033e0:	2000000c 	.word	0x2000000c
 80033e4:	0800381c 	.word	0x0800381c
 80033e8:	0800383c 	.word	0x0800383c
 80033ec:	080037fc 	.word	0x080037fc

080033f0 <_close_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	2300      	movs	r3, #0
 80033f4:	4d05      	ldr	r5, [pc, #20]	; (800340c <_close_r+0x1c>)
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	f7fd f9bb 	bl	8000776 <_close>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_close_r+0x1a>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_close_r+0x1a>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000184 	.word	0x20000184

08003410 <__sflush_r>:
 8003410:	898a      	ldrh	r2, [r1, #12]
 8003412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003414:	4605      	mov	r5, r0
 8003416:	0710      	lsls	r0, r2, #28
 8003418:	460c      	mov	r4, r1
 800341a:	d457      	bmi.n	80034cc <__sflush_r+0xbc>
 800341c:	684b      	ldr	r3, [r1, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	dc04      	bgt.n	800342c <__sflush_r+0x1c>
 8003422:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	dc01      	bgt.n	800342c <__sflush_r+0x1c>
 8003428:	2000      	movs	r0, #0
 800342a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800342c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800342e:	2e00      	cmp	r6, #0
 8003430:	d0fa      	beq.n	8003428 <__sflush_r+0x18>
 8003432:	2300      	movs	r3, #0
 8003434:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003438:	682f      	ldr	r7, [r5, #0]
 800343a:	602b      	str	r3, [r5, #0]
 800343c:	d032      	beq.n	80034a4 <__sflush_r+0x94>
 800343e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	075a      	lsls	r2, r3, #29
 8003444:	d505      	bpl.n	8003452 <__sflush_r+0x42>
 8003446:	6863      	ldr	r3, [r4, #4]
 8003448:	1ac0      	subs	r0, r0, r3
 800344a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800344c:	b10b      	cbz	r3, 8003452 <__sflush_r+0x42>
 800344e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003450:	1ac0      	subs	r0, r0, r3
 8003452:	2300      	movs	r3, #0
 8003454:	4602      	mov	r2, r0
 8003456:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003458:	4628      	mov	r0, r5
 800345a:	6a21      	ldr	r1, [r4, #32]
 800345c:	47b0      	blx	r6
 800345e:	1c43      	adds	r3, r0, #1
 8003460:	89a3      	ldrh	r3, [r4, #12]
 8003462:	d106      	bne.n	8003472 <__sflush_r+0x62>
 8003464:	6829      	ldr	r1, [r5, #0]
 8003466:	291d      	cmp	r1, #29
 8003468:	d82c      	bhi.n	80034c4 <__sflush_r+0xb4>
 800346a:	4a29      	ldr	r2, [pc, #164]	; (8003510 <__sflush_r+0x100>)
 800346c:	40ca      	lsrs	r2, r1
 800346e:	07d6      	lsls	r6, r2, #31
 8003470:	d528      	bpl.n	80034c4 <__sflush_r+0xb4>
 8003472:	2200      	movs	r2, #0
 8003474:	6062      	str	r2, [r4, #4]
 8003476:	6922      	ldr	r2, [r4, #16]
 8003478:	04d9      	lsls	r1, r3, #19
 800347a:	6022      	str	r2, [r4, #0]
 800347c:	d504      	bpl.n	8003488 <__sflush_r+0x78>
 800347e:	1c42      	adds	r2, r0, #1
 8003480:	d101      	bne.n	8003486 <__sflush_r+0x76>
 8003482:	682b      	ldr	r3, [r5, #0]
 8003484:	b903      	cbnz	r3, 8003488 <__sflush_r+0x78>
 8003486:	6560      	str	r0, [r4, #84]	; 0x54
 8003488:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800348a:	602f      	str	r7, [r5, #0]
 800348c:	2900      	cmp	r1, #0
 800348e:	d0cb      	beq.n	8003428 <__sflush_r+0x18>
 8003490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003494:	4299      	cmp	r1, r3
 8003496:	d002      	beq.n	800349e <__sflush_r+0x8e>
 8003498:	4628      	mov	r0, r5
 800349a:	f000 f909 	bl	80036b0 <_free_r>
 800349e:	2000      	movs	r0, #0
 80034a0:	6360      	str	r0, [r4, #52]	; 0x34
 80034a2:	e7c2      	b.n	800342a <__sflush_r+0x1a>
 80034a4:	6a21      	ldr	r1, [r4, #32]
 80034a6:	2301      	movs	r3, #1
 80034a8:	4628      	mov	r0, r5
 80034aa:	47b0      	blx	r6
 80034ac:	1c41      	adds	r1, r0, #1
 80034ae:	d1c7      	bne.n	8003440 <__sflush_r+0x30>
 80034b0:	682b      	ldr	r3, [r5, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0c4      	beq.n	8003440 <__sflush_r+0x30>
 80034b6:	2b1d      	cmp	r3, #29
 80034b8:	d001      	beq.n	80034be <__sflush_r+0xae>
 80034ba:	2b16      	cmp	r3, #22
 80034bc:	d101      	bne.n	80034c2 <__sflush_r+0xb2>
 80034be:	602f      	str	r7, [r5, #0]
 80034c0:	e7b2      	b.n	8003428 <__sflush_r+0x18>
 80034c2:	89a3      	ldrh	r3, [r4, #12]
 80034c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80034c8:	81a3      	strh	r3, [r4, #12]
 80034ca:	e7ae      	b.n	800342a <__sflush_r+0x1a>
 80034cc:	690f      	ldr	r7, [r1, #16]
 80034ce:	2f00      	cmp	r7, #0
 80034d0:	d0aa      	beq.n	8003428 <__sflush_r+0x18>
 80034d2:	0793      	lsls	r3, r2, #30
 80034d4:	bf18      	it	ne
 80034d6:	2300      	movne	r3, #0
 80034d8:	680e      	ldr	r6, [r1, #0]
 80034da:	bf08      	it	eq
 80034dc:	694b      	ldreq	r3, [r1, #20]
 80034de:	1bf6      	subs	r6, r6, r7
 80034e0:	600f      	str	r7, [r1, #0]
 80034e2:	608b      	str	r3, [r1, #8]
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	dd9f      	ble.n	8003428 <__sflush_r+0x18>
 80034e8:	4633      	mov	r3, r6
 80034ea:	463a      	mov	r2, r7
 80034ec:	4628      	mov	r0, r5
 80034ee:	6a21      	ldr	r1, [r4, #32]
 80034f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80034f4:	47e0      	blx	ip
 80034f6:	2800      	cmp	r0, #0
 80034f8:	dc06      	bgt.n	8003508 <__sflush_r+0xf8>
 80034fa:	89a3      	ldrh	r3, [r4, #12]
 80034fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003504:	81a3      	strh	r3, [r4, #12]
 8003506:	e790      	b.n	800342a <__sflush_r+0x1a>
 8003508:	4407      	add	r7, r0
 800350a:	1a36      	subs	r6, r6, r0
 800350c:	e7ea      	b.n	80034e4 <__sflush_r+0xd4>
 800350e:	bf00      	nop
 8003510:	20400001 	.word	0x20400001

08003514 <_fflush_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	690b      	ldr	r3, [r1, #16]
 8003518:	4605      	mov	r5, r0
 800351a:	460c      	mov	r4, r1
 800351c:	b913      	cbnz	r3, 8003524 <_fflush_r+0x10>
 800351e:	2500      	movs	r5, #0
 8003520:	4628      	mov	r0, r5
 8003522:	bd38      	pop	{r3, r4, r5, pc}
 8003524:	b118      	cbz	r0, 800352e <_fflush_r+0x1a>
 8003526:	6983      	ldr	r3, [r0, #24]
 8003528:	b90b      	cbnz	r3, 800352e <_fflush_r+0x1a>
 800352a:	f7ff fa19 	bl	8002960 <__sinit>
 800352e:	4b14      	ldr	r3, [pc, #80]	; (8003580 <_fflush_r+0x6c>)
 8003530:	429c      	cmp	r4, r3
 8003532:	d11b      	bne.n	800356c <_fflush_r+0x58>
 8003534:	686c      	ldr	r4, [r5, #4]
 8003536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0ef      	beq.n	800351e <_fflush_r+0xa>
 800353e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003540:	07d0      	lsls	r0, r2, #31
 8003542:	d404      	bmi.n	800354e <_fflush_r+0x3a>
 8003544:	0599      	lsls	r1, r3, #22
 8003546:	d402      	bmi.n	800354e <_fflush_r+0x3a>
 8003548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800354a:	f7ff faa7 	bl	8002a9c <__retarget_lock_acquire_recursive>
 800354e:	4628      	mov	r0, r5
 8003550:	4621      	mov	r1, r4
 8003552:	f7ff ff5d 	bl	8003410 <__sflush_r>
 8003556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003558:	4605      	mov	r5, r0
 800355a:	07da      	lsls	r2, r3, #31
 800355c:	d4e0      	bmi.n	8003520 <_fflush_r+0xc>
 800355e:	89a3      	ldrh	r3, [r4, #12]
 8003560:	059b      	lsls	r3, r3, #22
 8003562:	d4dd      	bmi.n	8003520 <_fflush_r+0xc>
 8003564:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003566:	f7ff fa9a 	bl	8002a9e <__retarget_lock_release_recursive>
 800356a:	e7d9      	b.n	8003520 <_fflush_r+0xc>
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <_fflush_r+0x70>)
 800356e:	429c      	cmp	r4, r3
 8003570:	d101      	bne.n	8003576 <_fflush_r+0x62>
 8003572:	68ac      	ldr	r4, [r5, #8]
 8003574:	e7df      	b.n	8003536 <_fflush_r+0x22>
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <_fflush_r+0x74>)
 8003578:	429c      	cmp	r4, r3
 800357a:	bf08      	it	eq
 800357c:	68ec      	ldreq	r4, [r5, #12]
 800357e:	e7da      	b.n	8003536 <_fflush_r+0x22>
 8003580:	0800381c 	.word	0x0800381c
 8003584:	0800383c 	.word	0x0800383c
 8003588:	080037fc 	.word	0x080037fc

0800358c <_lseek_r>:
 800358c:	b538      	push	{r3, r4, r5, lr}
 800358e:	4604      	mov	r4, r0
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	2200      	movs	r2, #0
 8003596:	4d05      	ldr	r5, [pc, #20]	; (80035ac <_lseek_r+0x20>)
 8003598:	602a      	str	r2, [r5, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	f7fd f90f 	bl	80007be <_lseek>
 80035a0:	1c43      	adds	r3, r0, #1
 80035a2:	d102      	bne.n	80035aa <_lseek_r+0x1e>
 80035a4:	682b      	ldr	r3, [r5, #0]
 80035a6:	b103      	cbz	r3, 80035aa <_lseek_r+0x1e>
 80035a8:	6023      	str	r3, [r4, #0]
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	20000184 	.word	0x20000184

080035b0 <__swhatbuf_r>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	460e      	mov	r6, r1
 80035b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80035b8:	4614      	mov	r4, r2
 80035ba:	2900      	cmp	r1, #0
 80035bc:	461d      	mov	r5, r3
 80035be:	b096      	sub	sp, #88	; 0x58
 80035c0:	da08      	bge.n	80035d4 <__swhatbuf_r+0x24>
 80035c2:	2200      	movs	r2, #0
 80035c4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80035c8:	602a      	str	r2, [r5, #0]
 80035ca:	061a      	lsls	r2, r3, #24
 80035cc:	d410      	bmi.n	80035f0 <__swhatbuf_r+0x40>
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	e00e      	b.n	80035f2 <__swhatbuf_r+0x42>
 80035d4:	466a      	mov	r2, sp
 80035d6:	f000 f8c5 	bl	8003764 <_fstat_r>
 80035da:	2800      	cmp	r0, #0
 80035dc:	dbf1      	blt.n	80035c2 <__swhatbuf_r+0x12>
 80035de:	9a01      	ldr	r2, [sp, #4]
 80035e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80035e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80035e8:	425a      	negs	r2, r3
 80035ea:	415a      	adcs	r2, r3
 80035ec:	602a      	str	r2, [r5, #0]
 80035ee:	e7ee      	b.n	80035ce <__swhatbuf_r+0x1e>
 80035f0:	2340      	movs	r3, #64	; 0x40
 80035f2:	2000      	movs	r0, #0
 80035f4:	6023      	str	r3, [r4, #0]
 80035f6:	b016      	add	sp, #88	; 0x58
 80035f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080035fc <__smakebuf_r>:
 80035fc:	898b      	ldrh	r3, [r1, #12]
 80035fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003600:	079d      	lsls	r5, r3, #30
 8003602:	4606      	mov	r6, r0
 8003604:	460c      	mov	r4, r1
 8003606:	d507      	bpl.n	8003618 <__smakebuf_r+0x1c>
 8003608:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800360c:	6023      	str	r3, [r4, #0]
 800360e:	6123      	str	r3, [r4, #16]
 8003610:	2301      	movs	r3, #1
 8003612:	6163      	str	r3, [r4, #20]
 8003614:	b002      	add	sp, #8
 8003616:	bd70      	pop	{r4, r5, r6, pc}
 8003618:	466a      	mov	r2, sp
 800361a:	ab01      	add	r3, sp, #4
 800361c:	f7ff ffc8 	bl	80035b0 <__swhatbuf_r>
 8003620:	9900      	ldr	r1, [sp, #0]
 8003622:	4605      	mov	r5, r0
 8003624:	4630      	mov	r0, r6
 8003626:	f7ff fa5b 	bl	8002ae0 <_malloc_r>
 800362a:	b948      	cbnz	r0, 8003640 <__smakebuf_r+0x44>
 800362c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003630:	059a      	lsls	r2, r3, #22
 8003632:	d4ef      	bmi.n	8003614 <__smakebuf_r+0x18>
 8003634:	f023 0303 	bic.w	r3, r3, #3
 8003638:	f043 0302 	orr.w	r3, r3, #2
 800363c:	81a3      	strh	r3, [r4, #12]
 800363e:	e7e3      	b.n	8003608 <__smakebuf_r+0xc>
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <__smakebuf_r+0x7c>)
 8003642:	62b3      	str	r3, [r6, #40]	; 0x28
 8003644:	89a3      	ldrh	r3, [r4, #12]
 8003646:	6020      	str	r0, [r4, #0]
 8003648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800364c:	81a3      	strh	r3, [r4, #12]
 800364e:	9b00      	ldr	r3, [sp, #0]
 8003650:	6120      	str	r0, [r4, #16]
 8003652:	6163      	str	r3, [r4, #20]
 8003654:	9b01      	ldr	r3, [sp, #4]
 8003656:	b15b      	cbz	r3, 8003670 <__smakebuf_r+0x74>
 8003658:	4630      	mov	r0, r6
 800365a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800365e:	f000 f893 	bl	8003788 <_isatty_r>
 8003662:	b128      	cbz	r0, 8003670 <__smakebuf_r+0x74>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	f023 0303 	bic.w	r3, r3, #3
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	81a3      	strh	r3, [r4, #12]
 8003670:	89a0      	ldrh	r0, [r4, #12]
 8003672:	4305      	orrs	r5, r0
 8003674:	81a5      	strh	r5, [r4, #12]
 8003676:	e7cd      	b.n	8003614 <__smakebuf_r+0x18>
 8003678:	080028f9 	.word	0x080028f9

0800367c <memchr>:
 800367c:	4603      	mov	r3, r0
 800367e:	b510      	push	{r4, lr}
 8003680:	b2c9      	uxtb	r1, r1
 8003682:	4402      	add	r2, r0
 8003684:	4293      	cmp	r3, r2
 8003686:	4618      	mov	r0, r3
 8003688:	d101      	bne.n	800368e <memchr+0x12>
 800368a:	2000      	movs	r0, #0
 800368c:	e003      	b.n	8003696 <memchr+0x1a>
 800368e:	7804      	ldrb	r4, [r0, #0]
 8003690:	3301      	adds	r3, #1
 8003692:	428c      	cmp	r4, r1
 8003694:	d1f6      	bne.n	8003684 <memchr+0x8>
 8003696:	bd10      	pop	{r4, pc}

08003698 <__malloc_lock>:
 8003698:	4801      	ldr	r0, [pc, #4]	; (80036a0 <__malloc_lock+0x8>)
 800369a:	f7ff b9ff 	b.w	8002a9c <__retarget_lock_acquire_recursive>
 800369e:	bf00      	nop
 80036a0:	20000178 	.word	0x20000178

080036a4 <__malloc_unlock>:
 80036a4:	4801      	ldr	r0, [pc, #4]	; (80036ac <__malloc_unlock+0x8>)
 80036a6:	f7ff b9fa 	b.w	8002a9e <__retarget_lock_release_recursive>
 80036aa:	bf00      	nop
 80036ac:	20000178 	.word	0x20000178

080036b0 <_free_r>:
 80036b0:	b538      	push	{r3, r4, r5, lr}
 80036b2:	4605      	mov	r5, r0
 80036b4:	2900      	cmp	r1, #0
 80036b6:	d040      	beq.n	800373a <_free_r+0x8a>
 80036b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036bc:	1f0c      	subs	r4, r1, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	bfb8      	it	lt
 80036c2:	18e4      	addlt	r4, r4, r3
 80036c4:	f7ff ffe8 	bl	8003698 <__malloc_lock>
 80036c8:	4a1c      	ldr	r2, [pc, #112]	; (800373c <_free_r+0x8c>)
 80036ca:	6813      	ldr	r3, [r2, #0]
 80036cc:	b933      	cbnz	r3, 80036dc <_free_r+0x2c>
 80036ce:	6063      	str	r3, [r4, #4]
 80036d0:	6014      	str	r4, [r2, #0]
 80036d2:	4628      	mov	r0, r5
 80036d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036d8:	f7ff bfe4 	b.w	80036a4 <__malloc_unlock>
 80036dc:	42a3      	cmp	r3, r4
 80036de:	d908      	bls.n	80036f2 <_free_r+0x42>
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	1821      	adds	r1, r4, r0
 80036e4:	428b      	cmp	r3, r1
 80036e6:	bf01      	itttt	eq
 80036e8:	6819      	ldreq	r1, [r3, #0]
 80036ea:	685b      	ldreq	r3, [r3, #4]
 80036ec:	1809      	addeq	r1, r1, r0
 80036ee:	6021      	streq	r1, [r4, #0]
 80036f0:	e7ed      	b.n	80036ce <_free_r+0x1e>
 80036f2:	461a      	mov	r2, r3
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	b10b      	cbz	r3, 80036fc <_free_r+0x4c>
 80036f8:	42a3      	cmp	r3, r4
 80036fa:	d9fa      	bls.n	80036f2 <_free_r+0x42>
 80036fc:	6811      	ldr	r1, [r2, #0]
 80036fe:	1850      	adds	r0, r2, r1
 8003700:	42a0      	cmp	r0, r4
 8003702:	d10b      	bne.n	800371c <_free_r+0x6c>
 8003704:	6820      	ldr	r0, [r4, #0]
 8003706:	4401      	add	r1, r0
 8003708:	1850      	adds	r0, r2, r1
 800370a:	4283      	cmp	r3, r0
 800370c:	6011      	str	r1, [r2, #0]
 800370e:	d1e0      	bne.n	80036d2 <_free_r+0x22>
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	4401      	add	r1, r0
 8003716:	6011      	str	r1, [r2, #0]
 8003718:	6053      	str	r3, [r2, #4]
 800371a:	e7da      	b.n	80036d2 <_free_r+0x22>
 800371c:	d902      	bls.n	8003724 <_free_r+0x74>
 800371e:	230c      	movs	r3, #12
 8003720:	602b      	str	r3, [r5, #0]
 8003722:	e7d6      	b.n	80036d2 <_free_r+0x22>
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	1821      	adds	r1, r4, r0
 8003728:	428b      	cmp	r3, r1
 800372a:	bf01      	itttt	eq
 800372c:	6819      	ldreq	r1, [r3, #0]
 800372e:	685b      	ldreq	r3, [r3, #4]
 8003730:	1809      	addeq	r1, r1, r0
 8003732:	6021      	streq	r1, [r4, #0]
 8003734:	6063      	str	r3, [r4, #4]
 8003736:	6054      	str	r4, [r2, #4]
 8003738:	e7cb      	b.n	80036d2 <_free_r+0x22>
 800373a:	bd38      	pop	{r3, r4, r5, pc}
 800373c:	2000017c 	.word	0x2000017c

08003740 <_read_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4604      	mov	r4, r0
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	2200      	movs	r2, #0
 800374a:	4d05      	ldr	r5, [pc, #20]	; (8003760 <_read_r+0x20>)
 800374c:	602a      	str	r2, [r5, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fc ffd8 	bl	8000704 <_read>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_read_r+0x1e>
 8003758:	682b      	ldr	r3, [r5, #0]
 800375a:	b103      	cbz	r3, 800375e <_read_r+0x1e>
 800375c:	6023      	str	r3, [r4, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000184 	.word	0x20000184

08003764 <_fstat_r>:
 8003764:	b538      	push	{r3, r4, r5, lr}
 8003766:	2300      	movs	r3, #0
 8003768:	4d06      	ldr	r5, [pc, #24]	; (8003784 <_fstat_r+0x20>)
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	602b      	str	r3, [r5, #0]
 8003772:	f7fd f80b 	bl	800078c <_fstat>
 8003776:	1c43      	adds	r3, r0, #1
 8003778:	d102      	bne.n	8003780 <_fstat_r+0x1c>
 800377a:	682b      	ldr	r3, [r5, #0]
 800377c:	b103      	cbz	r3, 8003780 <_fstat_r+0x1c>
 800377e:	6023      	str	r3, [r4, #0]
 8003780:	bd38      	pop	{r3, r4, r5, pc}
 8003782:	bf00      	nop
 8003784:	20000184 	.word	0x20000184

08003788 <_isatty_r>:
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	2300      	movs	r3, #0
 800378c:	4d05      	ldr	r5, [pc, #20]	; (80037a4 <_isatty_r+0x1c>)
 800378e:	4604      	mov	r4, r0
 8003790:	4608      	mov	r0, r1
 8003792:	602b      	str	r3, [r5, #0]
 8003794:	f7fd f809 	bl	80007aa <_isatty>
 8003798:	1c43      	adds	r3, r0, #1
 800379a:	d102      	bne.n	80037a2 <_isatty_r+0x1a>
 800379c:	682b      	ldr	r3, [r5, #0]
 800379e:	b103      	cbz	r3, 80037a2 <_isatty_r+0x1a>
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	bd38      	pop	{r3, r4, r5, pc}
 80037a4:	20000184 	.word	0x20000184

080037a8 <_init>:
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	bf00      	nop
 80037ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ae:	bc08      	pop	{r3}
 80037b0:	469e      	mov	lr, r3
 80037b2:	4770      	bx	lr

080037b4 <_fini>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	bf00      	nop
 80037b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ba:	bc08      	pop	{r3}
 80037bc:	469e      	mov	lr, r3
 80037be:	4770      	bx	lr
